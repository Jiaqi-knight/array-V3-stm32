ARM GAS  /tmp/ccZ0eTf3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 1
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB140:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /*
   2:Src/main.c    **** * This file is part of the phased-array project.
   3:Src/main.c    **** *
   4:Src/main.c    **** * Copyright (C) 2018 Niklas Fauth <niklas.fauth@kit.fail>
   5:Src/main.c    **** *
   6:Src/main.c    **** * This program is free software: you can redistribute it and/or modify
   7:Src/main.c    **** * it under the terms of the GNU General Public License as published by
   8:Src/main.c    **** * the Free Software Foundation, either version 3 of the License, or
   9:Src/main.c    **** * (at your option) any later version.
  10:Src/main.c    **** *
  11:Src/main.c    **** * This program is distributed in the hope that it will be useful,
  12:Src/main.c    **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:Src/main.c    **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:Src/main.c    **** * GNU General Public License for more details.
  15:Src/main.c    **** *
  16:Src/main.c    **** * You should have received a copy of the GNU General Public License
  17:Src/main.c    **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    **** */
  19:Src/main.c    **** 
  20:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "defines.h"
  23:Src/main.c    **** #include "stm32f3xx_hal.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  26:Src/main.c    **** ADC_HandleTypeDef hadc1;
  27:Src/main.c    **** ADC_HandleTypeDef hadc2;
  28:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  29:Src/main.c    **** DMA_HandleTypeDef hdma_adc2;
  30:Src/main.c    **** 
  31:Src/main.c    **** COMP_HandleTypeDef hcomp2;
ARM GAS  /tmp/ccZ0eTf3.s 			page 2


  32:Src/main.c    **** COMP_HandleTypeDef hcomp4;
  33:Src/main.c    **** COMP_HandleTypeDef hcomp6;
  34:Src/main.c    **** 
  35:Src/main.c    **** DAC_HandleTypeDef hdac1;
  36:Src/main.c    **** DAC_HandleTypeDef hdac2;
  37:Src/main.c    **** 
  38:Src/main.c    **** HRTIM_HandleTypeDef hhrtim1;
  39:Src/main.c    **** 
  40:Src/main.c    **** TIM_HandleTypeDef htim2;
  41:Src/main.c    **** TIM_HandleTypeDef htim3;
  42:Src/main.c    **** 
  43:Src/main.c    **** UART_HandleTypeDef huart1;
  44:Src/main.c    **** UART_HandleTypeDef huart3;
  45:Src/main.c    **** DMA_HandleTypeDef hdma_usart1_rx;
  46:Src/main.c    **** DMA_HandleTypeDef hdma_usart1_tx;
  47:Src/main.c    **** 
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  50:Src/main.c    **** float Vin;
  51:Src/main.c    **** float Vout;
  52:Src/main.c    **** float Temp1;
  53:Src/main.c    **** float Temp2;
  54:Src/main.c    **** float Iout;
  55:Src/main.c    **** 
  56:Src/main.c    **** float US_pp;
  57:Src/main.c    **** 
  58:Src/main.c    **** float duty;
  59:Src/main.c    **** float esum;
  60:Src/main.c    **** 
  61:Src/main.c    **** uint16_t lastTimer = 0;
  62:Src/main.c    **** uint16_t periode = 0;
  63:Src/main.c    **** uint16_t phase = 0;
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  66:Src/main.c    **** void SystemClock_Config(void);
  67:Src/main.c    **** static void MX_GPIO_Init(void);
  68:Src/main.c    **** static void MX_DMA_Init(void);
  69:Src/main.c    **** static void MX_ADC1_Init(void);
  70:Src/main.c    **** static void MX_ADC2_Init(void);
  71:Src/main.c    **** static void MX_COMP2_Init(void);
  72:Src/main.c    **** static void MX_COMP4_Init(void);
  73:Src/main.c    **** static void MX_COMP6_Init(void);
  74:Src/main.c    **** static void MX_DAC1_Init(void);
  75:Src/main.c    **** static void MX_HRTIM1_Init(void);
  76:Src/main.c    **** static void MX_TIM2_Init(void);
  77:Src/main.c    **** static void MX_TIM3_Init(void);
  78:Src/main.c    **** static void MX_USART1_UART_Init(void);
  79:Src/main.c    **** static void MX_USART3_UART_Init(void);
  80:Src/main.c    **** static void MX_DAC2_Init(void);
  81:Src/main.c    **** static void HRTIM_Config(void);
  82:Src/main.c    **** static void ADC1_Config(void);
  83:Src/main.c    **** static void ADC2_Config(void);
  84:Src/main.c    **** static float r2temp(float);
  85:Src/main.c    **** 
  86:Src/main.c    **** void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim1);
  87:Src/main.c    **** 
  88:Src/main.c    **** 
ARM GAS  /tmp/ccZ0eTf3.s 			page 3


  89:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  90:Src/main.c    **** 
  91:Src/main.c    **** 
  92:Src/main.c    **** void DCDC_Reg() {
  93:Src/main.c    ****   HAL_GPIO_TogglePin(LED_ACT_GPIO_Port, LED_ACT_Pin);
  94:Src/main.c    **** }
  95:Src/main.c    **** 
  96:Src/main.c    **** uint16_t uwIC2Value1 = 0;
  97:Src/main.c    **** 
  98:Src/main.c    **** int main(void)
  99:Src/main.c    **** {
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 104:Src/main.c    ****   HAL_Init();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Configure the system clock */
 107:Src/main.c    ****   SystemClock_Config();
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Initialize all configured peripherals */
 110:Src/main.c    ****   MX_GPIO_Init();
 111:Src/main.c    ****   MX_DMA_Init();
 112:Src/main.c    **** 
 113:Src/main.c    ****   //MX_COMP2_Init();
 114:Src/main.c    ****   //MX_COMP4_Init();
 115:Src/main.c    ****   //MX_COMP6_Init();
 116:Src/main.c    ****   //MX_DAC1_Init();
 117:Src/main.c    ****   //MX_HRTIM1_Init();
 118:Src/main.c    ****   MX_TIM2_Init();
 119:Src/main.c    ****   //MX_TIM3_Init();
 120:Src/main.c    **** 
 121:Src/main.c    ****   MX_USART1_UART_Init();
 122:Src/main.c    ****   MX_USART3_UART_Init();
 123:Src/main.c    **** 
 124:Src/main.c    ****   ADC1_Config();
 125:Src/main.c    ****   ADC2_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****   HRTIM_Config();
 128:Src/main.c    ****   //MX_DAC2_Init();
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Infinite loop */
 131:Src/main.c    **** 
 132:Src/main.c    **** 
 133:Src/main.c    **** 
 134:Src/main.c    ****   while (1)
 135:Src/main.c    ****   {
 136:Src/main.c    ****     for (int i = 0; i < 1500; i++) {
 137:Src/main.c    ****       Vin = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * ADC_VREF * VOUT_DIV)/ARES;
 138:Src/main.c    ****       Vout = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * ADC_VREF * VOUT_DIV)/ARES;
 139:Src/main.c    **** 
 140:Src/main.c    ****       Iout = (HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1) * ADC_VREF * IOUT_DIV)/ARES;
 141:Src/main.c    **** 
 142:Src/main.c    ****       Temp1 = r2temp(NTC_R((HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2) * ADC_VREF)/ARE
 143:Src/main.c    ****       Temp2 = r2temp(NTC_R((HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3) * ADC_VREF)/ARE
 144:Src/main.c    **** 
 145:Src/main.c    ****       US_pp = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * ADC_VREF)/ARES;
ARM GAS  /tmp/ccZ0eTf3.s 			page 4


 146:Src/main.c    **** 
 147:Src/main.c    ****       float error = VTARGET - Vout;
 148:Src/main.c    ****       esum += error;
 149:Src/main.c    ****       esum = CLAMP(esum, -2000, 2000);
 150:Src/main.c    **** 
 151:Src/main.c    ****       duty = 1.0f - (Vin / (VTARGET + DC_RES * Iout + (esum * 0.01f)));
 152:Src/main.c    ****       duty = MIN(duty, 0.76f); // limit dutycicle (max 50V at 12V in)
 153:Src/main.c    **** 
 154:Src/main.c    ****       uint16_t TIMERSET = BUCK_PWM_PERIOD - (BUCK_PWM_PERIOD * duty);
 155:Src/main.c    **** 
 156:Src/main.c    ****       HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = TIMERSET; //set new compare value
 157:Src/main.c    ****       //HAL_Delay(1);
 158:Src/main.c    ****     }
 159:Src/main.c    **** 
 160:Src/main.c    ****     HAL_GPIO_TogglePin(LED_READY_GPIO_Port, LED_READY_Pin);
 161:Src/main.c    **** 
 162:Src/main.c    ****     if (US_pp > 1.7f) {
 163:Src/main.c    ****       HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 164:Src/main.c    ****     } else {
 165:Src/main.c    ****       HAL_NVIC_DisableIRQ(ADC1_2_IRQn);
 166:Src/main.c    ****     }
 167:Src/main.c    **** 
 168:Src/main.c    ****     //printf("%c[2J", 27); // clear terminal
 169:Src/main.c    ****     //printf("%c[H", 27);  // home cursor
 170:Src/main.c    **** 
 171:Src/main.c    ****     HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin,(Temp1 > 50 || Temp2 > 50));
 172:Src/main.c    **** 
 173:Src/main.c    **** 
 174:Src/main.c    ****     //printf("NTC1: %.2fÂ°C  NTC2: %.2fÂ°C\n\r", Temp1, Temp2);
 175:Src/main.c    ****     //printf("Vin:  %.3fV  Vout: %.3fV\n\r", Vin, Vout);
 176:Src/main.c    ****     //printf("Iout: %.2fA    Pout: %.2fW  e: %.2f\n\r", Iout, Iout*Vout, esum);
 177:Src/main.c    ****     //printf("US pp: %.3fV\n\r", US_pp);
 178:Src/main.c    ****     //printf("Periode: %d\n\r", periode);
 179:Src/main.c    **** 
 180:Src/main.c    ****     printf("%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%d;%d\n\r", Temp1, Temp2, Vin, Vout, Iout, US_pp, periode
 181:Src/main.c    ****   }
 182:Src/main.c    **** }
 183:Src/main.c    **** 
 184:Src/main.c    **** void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 185:Src/main.c    **** {
 186:Src/main.c    ****   if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 187:Src/main.c    ****   {
 188:Src/main.c    ****     uint16_t curTimer = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 189:Src/main.c    ****     if (curTimer < lastTimer) {
 190:Src/main.c    ****       periode = curTimer + (0xFFFF - lastTimer);
 191:Src/main.c    ****     } else {
 192:Src/main.c    ****       periode = lastTimer - curTimer;
 193:Src/main.c    ****     }
 194:Src/main.c    ****     lastTimer = curTimer;
 195:Src/main.c    ****   }
 196:Src/main.c    ****   if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 197:Src/main.c    ****   {
 198:Src/main.c    ****     uint16_t curTimer = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 199:Src/main.c    ****     if (curTimer < lastTimer) {
 200:Src/main.c    ****       phase = curTimer + (0xFFFF - lastTimer);
 201:Src/main.c    ****     } else {
 202:Src/main.c    ****       phase = lastTimer - curTimer;
ARM GAS  /tmp/ccZ0eTf3.s 			page 5


 203:Src/main.c    ****     }
 204:Src/main.c    ****   }
 205:Src/main.c    **** }
 206:Src/main.c    **** 
 207:Src/main.c    **** /** System Clock Configuration
 208:Src/main.c    **** */
 209:Src/main.c    **** void SystemClock_Config(void)
 210:Src/main.c    **** {
 211:Src/main.c    **** 
 212:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 213:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 214:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 215:Src/main.c    **** 
 216:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 217:Src/main.c    ****     */
 218:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 219:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 220:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 221:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 223:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 224:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 225:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 226:Src/main.c    ****   {
 227:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 228:Src/main.c    ****   }
 229:Src/main.c    **** 
 230:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 231:Src/main.c    ****     */
 232:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 233:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 234:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 235:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 236:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 237:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 238:Src/main.c    **** 
 239:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 240:Src/main.c    ****   {
 241:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 242:Src/main.c    ****   }
 243:Src/main.c    **** 
 244:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1
 245:Src/main.c    ****                               |RCC_PERIPHCLK_ADC12;
 246:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 247:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 248:Src/main.c    ****   PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 249:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 250:Src/main.c    ****   {
 251:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 252:Src/main.c    ****   }
 253:Src/main.c    **** 
 254:Src/main.c    ****     /**Configure the Systick interrupt time
 255:Src/main.c    ****     */
 256:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 257:Src/main.c    **** 
 258:Src/main.c    ****     /**Configure the Systick
 259:Src/main.c    ****     */
ARM GAS  /tmp/ccZ0eTf3.s 			page 6


 260:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 263:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 264:Src/main.c    **** }
 265:Src/main.c    **** 
 266:Src/main.c    **** /**
 267:Src/main.c    ****   * @brief  Configure ADC1 for being used with HRTIM
 268:Src/main.c    ****   * @param  None
 269:Src/main.c    ****   * @retval None
 270:Src/main.c    ****   */
 271:Src/main.c    **** static void ADC1_Config(void)
 272:Src/main.c    **** {
 273:Src/main.c    ****   ADC_MultiModeTypeDef MultiModeConfig;
 274:Src/main.c    ****   ADC_InjectionConfTypeDef InjectionConfig;
 275:Src/main.c    **** 
 276:Src/main.c    ****   hadc1.Instance = ADC1;
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* ADC1 is working independently */
 279:Src/main.c    ****   MultiModeConfig.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 280:Src/main.c    ****   MultiModeConfig.Mode = ADC_MODE_INDEPENDENT;
 281:Src/main.c    ****   MultiModeConfig.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 282:Src/main.c    ****   HAL_ADCEx_MultiModeConfigChannel(&hadc1, &MultiModeConfig);
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* ADC1 global initialization */
 285:Src/main.c    ****   /* 12-bit right-aligned format, discontinuous scan mode, running from PLL */
 286:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 287:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 288:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 289:Src/main.c    ****   hadc1.Init.ScanConvMode = ENABLE;
 290:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 291:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 292:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 293:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 294:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 295:Src/main.c    ****   hadc1.Init.NbrOfDiscConversion = 1;
 296:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 297:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 298:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 299:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 300:Src/main.c    ****   HAL_ADC_Init(&hadc1);
 301:Src/main.c    **** 
 302:Src/main.c    ****   /* Discontinuous injected mode: 1st injected conversion for Vout on Ch11 */
 303:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_11;
 304:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_1;
 305:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 306:Src/main.c    ****   InjectionConfig.InjectedSingleDiff = ADC_SINGLE_ENDED;
 307:Src/main.c    ****   InjectionConfig.InjectedOffsetNumber = ADC_OFFSET_NONE;
 308:Src/main.c    ****   InjectionConfig.InjectedOffset = 0;
 309:Src/main.c    ****   InjectionConfig.InjectedNbrOfConversion = 3;
 310:Src/main.c    ****   InjectionConfig.InjectedDiscontinuousConvMode = DISABLE;
 311:Src/main.c    ****   InjectionConfig.AutoInjectedConv = DISABLE;
 312:Src/main.c    ****   InjectionConfig.QueueInjectedContext = DISABLE;
 313:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_HRTIM_TRG2;
 314:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 315:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc1, &InjectionConfig);
 316:Src/main.c    **** 
ARM GAS  /tmp/ccZ0eTf3.s 			page 7


 317:Src/main.c    ****   /* Configure the 2nd injected conversion for Vin on Ch12 */
 318:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_12;
 319:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_2;
 320:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 321:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc1, &InjectionConfig);
 322:Src/main.c    **** 
 323:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_13;
 324:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_3;
 325:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 326:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc1, &InjectionConfig);
 327:Src/main.c    **** 
 328:Src/main.c    ****   /* Run the ADC calibration in single-ended mode */
 329:Src/main.c    ****   HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* Start ADC2 Injected Conversions */
 332:Src/main.c    ****   HAL_ADCEx_InjectedStart(&hadc1);
 333:Src/main.c    **** 
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** static void ADC2_Config(void)
 337:Src/main.c    **** {
 338:Src/main.c    ****   ADC_MultiModeTypeDef MultiModeConfig;
 339:Src/main.c    ****   ADC_InjectionConfTypeDef InjectionConfig;
 340:Src/main.c    **** 
 341:Src/main.c    ****   hadc2.Instance = ADC2;
 342:Src/main.c    **** 
 343:Src/main.c    ****   /* ADC1 is working independently */
 344:Src/main.c    ****   MultiModeConfig.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 345:Src/main.c    ****   MultiModeConfig.Mode = ADC_MODE_INDEPENDENT;
 346:Src/main.c    ****   MultiModeConfig.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 347:Src/main.c    ****   HAL_ADCEx_MultiModeConfigChannel(&hadc2, &MultiModeConfig);
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* ADC2 global initialization */
 350:Src/main.c    ****   /* 12-bit right-aligned format, discontinuous scan mode, running from PLL */
 351:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 352:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 353:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 354:Src/main.c    ****   hadc2.Init.ScanConvMode = ENABLE;
 355:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 356:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 357:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 358:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 359:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 360:Src/main.c    ****   hadc2.Init.NbrOfDiscConversion = 1;
 361:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 362:Src/main.c    ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 363:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 364:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 365:Src/main.c    ****   HAL_ADC_Init(&hadc2);
 366:Src/main.c    **** 
 367:Src/main.c    ****   /* Discontinuous injected mode: 1st injected conversion for Iout on Ch13 */
 368:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_13;
 369:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_1;
 370:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 371:Src/main.c    ****   InjectionConfig.InjectedSingleDiff = ADC_SINGLE_ENDED;
 372:Src/main.c    ****   InjectionConfig.InjectedOffsetNumber = ADC_OFFSET_NONE;
 373:Src/main.c    ****   InjectionConfig.InjectedOffset = 0;
ARM GAS  /tmp/ccZ0eTf3.s 			page 8


 374:Src/main.c    ****   InjectionConfig.InjectedNbrOfConversion = 3;
 375:Src/main.c    ****   InjectionConfig.InjectedDiscontinuousConvMode = DISABLE;
 376:Src/main.c    ****   InjectionConfig.AutoInjectedConv = DISABLE;
 377:Src/main.c    ****   InjectionConfig.QueueInjectedContext = DISABLE;
 378:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_HRTIM_TRG2;
 379:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 380:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc2, &InjectionConfig);
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* Configure the 2nd injected conversion for NTC1 on Ch14 */
 383:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_14;
 384:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_2;
 385:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 386:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc2, &InjectionConfig);
 387:Src/main.c    **** 
 388:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_15;
 389:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_3;
 390:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 391:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc2, &InjectionConfig);
 392:Src/main.c    **** 
 393:Src/main.c    ****   /* Run the ADC calibration in single-ended mode */
 394:Src/main.c    ****   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* Start ADC2 Injected Conversions */
 397:Src/main.c    ****   HAL_ADCEx_InjectedStart(&hadc2);
 398:Src/main.c    **** 
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /* COMP2 init function */
 402:Src/main.c    **** static void MX_COMP2_Init(void)
 403:Src/main.c    **** {
 404:Src/main.c    **** 
 405:Src/main.c    ****   hcomp2.Instance = COMP2;
 406:Src/main.c    ****   hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 407:Src/main.c    ****   hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 408:Src/main.c    ****   hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN;
 409:Src/main.c    ****   hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 410:Src/main.c    ****   hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 411:Src/main.c    ****   hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 412:Src/main.c    ****   if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 413:Src/main.c    ****   {
 414:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 415:Src/main.c    ****   }
 416:Src/main.c    **** 
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** /* COMP4 init function */
 420:Src/main.c    **** static void MX_COMP4_Init(void)
 421:Src/main.c    **** {
 422:Src/main.c    **** 
 423:Src/main.c    ****   hcomp4.Instance = COMP4;
 424:Src/main.c    ****   hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 425:Src/main.c    ****   hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 426:Src/main.c    ****   hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN;
 427:Src/main.c    ****   hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 428:Src/main.c    ****   hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 429:Src/main.c    ****   hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 430:Src/main.c    ****   if (HAL_COMP_Init(&hcomp4) != HAL_OK)
ARM GAS  /tmp/ccZ0eTf3.s 			page 9


 431:Src/main.c    ****   {
 432:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 433:Src/main.c    ****   }
 434:Src/main.c    **** 
 435:Src/main.c    **** }
 436:Src/main.c    **** 
 437:Src/main.c    **** /* COMP6 init function */
 438:Src/main.c    **** static void MX_COMP6_Init(void)
 439:Src/main.c    **** {
 440:Src/main.c    **** 
 441:Src/main.c    ****   hcomp6.Instance = COMP6;
 442:Src/main.c    ****   hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_DAC2_CH1;
 443:Src/main.c    ****   hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 444:Src/main.c    ****   hcomp6.Init.Output = COMP_OUTPUT_TIM2IC2;
 445:Src/main.c    ****   hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 446:Src/main.c    ****   hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 447:Src/main.c    ****   hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 448:Src/main.c    ****   if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 449:Src/main.c    ****   {
 450:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 451:Src/main.c    ****   }
 452:Src/main.c    **** 
 453:Src/main.c    **** }
 454:Src/main.c    **** 
 455:Src/main.c    **** /* DAC1 init function */
 456:Src/main.c    **** static void MX_DAC1_Init(void)
 457:Src/main.c    **** {
 458:Src/main.c    **** 
 459:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig;
 460:Src/main.c    **** 
 461:Src/main.c    ****     /**DAC Initialization
 462:Src/main.c    ****     */
 463:Src/main.c    ****   hdac1.Instance = DAC1;
 464:Src/main.c    ****   if (HAL_DAC_Init(&hdac1) != HAL_OK)
 465:Src/main.c    ****   {
 466:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 467:Src/main.c    ****   }
 468:Src/main.c    **** 
 469:Src/main.c    ****     /**DAC channel OUT1 config
 470:Src/main.c    ****     */
 471:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 472:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 473:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 474:Src/main.c    ****   {
 475:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 476:Src/main.c    ****   }
 477:Src/main.c    **** 
 478:Src/main.c    ****     /**DAC channel OUT2 config
 479:Src/main.c    ****     */
 480:Src/main.c    ****   sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_DISABLE;
 481:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 482:Src/main.c    ****   {
 483:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 484:Src/main.c    ****   }
 485:Src/main.c    **** 
 486:Src/main.c    **** }
 487:Src/main.c    **** 
ARM GAS  /tmp/ccZ0eTf3.s 			page 10


 488:Src/main.c    **** /* DAC2 init function */
 489:Src/main.c    **** static void MX_DAC2_Init(void)
 490:Src/main.c    **** {
 491:Src/main.c    **** 
 492:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig;
 493:Src/main.c    **** 
 494:Src/main.c    ****     /**DAC Initialization
 495:Src/main.c    ****     */
 496:Src/main.c    ****   hdac2.Instance = DAC2;
 497:Src/main.c    ****   if (HAL_DAC_Init(&hdac2) != HAL_OK)
 498:Src/main.c    ****   {
 499:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 500:Src/main.c    ****   }
 501:Src/main.c    **** 
 502:Src/main.c    ****     /**DAC channel OUT1 config
 503:Src/main.c    ****     */
 504:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 505:Src/main.c    ****   sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 506:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 507:Src/main.c    ****   {
 508:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 509:Src/main.c    ****   }
 510:Src/main.c    **** 
 511:Src/main.c    **** }
 512:Src/main.c    **** 
 513:Src/main.c    **** /**
 514:Src/main.c    **** * @brief  HRTIM configuration
 515:Src/main.c    **** * @param  None
 516:Src/main.c    **** * @retval None
 517:Src/main.c    **** */
 518:Src/main.c    **** static void HRTIM_Config(void)
 519:Src/main.c    **** {
 520:Src/main.c    ****   HRTIM_TimeBaseCfgTypeDef timebase_config;
 521:Src/main.c    ****   HRTIM_TimerCfgTypeDef timer_config;
 522:Src/main.c    ****   HRTIM_OutputCfgTypeDef output_config_TA1_TA2;
 523:Src/main.c    ****   HRTIM_CompareCfgTypeDef compare_config;
 524:Src/main.c    ****   HRTIM_DeadTimeCfgTypeDef HRTIM_TIM_DeadTimeConfig;
 525:Src/main.c    ****   HRTIM_ADCTriggerCfgTypeDef adc_trigger_config;
 526:Src/main.c    ****   HRTIM_FaultCfgTypeDef fault_config;
 527:Src/main.c    **** 
 528:Src/main.c    ****   /* ----------------------------*/
 529:Src/main.c    ****   /* HRTIM Global initialization */
 530:Src/main.c    ****   /* ----------------------------*/
 531:Src/main.c    ****   /* Initialize the hrtim structure (minimal configuration) */
 532:Src/main.c    ****   hhrtim1.Instance = HRTIM1;
 533:Src/main.c    ****   hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 534:Src/main.c    ****   hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 535:Src/main.c    **** 
 536:Src/main.c    ****   /* Initialize HRTIM */
 537:Src/main.c    ****   HAL_HRTIM_Init(&hhrtim1);
 538:Src/main.c    **** 
 539:Src/main.c    ****   /* HRTIM DLL calibration: periodic calibration, set period to 14\B5s */
 540:Src/main.c    ****   //HAL_HRTIM_DLLCalibrationStart(&hhrtim, HRTIM_CALIBRATIONRATE_14);
 541:Src/main.c    ****   /* Wait calibration completion*/
 542:Src/main.c    ****   //if (HAL_HRTIM_PollForDLLCalibration(&hhrtim, 100) != HAL_OK)
 543:Src/main.c    ****   //{
 544:Src/main.c    ****   //  Error_Handler(); // if DLL or clock is not correctly set
ARM GAS  /tmp/ccZ0eTf3.s 			page 11


 545:Src/main.c    ****   //}
 546:Src/main.c    **** 
 547:Src/main.c    ****   /* --------------------------------------------------- */
 548:Src/main.c    ****   /* TIMERA initialization: timer mode and PWM frequency */
 549:Src/main.c    ****   /* --------------------------------------------------- */
 550:Src/main.c    ****   timebase_config.Period = BUCK_PWM_PERIOD; /* 280kHz switching frequency */
 551:Src/main.c    ****   timebase_config.RepetitionCounter = 63; /* 1 ISR every 128 PWM periods */
 552:Src/main.c    ****   timebase_config.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 553:Src/main.c    ****   timebase_config.Mode = HRTIM_MODE_CONTINUOUS;
 554:Src/main.c    ****   HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &timebase_config);
 555:Src/main.c    **** 
 556:Src/main.c    **** 
 557:Src/main.c    ****   /* --------------------------------------------------------------------- */
 558:Src/main.c    ****   /* TIMERA global configuration: cnt reset, sync, update, fault, burst... */
 559:Src/main.c    ****   /* timer running in continuous mode, with deadtime enabled               */
 560:Src/main.c    ****   /* --------------------------------------------------------------------- */
 561:Src/main.c    ****   timer_config.DMARequests = HRTIM_TIM_DMA_NONE;
 562:Src/main.c    ****   timer_config.DMASrcAddress = 0x0;
 563:Src/main.c    ****   timer_config.DMADstAddress = 0x0;
 564:Src/main.c    ****   timer_config.DMASize = 0x0;
 565:Src/main.c    ****   timer_config.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 566:Src/main.c    ****   timer_config.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 567:Src/main.c    ****   timer_config.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 568:Src/main.c    ****   timer_config.DACSynchro = HRTIM_DACSYNC_NONE;
 569:Src/main.c    ****   timer_config.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 570:Src/main.c    ****   timer_config.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 571:Src/main.c    ****   timer_config.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 572:Src/main.c    ****   timer_config.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 573:Src/main.c    ****   timer_config.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 574:Src/main.c    ****   timer_config.InterruptRequests = HRTIM_TIM_IT_REP;
 575:Src/main.c    ****   timer_config.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 576:Src/main.c    ****   timer_config.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1;
 577:Src/main.c    ****   timer_config.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 578:Src/main.c    ****   timer_config.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 579:Src/main.c    ****   timer_config.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 580:Src/main.c    ****   timer_config.UpdateTrigger= HRTIM_TIMUPDATETRIGGER_NONE;
 581:Src/main.c    ****   timer_config.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 582:Src/main.c    ****   HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &timer_config);
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* --------------------------------- */
 585:Src/main.c    ****   /* TA1 and TA2 waveforms description */
 586:Src/main.c    ****   /* --------------------------------- */
 587:Src/main.c    ****   output_config_TA1_TA2.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 588:Src/main.c    ****   output_config_TA1_TA2.SetSource = HRTIM_OUTPUTSET_TIMPER;
 589:Src/main.c    ****   output_config_TA1_TA2.ResetSource  = HRTIM_OUTPUTRESET_TIMCMP1;
 590:Src/main.c    ****   output_config_TA1_TA2.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 591:Src/main.c    ****   output_config_TA1_TA2.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 592:Src/main.c    ****   output_config_TA1_TA2.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 593:Src/main.c    ****   output_config_TA1_TA2.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 594:Src/main.c    ****   output_config_TA1_TA2.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 595:Src/main.c    ****   HAL_HRTIM_WaveformOutputConfig(&hhrtim1,
 596:Src/main.c    ****                                  HRTIM_TIMERINDEX_TIMER_A,
 597:Src/main.c    ****                                  HRTIM_OUTPUT_TA1,
 598:Src/main.c    ****                                  &output_config_TA1_TA2);
 599:Src/main.c    **** 
 600:Src/main.c    ****   HAL_HRTIM_WaveformOutputConfig(&hhrtim1,
 601:Src/main.c    ****                                  HRTIM_TIMERINDEX_TIMER_A,
ARM GAS  /tmp/ccZ0eTf3.s 			page 12


 602:Src/main.c    ****                                  HRTIM_OUTPUT_TA2,
 603:Src/main.c    ****                                  &output_config_TA1_TA2);
 604:Src/main.c    **** 
 605:Src/main.c    ****   /* Set compare registers for duty cycle on TA1 */
 606:Src/main.c    ****   compare_config.CompareValue = BUCK_PWM_PERIOD - 1;
 607:Src/main.c    ****   HAL_HRTIM_WaveformCompareConfig(&hhrtim1,
 608:Src/main.c    ****                                   HRTIM_TIMERINDEX_TIMER_A,
 609:Src/main.c    ****                                   HRTIM_COMPAREUNIT_1,
 610:Src/main.c    ****                                   &compare_config);
 611:Src/main.c    **** 
 612:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 613:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 614:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 615:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingValue = DT_FALLING;
 616:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 617:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 618:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 619:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 620:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingValue = DT_RISING;
 621:Src/main.c    ****   HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &HRTIM_TIM_DeadTimeConfig);
 622:Src/main.c    **** 
 623:Src/main.c    ****   /* ------------------------------------------- */
 624:Src/main.c    ****   /* ADC trigger intialization (with CMP2 event) */
 625:Src/main.c    ****   /* ------------------------------------------- */
 626:Src/main.c    ****   compare_config.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 627:Src/main.c    ****   compare_config.AutoDelayedTimeout = 0;
 628:Src/main.c    ****   compare_config.CompareValue = BUCK_PWM_PERIOD/10; /* Samples in middle of ON time */
 629:Src/main.c    ****   HAL_HRTIM_WaveformCompareConfig(&hhrtim1,
 630:Src/main.c    ****                                   HRTIM_TIMERINDEX_TIMER_A,
 631:Src/main.c    ****                                   HRTIM_COMPAREUNIT_2,
 632:Src/main.c    ****                                   &compare_config);
 633:Src/main.c    **** 
 634:Src/main.c    ****   adc_trigger_config.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERA_CMP2;
 635:Src/main.c    ****   adc_trigger_config.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 636:Src/main.c    ****   HAL_HRTIM_ADCTriggerConfig(&hhrtim1,
 637:Src/main.c    ****                              HRTIM_ADCTRIGGER_2,
 638:Src/main.c    ****                              &adc_trigger_config);
 639:Src/main.c    **** 
 640:Src/main.c    **** 
 641:Src/main.c    ****   /* ---------------------*/
 642:Src/main.c    ****   /* FAULT initialization */
 643:Src/main.c    ****   /* ---------------------*/
 644:Src/main.c    ****   //fault_config.Filter = HRTIM_FAULTFILTER_NONE;
 645:Src/main.c    ****   //fault_config.Lock = HRTIM_FAULTLOCK_READWRITE;
 646:Src/main.c    ****   //fault_config.Polarity = HRTIM_FAULTPOLARITY_LOW;
 647:Src/main.c    ****   //fault_config.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 648:Src/main.c    ****   //HAL_HRTIM_FaultConfig(&hhrtim1,
 649:Src/main.c    ****   //                      HRTIM_FAULT_1,
 650:Src/main.c    ****   //                      &fault_config);
 651:Src/main.c    **** 
 652:Src/main.c    ****   //HAL_HRTIM_FaultModeCtl(&hhrtim1,
 653:Src/main.c    ****   //                      HRTIM_FAULT_1,
 654:Src/main.c    ****   //                      HRTIM_FAULTMODECTL_ENABLED);
 655:Src/main.c    **** 
 656:Src/main.c    ****   /* ---------------*/
 657:Src/main.c    ****   /* HRTIM start-up */
 658:Src/main.c    ****   /* ---------------*/
ARM GAS  /tmp/ccZ0eTf3.s 			page 13


 659:Src/main.c    ****   /* Enable HRTIM's outputs TA1 and TA2 */
 660:Src/main.c    ****   /* Note: it is necessary to enable also GPIOs to have outputs functional */
 661:Src/main.c    ****   /* This must be done after HRTIM initialization */
 662:Src/main.c    ****   HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 663:Src/main.c    **** 
 664:Src/main.c    ****   /* Start HRTIM's TIMER A */
 665:Src/main.c    ****   HAL_HRTIM_WaveformCounterStart_IT(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 666:Src/main.c    ****   HAL_HRTIM_MspPostInit(&hhrtim1);
 667:Src/main.c    **** }
 668:Src/main.c    **** 
 669:Src/main.c    **** 
 670:Src/main.c    **** /* TIM2 init function */
 671:Src/main.c    **** static void MX_TIM2_Init(void)
 672:Src/main.c    **** {
 673:Src/main.c    **** 
 674:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 675:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 676:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC;
 677:Src/main.c    **** 
 678:Src/main.c    ****   __HAL_RCC_TIM2_CLK_ENABLE();
 679:Src/main.c    **** 
 680:Src/main.c    ****   htim2.Instance = TIM2;
 681:Src/main.c    ****   htim2.Init.Prescaler = 0;
 682:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 683:Src/main.c    ****   htim2.Init.Period = 0xFFFF;
 684:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 685:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 686:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 687:Src/main.c    ****   {
 688:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 689:Src/main.c    ****   }
 690:Src/main.c    **** 
 691:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 692:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 693:Src/main.c    ****   {
 694:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 695:Src/main.c    ****   }
 696:Src/main.c    **** 
 697:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 698:Src/main.c    ****   {
 699:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 700:Src/main.c    ****   }
 701:Src/main.c    **** 
 702:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 703:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 704:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 705:Src/main.c    ****   {
 706:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 707:Src/main.c    ****   }
 708:Src/main.c    **** 
 709:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 710:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 711:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 712:Src/main.c    ****   sConfigIC.ICFilter = 0;
 713:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 714:Src/main.c    ****   {
 715:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /tmp/ccZ0eTf3.s 			page 14


 716:Src/main.c    ****   }
 717:Src/main.c    **** 
 718:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 719:Src/main.c    ****   {
 720:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 721:Src/main.c    ****   }
 722:Src/main.c    **** 
 723:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 724:Src/main.c    ****   {
 725:Src/main.c    ****     /* Starting Error */
 726:Src/main.c    ****     Error_Handler();
 727:Src/main.c    ****   }
 728:Src/main.c    **** 
 729:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 730:Src/main.c    ****   {
 731:Src/main.c    ****     /* Starting Error */
 732:Src/main.c    ****     Error_Handler();
 733:Src/main.c    ****   }
 734:Src/main.c    **** 
 735:Src/main.c    ****   HAL_TIM_Base_Start(&htim2);
 736:Src/main.c    **** }
 737:Src/main.c    **** 
 738:Src/main.c    **** /* TIM3 init function */
 739:Src/main.c    **** static void MX_TIM3_Init(void)
 740:Src/main.c    **** {
 741:Src/main.c    **** 
 742:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 743:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 744:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 745:Src/main.c    **** 
 746:Src/main.c    ****   htim3.Instance = TIM3;
 747:Src/main.c    ****   htim3.Init.Prescaler = 16;
 748:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 749:Src/main.c    ****   htim3.Init.Period = 255;
 750:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 751:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 752:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 753:Src/main.c    ****   {
 754:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 755:Src/main.c    ****   }
 756:Src/main.c    **** 
 757:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 758:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 759:Src/main.c    ****   {
 760:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 761:Src/main.c    ****   }
 762:Src/main.c    **** 
 763:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 764:Src/main.c    ****   {
 765:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 766:Src/main.c    ****   }
 767:Src/main.c    **** 
 768:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 769:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 770:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 771:Src/main.c    ****   {
 772:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /tmp/ccZ0eTf3.s 			page 15


 773:Src/main.c    ****   }
 774:Src/main.c    **** 
 775:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 776:Src/main.c    ****   sConfigOC.Pulse = 0;
 777:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 778:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 779:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 780:Src/main.c    ****   {
 781:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 782:Src/main.c    ****   }
 783:Src/main.c    **** 
 784:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 785:Src/main.c    **** 
 786:Src/main.c    **** }
 787:Src/main.c    **** 
 788:Src/main.c    **** /* USART1 init function */
 789:Src/main.c    **** static void MX_USART1_UART_Init(void)
 790:Src/main.c    **** {
 791:Src/main.c    **** 
 792:Src/main.c    ****   huart1.Instance = USART1;
 793:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 794:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 795:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 796:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 797:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 798:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 799:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 803:Src/main.c    ****   {
 804:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 805:Src/main.c    ****   }
 806:Src/main.c    **** 
 807:Src/main.c    **** }
 808:Src/main.c    **** 
 809:Src/main.c    **** /* USART3 init function */
 810:Src/main.c    **** static void MX_USART3_UART_Init(void)
 811:Src/main.c    **** {
 812:Src/main.c    **** 
 813:Src/main.c    ****   huart3.Instance = USART3;
 814:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 815:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 816:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 817:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 818:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 819:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 820:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 821:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 822:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 823:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 824:Src/main.c    ****   {
 825:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 826:Src/main.c    ****   }
 827:Src/main.c    **** 
 828:Src/main.c    **** }
 829:Src/main.c    **** 
ARM GAS  /tmp/ccZ0eTf3.s 			page 16


 830:Src/main.c    **** /**
 831:Src/main.c    ****   * Enable DMA controller clock
 832:Src/main.c    ****   */
 833:Src/main.c    **** static void MX_DMA_Init(void)
 834:Src/main.c    **** {
 835:Src/main.c    ****   /* DMA controller clock enable */
 836:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 837:Src/main.c    **** 
 838:Src/main.c    ****   /* DMA interrupt init */
 839:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 840:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 841:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 842:Src/main.c    ****   /* DMA1_Channel2_IRQn interrupt configuration */
 843:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 844:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 845:Src/main.c    ****   /* DMA1_Channel4_IRQn interrupt configuration */
 846:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 847:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 848:Src/main.c    ****   /* DMA1_Channel5_IRQn interrupt configuration */
 849:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 850:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 851:Src/main.c    **** 
 852:Src/main.c    **** }
 853:Src/main.c    **** 
 854:Src/main.c    **** /** Configure pins as
 855:Src/main.c    ****         * Analog
 856:Src/main.c    ****         * Input
 857:Src/main.c    ****         * Output
 858:Src/main.c    ****         * EVENT_OUT
 859:Src/main.c    ****         * EXTI
 860:Src/main.c    ****      PA7   ------> SharedAnalog_PA7
 861:Src/main.c    **** */
 862:Src/main.c    **** static void MX_GPIO_Init(void)
 863:Src/main.c    **** {
  28              		.loc 1 863 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41              	.LBB2:
 864:Src/main.c    **** 
 865:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 866:Src/main.c    **** 
 867:Src/main.c    ****   /* GPIO Ports Clock Enable */
 868:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  42              		.loc 1 868 0
  43 0004 214B     		ldr	r3, .L2
  44 0006 5A69     		ldr	r2, [r3, #20]
  45 0008 42F48002 		orr	r2, r2, #4194304
ARM GAS  /tmp/ccZ0eTf3.s 			page 17


  46 000c 5A61     		str	r2, [r3, #20]
  47 000e 5A69     		ldr	r2, [r3, #20]
  48 0010 02F48002 		and	r2, r2, #4194304
  49 0014 0092     		str	r2, [sp]
  50 0016 009A     		ldr	r2, [sp]
  51              	.LBE2:
  52              	.LBB3:
 869:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  53              		.loc 1 869 0
  54 0018 5A69     		ldr	r2, [r3, #20]
  55 001a 42F40032 		orr	r2, r2, #131072
  56 001e 5A61     		str	r2, [r3, #20]
  57 0020 5A69     		ldr	r2, [r3, #20]
  58 0022 02F40032 		and	r2, r2, #131072
  59 0026 0192     		str	r2, [sp, #4]
  60 0028 019A     		ldr	r2, [sp, #4]
  61              	.LBE3:
  62              	.LBB4:
 870:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  63              		.loc 1 870 0
  64 002a 5A69     		ldr	r2, [r3, #20]
  65 002c 42F48022 		orr	r2, r2, #262144
  66 0030 5A61     		str	r2, [r3, #20]
  67 0032 5B69     		ldr	r3, [r3, #20]
  68 0034 03F48023 		and	r3, r3, #262144
  69 0038 0293     		str	r3, [sp, #8]
  70 003a 029B     		ldr	r3, [sp, #8]
  71              	.LBE4:
 871:Src/main.c    **** 
 872:Src/main.c    ****   /*Configure GPIO pin Output Level */
 873:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, LED_READY_Pin|LED_ACT_Pin|LED_FAULT_Pin, GPIO_PIN_RESET);
  72              		.loc 1 873 0
  73 003c 4FF09040 		mov	r0, #1207959552
  74 0040 0B21     		movs	r1, #11
  75 0042 0022     		movs	r2, #0
  76 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  77              	.LVL0:
 874:Src/main.c    **** 
 875:Src/main.c    ****   /*Configure GPIO pins : LED_READY_Pin LED_ACT_Pin LED_FAULT_Pin */
 876:Src/main.c    ****   GPIO_InitStruct.Pin = LED_READY_Pin|LED_ACT_Pin|LED_FAULT_Pin;
  78              		.loc 1 876 0
  79 0048 0B23     		movs	r3, #11
  80 004a 0393     		str	r3, [sp, #12]
 877:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  81              		.loc 1 877 0
  82 004c 0125     		movs	r5, #1
  83 004e 0495     		str	r5, [sp, #16]
 878:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  84              		.loc 1 878 0
  85 0050 0024     		movs	r4, #0
  86 0052 0594     		str	r4, [sp, #20]
 879:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  87              		.loc 1 879 0
  88 0054 0694     		str	r4, [sp, #24]
 880:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  89              		.loc 1 880 0
  90 0056 4FF09040 		mov	r0, #1207959552
ARM GAS  /tmp/ccZ0eTf3.s 			page 18


  91 005a 03A9     		add	r1, sp, #12
  92 005c FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL1:
 881:Src/main.c    **** 
 882:Src/main.c    ****   GPIO_InitStruct.Pin = FAN_Pin;
  94              		.loc 1 882 0
  95 0060 1023     		movs	r3, #16
  96 0062 0393     		str	r3, [sp, #12]
 883:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 883 0
  98 0064 0495     		str	r5, [sp, #16]
 884:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  99              		.loc 1 884 0
 100 0066 0594     		str	r4, [sp, #20]
 885:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 101              		.loc 1 885 0
 102 0068 0694     		str	r4, [sp, #24]
 886:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 103              		.loc 1 886 0
 104 006a 0948     		ldr	r0, .L2+4
 105 006c 03A9     		add	r1, sp, #12
 106 006e FFF7FEFF 		bl	HAL_GPIO_Init
 107              	.LVL2:
 887:Src/main.c    **** 
 888:Src/main.c    ****   /*Configure GPIO pin : PA7 */
 889:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 108              		.loc 1 889 0
 109 0072 8023     		movs	r3, #128
 110 0074 0393     		str	r3, [sp, #12]
 890:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 111              		.loc 1 890 0
 112 0076 0323     		movs	r3, #3
 113 0078 0493     		str	r3, [sp, #16]
 891:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 114              		.loc 1 891 0
 115 007a 0594     		str	r4, [sp, #20]
 892:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 116              		.loc 1 892 0
 117 007c 4FF09040 		mov	r0, #1207959552
 118 0080 03A9     		add	r1, sp, #12
 119 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 120              	.LVL3:
 893:Src/main.c    **** 
 894:Src/main.c    **** }
 121              		.loc 1 894 0
 122 0086 09B0     		add	sp, sp, #36
 123              		@ sp needed
 124 0088 30BD     		pop	{r4, r5, pc}
 125              	.L3:
 126 008a 00BF     		.align	2
 127              	.L2:
 128 008c 00100240 		.word	1073876992
 129 0090 00040048 		.word	1207960576
 130              		.cfi_endproc
 131              	.LFE140:
 133              		.section	.text.MX_DMA_Init,"ax",%progbits
 134              		.align	2
ARM GAS  /tmp/ccZ0eTf3.s 			page 19


 135              		.thumb
 136              		.thumb_func
 138              	MX_DMA_Init:
 139              	.LFB139:
 834:Src/main.c    **** {
 140              		.loc 1 834 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 8
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144 0000 00B5     		push	{lr}
 145              	.LCFI2:
 146              		.cfi_def_cfa_offset 4
 147              		.cfi_offset 14, -4
 148 0002 83B0     		sub	sp, sp, #12
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 16
 151              	.LBB5:
 836:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 152              		.loc 1 836 0
 153 0004 164B     		ldr	r3, .L5
 154 0006 5A69     		ldr	r2, [r3, #20]
 155 0008 42F00102 		orr	r2, r2, #1
 156 000c 5A61     		str	r2, [r3, #20]
 157 000e 5B69     		ldr	r3, [r3, #20]
 158 0010 03F00103 		and	r3, r3, #1
 159 0014 0193     		str	r3, [sp, #4]
 160 0016 019B     		ldr	r3, [sp, #4]
 161              	.LBE5:
 840:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 162              		.loc 1 840 0
 163 0018 0B20     		movs	r0, #11
 164 001a 0021     		movs	r1, #0
 165 001c 0A46     		mov	r2, r1
 166 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 167              	.LVL4:
 841:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 168              		.loc 1 841 0
 169 0022 0B20     		movs	r0, #11
 170 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 171              	.LVL5:
 843:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 172              		.loc 1 843 0
 173 0028 0C20     		movs	r0, #12
 174 002a 0021     		movs	r1, #0
 175 002c 0A46     		mov	r2, r1
 176 002e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL6:
 844:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 178              		.loc 1 844 0
 179 0032 0C20     		movs	r0, #12
 180 0034 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL7:
 846:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 182              		.loc 1 846 0
 183 0038 0E20     		movs	r0, #14
 184 003a 0021     		movs	r1, #0
 185 003c 0A46     		mov	r2, r1
ARM GAS  /tmp/ccZ0eTf3.s 			page 20


 186 003e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 187              	.LVL8:
 847:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 188              		.loc 1 847 0
 189 0042 0E20     		movs	r0, #14
 190 0044 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 191              	.LVL9:
 849:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 192              		.loc 1 849 0
 193 0048 0F20     		movs	r0, #15
 194 004a 0021     		movs	r1, #0
 195 004c 0A46     		mov	r2, r1
 196 004e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 197              	.LVL10:
 850:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 198              		.loc 1 850 0
 199 0052 0F20     		movs	r0, #15
 200 0054 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 201              	.LVL11:
 852:Src/main.c    **** }
 202              		.loc 1 852 0
 203 0058 03B0     		add	sp, sp, #12
 204              		@ sp needed
 205 005a 5DF804FB 		ldr	pc, [sp], #4
 206              	.L6:
 207 005e 00BF     		.align	2
 208              	.L5:
 209 0060 00100240 		.word	1073876992
 210              		.cfi_endproc
 211              	.LFE139:
 213              		.section	.text.ADC1_Config,"ax",%progbits
 214              		.align	2
 215              		.thumb
 216              		.thumb_func
 218              	ADC1_Config:
 219              	.LFB127:
 272:Src/main.c    **** {
 220              		.loc 1 272 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 64
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 20
 227              		.cfi_offset 4, -20
 228              		.cfi_offset 5, -16
 229              		.cfi_offset 6, -12
 230              		.cfi_offset 7, -8
 231              		.cfi_offset 14, -4
 232 0002 91B0     		sub	sp, sp, #68
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 88
 276:Src/main.c    ****   hadc1.Instance = ADC1;
 235              		.loc 1 276 0
 236 0004 274C     		ldr	r4, .L8
 237 0006 4FF0A043 		mov	r3, #1342177280
 238 000a 2360     		str	r3, [r4]
ARM GAS  /tmp/ccZ0eTf3.s 			page 21


 279:Src/main.c    ****   MultiModeConfig.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 239              		.loc 1 279 0
 240 000c 0025     		movs	r5, #0
 241 000e 0E95     		str	r5, [sp, #56]
 280:Src/main.c    ****   MultiModeConfig.Mode = ADC_MODE_INDEPENDENT;
 242              		.loc 1 280 0
 243 0010 0D95     		str	r5, [sp, #52]
 281:Src/main.c    ****   MultiModeConfig.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 244              		.loc 1 281 0
 245 0012 0F95     		str	r5, [sp, #60]
 282:Src/main.c    ****   HAL_ADCEx_MultiModeConfigChannel(&hadc1, &MultiModeConfig);
 246              		.loc 1 282 0
 247 0014 2046     		mov	r0, r4
 248 0016 0DA9     		add	r1, sp, #52
 249 0018 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 250              	.LVL12:
 286:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 251              		.loc 1 286 0
 252 001c 6560     		str	r5, [r4, #4]
 287:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 253              		.loc 1 287 0
 254 001e A560     		str	r5, [r4, #8]
 288:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 255              		.loc 1 288 0
 256 0020 E560     		str	r5, [r4, #12]
 289:Src/main.c    ****   hadc1.Init.ScanConvMode = ENABLE;
 257              		.loc 1 289 0
 258 0022 0126     		movs	r6, #1
 259 0024 2661     		str	r6, [r4, #16]
 290:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 260              		.loc 1 290 0
 261 0026 0427     		movs	r7, #4
 262 0028 6761     		str	r7, [r4, #20]
 291:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 263              		.loc 1 291 0
 264 002a A561     		str	r5, [r4, #24]
 292:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 265              		.loc 1 292 0
 266 002c E561     		str	r5, [r4, #28]
 293:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 267              		.loc 1 293 0
 268 002e 2662     		str	r6, [r4, #32]
 294:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 269              		.loc 1 294 0
 270 0030 6562     		str	r5, [r4, #36]
 295:Src/main.c    ****   hadc1.Init.NbrOfDiscConversion = 1;
 271              		.loc 1 295 0
 272 0032 A662     		str	r6, [r4, #40]
 296:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 273              		.loc 1 296 0
 274 0034 E662     		str	r6, [r4, #44]
 297:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 275              		.loc 1 297 0
 276 0036 2563     		str	r5, [r4, #48]
 298:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 277              		.loc 1 298 0
 278 0038 6563     		str	r5, [r4, #52]
ARM GAS  /tmp/ccZ0eTf3.s 			page 22


 299:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 279              		.loc 1 299 0
 280 003a A563     		str	r5, [r4, #56]
 300:Src/main.c    ****   HAL_ADC_Init(&hadc1);
 281              		.loc 1 300 0
 282 003c 2046     		mov	r0, r4
 283 003e FFF7FEFF 		bl	HAL_ADC_Init
 284              	.LVL13:
 303:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_11;
 285              		.loc 1 303 0
 286 0042 0B23     		movs	r3, #11
 287 0044 0193     		str	r3, [sp, #4]
 304:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_1;
 288              		.loc 1 304 0
 289 0046 0296     		str	r6, [sp, #8]
 305:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 290              		.loc 1 305 0
 291 0048 0397     		str	r7, [sp, #12]
 306:Src/main.c    ****   InjectionConfig.InjectedSingleDiff = ADC_SINGLE_ENDED;
 292              		.loc 1 306 0
 293 004a 0495     		str	r5, [sp, #16]
 307:Src/main.c    ****   InjectionConfig.InjectedOffsetNumber = ADC_OFFSET_NONE;
 294              		.loc 1 307 0
 295 004c 0595     		str	r5, [sp, #20]
 308:Src/main.c    ****   InjectionConfig.InjectedOffset = 0;
 296              		.loc 1 308 0
 297 004e 0695     		str	r5, [sp, #24]
 309:Src/main.c    ****   InjectionConfig.InjectedNbrOfConversion = 3;
 298              		.loc 1 309 0
 299 0050 0326     		movs	r6, #3
 300 0052 0796     		str	r6, [sp, #28]
 310:Src/main.c    ****   InjectionConfig.InjectedDiscontinuousConvMode = DISABLE;
 301              		.loc 1 310 0
 302 0054 0895     		str	r5, [sp, #32]
 311:Src/main.c    ****   InjectionConfig.AutoInjectedConv = DISABLE;
 303              		.loc 1 311 0
 304 0056 0995     		str	r5, [sp, #36]
 312:Src/main.c    ****   InjectionConfig.QueueInjectedContext = DISABLE;
 305              		.loc 1 312 0
 306 0058 0A95     		str	r5, [sp, #40]
 313:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_HRTIM_TRG2;
 307              		.loc 1 313 0
 308 005a 2423     		movs	r3, #36
 309 005c 0B93     		str	r3, [sp, #44]
 314:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 310              		.loc 1 314 0
 311 005e 4023     		movs	r3, #64
 312 0060 0C93     		str	r3, [sp, #48]
 315:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc1, &InjectionConfig);
 313              		.loc 1 315 0
 314 0062 2046     		mov	r0, r4
 315 0064 0DEB0701 		add	r1, sp, r7
 316 0068 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 317              	.LVL14:
 318:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_12;
 318              		.loc 1 318 0
 319 006c 0C23     		movs	r3, #12
ARM GAS  /tmp/ccZ0eTf3.s 			page 23


 320 006e 0193     		str	r3, [sp, #4]
 319:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_2;
 321              		.loc 1 319 0
 322 0070 0223     		movs	r3, #2
 323 0072 0293     		str	r3, [sp, #8]
 320:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 324              		.loc 1 320 0
 325 0074 0397     		str	r7, [sp, #12]
 321:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc1, &InjectionConfig);
 326              		.loc 1 321 0
 327 0076 2046     		mov	r0, r4
 328 0078 0DEB0701 		add	r1, sp, r7
 329 007c FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 330              	.LVL15:
 323:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_13;
 331              		.loc 1 323 0
 332 0080 0D23     		movs	r3, #13
 333 0082 0193     		str	r3, [sp, #4]
 324:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_3;
 334              		.loc 1 324 0
 335 0084 0296     		str	r6, [sp, #8]
 325:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 336              		.loc 1 325 0
 337 0086 0397     		str	r7, [sp, #12]
 326:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc1, &InjectionConfig);
 338              		.loc 1 326 0
 339 0088 2046     		mov	r0, r4
 340 008a 0DEB0701 		add	r1, sp, r7
 341 008e FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 342              	.LVL16:
 329:Src/main.c    ****   HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 343              		.loc 1 329 0
 344 0092 2046     		mov	r0, r4
 345 0094 2946     		mov	r1, r5
 346 0096 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 347              	.LVL17:
 332:Src/main.c    ****   HAL_ADCEx_InjectedStart(&hadc1);
 348              		.loc 1 332 0
 349 009a 2046     		mov	r0, r4
 350 009c FFF7FEFF 		bl	HAL_ADCEx_InjectedStart
 351              	.LVL18:
 334:Src/main.c    **** }
 352              		.loc 1 334 0
 353 00a0 11B0     		add	sp, sp, #68
 354              		@ sp needed
 355 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 356              	.L9:
 357              		.align	2
 358              	.L8:
 359 00a4 00000000 		.word	hadc1
 360              		.cfi_endproc
 361              	.LFE127:
 363              		.section	.text.ADC2_Config,"ax",%progbits
 364              		.align	2
 365              		.thumb
 366              		.thumb_func
 368              	ADC2_Config:
ARM GAS  /tmp/ccZ0eTf3.s 			page 24


 369              	.LFB128:
 337:Src/main.c    **** {
 370              		.loc 1 337 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 64
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 375              	.LCFI6:
 376              		.cfi_def_cfa_offset 20
 377              		.cfi_offset 4, -20
 378              		.cfi_offset 5, -16
 379              		.cfi_offset 6, -12
 380              		.cfi_offset 7, -8
 381              		.cfi_offset 14, -4
 382 0002 91B0     		sub	sp, sp, #68
 383              	.LCFI7:
 384              		.cfi_def_cfa_offset 88
 341:Src/main.c    ****   hadc2.Instance = ADC2;
 385              		.loc 1 341 0
 386 0004 274C     		ldr	r4, .L11
 387 0006 284B     		ldr	r3, .L11+4
 388 0008 2360     		str	r3, [r4]
 344:Src/main.c    ****   MultiModeConfig.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 389              		.loc 1 344 0
 390 000a 0025     		movs	r5, #0
 391 000c 0E95     		str	r5, [sp, #56]
 345:Src/main.c    ****   MultiModeConfig.Mode = ADC_MODE_INDEPENDENT;
 392              		.loc 1 345 0
 393 000e 0D95     		str	r5, [sp, #52]
 346:Src/main.c    ****   MultiModeConfig.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 394              		.loc 1 346 0
 395 0010 0F95     		str	r5, [sp, #60]
 347:Src/main.c    ****   HAL_ADCEx_MultiModeConfigChannel(&hadc2, &MultiModeConfig);
 396              		.loc 1 347 0
 397 0012 2046     		mov	r0, r4
 398 0014 0DA9     		add	r1, sp, #52
 399 0016 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 400              	.LVL19:
 351:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 401              		.loc 1 351 0
 402 001a 6560     		str	r5, [r4, #4]
 352:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 403              		.loc 1 352 0
 404 001c A560     		str	r5, [r4, #8]
 353:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 405              		.loc 1 353 0
 406 001e E560     		str	r5, [r4, #12]
 354:Src/main.c    ****   hadc2.Init.ScanConvMode = ENABLE;
 407              		.loc 1 354 0
 408 0020 0126     		movs	r6, #1
 409 0022 2661     		str	r6, [r4, #16]
 355:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 410              		.loc 1 355 0
 411 0024 0427     		movs	r7, #4
 412 0026 6761     		str	r7, [r4, #20]
 356:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 413              		.loc 1 356 0
ARM GAS  /tmp/ccZ0eTf3.s 			page 25


 414 0028 A561     		str	r5, [r4, #24]
 357:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 415              		.loc 1 357 0
 416 002a E561     		str	r5, [r4, #28]
 358:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 417              		.loc 1 358 0
 418 002c 2662     		str	r6, [r4, #32]
 359:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 419              		.loc 1 359 0
 420 002e 6562     		str	r5, [r4, #36]
 360:Src/main.c    ****   hadc2.Init.NbrOfDiscConversion = 1;
 421              		.loc 1 360 0
 422 0030 A662     		str	r6, [r4, #40]
 361:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 423              		.loc 1 361 0
 424 0032 E662     		str	r6, [r4, #44]
 362:Src/main.c    ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 425              		.loc 1 362 0
 426 0034 2563     		str	r5, [r4, #48]
 363:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 427              		.loc 1 363 0
 428 0036 6563     		str	r5, [r4, #52]
 364:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 429              		.loc 1 364 0
 430 0038 A563     		str	r5, [r4, #56]
 365:Src/main.c    ****   HAL_ADC_Init(&hadc2);
 431              		.loc 1 365 0
 432 003a 2046     		mov	r0, r4
 433 003c FFF7FEFF 		bl	HAL_ADC_Init
 434              	.LVL20:
 368:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_13;
 435              		.loc 1 368 0
 436 0040 0D23     		movs	r3, #13
 437 0042 0193     		str	r3, [sp, #4]
 369:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_1;
 438              		.loc 1 369 0
 439 0044 0296     		str	r6, [sp, #8]
 370:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 440              		.loc 1 370 0
 441 0046 0397     		str	r7, [sp, #12]
 371:Src/main.c    ****   InjectionConfig.InjectedSingleDiff = ADC_SINGLE_ENDED;
 442              		.loc 1 371 0
 443 0048 0495     		str	r5, [sp, #16]
 372:Src/main.c    ****   InjectionConfig.InjectedOffsetNumber = ADC_OFFSET_NONE;
 444              		.loc 1 372 0
 445 004a 0595     		str	r5, [sp, #20]
 373:Src/main.c    ****   InjectionConfig.InjectedOffset = 0;
 446              		.loc 1 373 0
 447 004c 0695     		str	r5, [sp, #24]
 374:Src/main.c    ****   InjectionConfig.InjectedNbrOfConversion = 3;
 448              		.loc 1 374 0
 449 004e 0326     		movs	r6, #3
 450 0050 0796     		str	r6, [sp, #28]
 375:Src/main.c    ****   InjectionConfig.InjectedDiscontinuousConvMode = DISABLE;
 451              		.loc 1 375 0
 452 0052 0895     		str	r5, [sp, #32]
 376:Src/main.c    ****   InjectionConfig.AutoInjectedConv = DISABLE;
ARM GAS  /tmp/ccZ0eTf3.s 			page 26


 453              		.loc 1 376 0
 454 0054 0995     		str	r5, [sp, #36]
 377:Src/main.c    ****   InjectionConfig.QueueInjectedContext = DISABLE;
 455              		.loc 1 377 0
 456 0056 0A95     		str	r5, [sp, #40]
 378:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_HRTIM_TRG2;
 457              		.loc 1 378 0
 458 0058 2423     		movs	r3, #36
 459 005a 0B93     		str	r3, [sp, #44]
 379:Src/main.c    ****   InjectionConfig.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 460              		.loc 1 379 0
 461 005c 4023     		movs	r3, #64
 462 005e 0C93     		str	r3, [sp, #48]
 380:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc2, &InjectionConfig);
 463              		.loc 1 380 0
 464 0060 2046     		mov	r0, r4
 465 0062 0DEB0701 		add	r1, sp, r7
 466 0066 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 467              	.LVL21:
 383:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_14;
 468              		.loc 1 383 0
 469 006a 0E23     		movs	r3, #14
 470 006c 0193     		str	r3, [sp, #4]
 384:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_2;
 471              		.loc 1 384 0
 472 006e 0223     		movs	r3, #2
 473 0070 0293     		str	r3, [sp, #8]
 385:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 474              		.loc 1 385 0
 475 0072 0397     		str	r7, [sp, #12]
 386:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc2, &InjectionConfig);
 476              		.loc 1 386 0
 477 0074 2046     		mov	r0, r4
 478 0076 0DEB0701 		add	r1, sp, r7
 479 007a FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 480              	.LVL22:
 388:Src/main.c    ****   InjectionConfig.InjectedChannel = ADC_CHANNEL_15;
 481              		.loc 1 388 0
 482 007e 0F23     		movs	r3, #15
 483 0080 0193     		str	r3, [sp, #4]
 389:Src/main.c    ****   InjectionConfig.InjectedRank = ADC_INJECTED_RANK_3;
 484              		.loc 1 389 0
 485 0082 0296     		str	r6, [sp, #8]
 390:Src/main.c    ****   InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 486              		.loc 1 390 0
 487 0084 0397     		str	r7, [sp, #12]
 391:Src/main.c    ****   HAL_ADCEx_InjectedConfigChannel(&hadc2, &InjectionConfig);
 488              		.loc 1 391 0
 489 0086 2046     		mov	r0, r4
 490 0088 0DEB0701 		add	r1, sp, r7
 491 008c FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 492              	.LVL23:
 394:Src/main.c    ****   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 493              		.loc 1 394 0
 494 0090 2046     		mov	r0, r4
 495 0092 2946     		mov	r1, r5
 496 0094 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
ARM GAS  /tmp/ccZ0eTf3.s 			page 27


 497              	.LVL24:
 397:Src/main.c    ****   HAL_ADCEx_InjectedStart(&hadc2);
 498              		.loc 1 397 0
 499 0098 2046     		mov	r0, r4
 500 009a FFF7FEFF 		bl	HAL_ADCEx_InjectedStart
 501              	.LVL25:
 399:Src/main.c    **** }
 502              		.loc 1 399 0
 503 009e 11B0     		add	sp, sp, #68
 504              		@ sp needed
 505 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 506              	.L12:
 507 00a2 00BF     		.align	2
 508              	.L11:
 509 00a4 00000000 		.word	hadc2
 510 00a8 00010050 		.word	1342177536
 511              		.cfi_endproc
 512              	.LFE128:
 514              		.section	.text.HRTIM_Config,"ax",%progbits
 515              		.align	2
 516              		.thumb
 517              		.thumb_func
 519              	HRTIM_Config:
 520              	.LFB134:
 519:Src/main.c    **** {
 521              		.loc 1 519 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 192
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 526              	.LCFI8:
 527              		.cfi_def_cfa_offset 20
 528              		.cfi_offset 4, -20
 529              		.cfi_offset 5, -16
 530              		.cfi_offset 6, -12
 531              		.cfi_offset 7, -8
 532              		.cfi_offset 14, -4
 533 0002 B1B0     		sub	sp, sp, #196
 534              	.LCFI9:
 535              		.cfi_def_cfa_offset 216
 532:Src/main.c    ****   hhrtim1.Instance = HRTIM1;
 536              		.loc 1 532 0
 537 0004 484D     		ldr	r5, .L14
 538 0006 494B     		ldr	r3, .L14+4
 539 0008 2B60     		str	r3, [r5]
 533:Src/main.c    ****   hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 540              		.loc 1 533 0
 541 000a 0024     		movs	r4, #0
 542 000c 6C60     		str	r4, [r5, #4]
 534:Src/main.c    ****   hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 543              		.loc 1 534 0
 544 000e AC60     		str	r4, [r5, #8]
 537:Src/main.c    ****   HAL_HRTIM_Init(&hhrtim1);
 545              		.loc 1 537 0
 546 0010 2846     		mov	r0, r5
 547 0012 FFF7FEFF 		bl	HAL_HRTIM_Init
 548              	.LVL26:
ARM GAS  /tmp/ccZ0eTf3.s 			page 28


 550:Src/main.c    ****   timebase_config.Period = BUCK_PWM_PERIOD; /* 280kHz switching frequency */
 549              		.loc 1 550 0
 550 0016 4FF48053 		mov	r3, #4096
 551 001a 2C93     		str	r3, [sp, #176]
 551:Src/main.c    ****   timebase_config.RepetitionCounter = 63; /* 1 ISR every 128 PWM periods */
 552              		.loc 1 551 0
 553 001c 3F23     		movs	r3, #63
 554 001e 2D93     		str	r3, [sp, #180]
 552:Src/main.c    ****   timebase_config.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 555              		.loc 1 552 0
 556 0020 2E94     		str	r4, [sp, #184]
 553:Src/main.c    ****   timebase_config.Mode = HRTIM_MODE_CONTINUOUS;
 557              		.loc 1 553 0
 558 0022 0826     		movs	r6, #8
 559 0024 2F96     		str	r6, [sp, #188]
 554:Src/main.c    ****   HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &timebase_config);
 560              		.loc 1 554 0
 561 0026 2846     		mov	r0, r5
 562 0028 2146     		mov	r1, r4
 563 002a 2CAA     		add	r2, sp, #176
 564 002c FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 565              	.LVL27:
 561:Src/main.c    ****   timer_config.DMARequests = HRTIM_TIM_DMA_NONE;
 566              		.loc 1 561 0
 567 0030 1894     		str	r4, [sp, #96]
 562:Src/main.c    ****   timer_config.DMASrcAddress = 0x0;
 568              		.loc 1 562 0
 569 0032 1994     		str	r4, [sp, #100]
 563:Src/main.c    ****   timer_config.DMADstAddress = 0x0;
 570              		.loc 1 563 0
 571 0034 1A94     		str	r4, [sp, #104]
 564:Src/main.c    ****   timer_config.DMASize = 0x0;
 572              		.loc 1 564 0
 573 0036 1B94     		str	r4, [sp, #108]
 565:Src/main.c    ****   timer_config.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 574              		.loc 1 565 0
 575 0038 1C94     		str	r4, [sp, #112]
 566:Src/main.c    ****   timer_config.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 576              		.loc 1 566 0
 577 003a 1D94     		str	r4, [sp, #116]
 567:Src/main.c    ****   timer_config.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 578              		.loc 1 567 0
 579 003c 1E94     		str	r4, [sp, #120]
 568:Src/main.c    ****   timer_config.DACSynchro = HRTIM_DACSYNC_NONE;
 580              		.loc 1 568 0
 581 003e 1F94     		str	r4, [sp, #124]
 569:Src/main.c    ****   timer_config.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 582              		.loc 1 569 0
 583 0040 4FF00063 		mov	r3, #134217728
 584 0044 2093     		str	r3, [sp, #128]
 570:Src/main.c    ****   timer_config.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 585              		.loc 1 570 0
 586 0046 2194     		str	r4, [sp, #132]
 571:Src/main.c    ****   timer_config.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 587              		.loc 1 571 0
 588 0048 2294     		str	r4, [sp, #136]
 572:Src/main.c    ****   timer_config.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
ARM GAS  /tmp/ccZ0eTf3.s 			page 29


 589              		.loc 1 572 0
 590 004a 4FF00053 		mov	r3, #536870912
 591 004e 2393     		str	r3, [sp, #140]
 573:Src/main.c    ****   timer_config.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 592              		.loc 1 573 0
 593 0050 2B94     		str	r4, [sp, #172]
 574:Src/main.c    ****   timer_config.InterruptRequests = HRTIM_TIM_IT_REP;
 594              		.loc 1 574 0
 595 0052 1023     		movs	r3, #16
 596 0054 1793     		str	r3, [sp, #92]
 575:Src/main.c    ****   timer_config.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 597              		.loc 1 575 0
 598 0056 2494     		str	r4, [sp, #144]
 576:Src/main.c    ****   timer_config.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1;
 599              		.loc 1 576 0
 600 0058 0127     		movs	r7, #1
 601 005a 2597     		str	r7, [sp, #148]
 577:Src/main.c    ****   timer_config.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 602              		.loc 1 577 0
 603 005c 2694     		str	r4, [sp, #152]
 578:Src/main.c    ****   timer_config.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 604              		.loc 1 578 0
 605 005e 4FF48073 		mov	r3, #256
 606 0062 2793     		str	r3, [sp, #156]
 579:Src/main.c    ****   timer_config.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 607              		.loc 1 579 0
 608 0064 2894     		str	r4, [sp, #160]
 580:Src/main.c    ****   timer_config.UpdateTrigger= HRTIM_TIMUPDATETRIGGER_NONE;
 609              		.loc 1 580 0
 610 0066 2994     		str	r4, [sp, #164]
 581:Src/main.c    ****   timer_config.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 611              		.loc 1 581 0
 612 0068 2A94     		str	r4, [sp, #168]
 582:Src/main.c    ****   HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &timer_config);
 613              		.loc 1 582 0
 614 006a 2846     		mov	r0, r5
 615 006c 2146     		mov	r1, r4
 616 006e 17AA     		add	r2, sp, #92
 617 0070 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 618              	.LVL28:
 587:Src/main.c    ****   output_config_TA1_TA2.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 619              		.loc 1 587 0
 620 0074 0F94     		str	r4, [sp, #60]
 588:Src/main.c    ****   output_config_TA1_TA2.SetSource = HRTIM_OUTPUTSET_TIMPER;
 621              		.loc 1 588 0
 622 0076 0423     		movs	r3, #4
 623 0078 1093     		str	r3, [sp, #64]
 589:Src/main.c    ****   output_config_TA1_TA2.ResetSource  = HRTIM_OUTPUTRESET_TIMCMP1;
 624              		.loc 1 589 0
 625 007a 1196     		str	r6, [sp, #68]
 590:Src/main.c    ****   output_config_TA1_TA2.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 626              		.loc 1 590 0
 627 007c 1294     		str	r4, [sp, #72]
 591:Src/main.c    ****   output_config_TA1_TA2.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 628              		.loc 1 591 0
 629 007e 1394     		str	r4, [sp, #76]
 592:Src/main.c    ****   output_config_TA1_TA2.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
ARM GAS  /tmp/ccZ0eTf3.s 			page 30


 630              		.loc 1 592 0
 631 0080 2023     		movs	r3, #32
 632 0082 1493     		str	r3, [sp, #80]
 593:Src/main.c    ****   output_config_TA1_TA2.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 633              		.loc 1 593 0
 634 0084 1594     		str	r4, [sp, #84]
 594:Src/main.c    ****   output_config_TA1_TA2.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 635              		.loc 1 594 0
 636 0086 1694     		str	r4, [sp, #88]
 595:Src/main.c    ****   HAL_HRTIM_WaveformOutputConfig(&hhrtim1,
 637              		.loc 1 595 0
 638 0088 2846     		mov	r0, r5
 639 008a 2146     		mov	r1, r4
 640 008c 3A46     		mov	r2, r7
 641 008e 0FAB     		add	r3, sp, #60
 642 0090 FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 643              	.LVL29:
 600:Src/main.c    ****   HAL_HRTIM_WaveformOutputConfig(&hhrtim1,
 644              		.loc 1 600 0
 645 0094 2846     		mov	r0, r5
 646 0096 2146     		mov	r1, r4
 647 0098 0222     		movs	r2, #2
 648 009a 0FAB     		add	r3, sp, #60
 649 009c FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 650              	.LVL30:
 606:Src/main.c    ****   compare_config.CompareValue = BUCK_PWM_PERIOD - 1;
 651              		.loc 1 606 0
 652 00a0 30AE     		add	r6, sp, #192
 653 00a2 40F6FF73 		movw	r3, #4095
 654 00a6 46F8903D 		str	r3, [r6, #-144]!
 607:Src/main.c    ****   HAL_HRTIM_WaveformCompareConfig(&hhrtim1,
 655              		.loc 1 607 0
 656 00aa 2846     		mov	r0, r5
 657 00ac 2146     		mov	r1, r4
 658 00ae 3A46     		mov	r2, r7
 659 00b0 3346     		mov	r3, r6
 660 00b2 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 661              	.LVL31:
 612:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 662              		.loc 1 612 0
 663 00b6 0A94     		str	r4, [sp, #40]
 613:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 664              		.loc 1 613 0
 665 00b8 0994     		str	r4, [sp, #36]
 614:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 666              		.loc 1 614 0
 667 00ba 4FF08043 		mov	r3, #1073741824
 668 00be 0B93     		str	r3, [sp, #44]
 615:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.FallingValue = DT_FALLING;
 669              		.loc 1 615 0
 670 00c0 2823     		movs	r3, #40
 671 00c2 0893     		str	r3, [sp, #32]
 616:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 672              		.loc 1 616 0
 673 00c4 0394     		str	r4, [sp, #12]
 617:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 674              		.loc 1 617 0
ARM GAS  /tmp/ccZ0eTf3.s 			page 31


 675 00c6 0694     		str	r4, [sp, #24]
 618:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 676              		.loc 1 618 0
 677 00c8 0594     		str	r4, [sp, #20]
 619:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 678              		.loc 1 619 0
 679 00ca 4FF48042 		mov	r2, #16384
 680 00ce 0792     		str	r2, [sp, #28]
 620:Src/main.c    ****   HRTIM_TIM_DeadTimeConfig.RisingValue = DT_RISING;
 681              		.loc 1 620 0
 682 00d0 0493     		str	r3, [sp, #16]
 621:Src/main.c    ****   HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &HRTIM_TIM_DeadTimeConfig);
 683              		.loc 1 621 0
 684 00d2 2846     		mov	r0, r5
 685 00d4 2146     		mov	r1, r4
 686 00d6 03AA     		add	r2, sp, #12
 687 00d8 FFF7FEFF 		bl	HAL_HRTIM_DeadTimeConfig
 688              	.LVL32:
 626:Src/main.c    ****   compare_config.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 689              		.loc 1 626 0
 690 00dc 0D94     		str	r4, [sp, #52]
 627:Src/main.c    ****   compare_config.AutoDelayedTimeout = 0;
 691              		.loc 1 627 0
 692 00de 0E94     		str	r4, [sp, #56]
 628:Src/main.c    ****   compare_config.CompareValue = BUCK_PWM_PERIOD/10; /* Samples in middle of ON time */
 693              		.loc 1 628 0
 694 00e0 40F29913 		movw	r3, #409
 695 00e4 0C93     		str	r3, [sp, #48]
 629:Src/main.c    ****   HAL_HRTIM_WaveformCompareConfig(&hhrtim1,
 696              		.loc 1 629 0
 697 00e6 2846     		mov	r0, r5
 698 00e8 2146     		mov	r1, r4
 699 00ea 0222     		movs	r2, #2
 700 00ec 3346     		mov	r3, r6
 701 00ee FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 702              	.LVL33:
 634:Src/main.c    ****   adc_trigger_config.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERA_CMP2;
 703              		.loc 1 634 0
 704 00f2 4FF48063 		mov	r3, #1024
 705 00f6 0293     		str	r3, [sp, #8]
 635:Src/main.c    ****   adc_trigger_config.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 706              		.loc 1 635 0
 707 00f8 30AA     		add	r2, sp, #192
 708 00fa 4FF48033 		mov	r3, #65536
 709 00fe 42F8BC3D 		str	r3, [r2, #-188]!
 636:Src/main.c    ****   HAL_HRTIM_ADCTriggerConfig(&hhrtim1,
 710              		.loc 1 636 0
 711 0102 2846     		mov	r0, r5
 712 0104 0221     		movs	r1, #2
 713 0106 FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 714              	.LVL34:
 662:Src/main.c    ****   HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 715              		.loc 1 662 0
 716 010a 2846     		mov	r0, r5
 717 010c 0321     		movs	r1, #3
 718 010e FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputStart
 719              	.LVL35:
ARM GAS  /tmp/ccZ0eTf3.s 			page 32


 665:Src/main.c    ****   HAL_HRTIM_WaveformCounterStart_IT(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 720              		.loc 1 665 0
 721 0112 2846     		mov	r0, r5
 722 0114 4FF40031 		mov	r1, #131072
 723 0118 FFF7FEFF 		bl	HAL_HRTIM_WaveformCounterStart_IT
 724              	.LVL36:
 666:Src/main.c    ****   HAL_HRTIM_MspPostInit(&hhrtim1);
 725              		.loc 1 666 0
 726 011c 2846     		mov	r0, r5
 727 011e FFF7FEFF 		bl	HAL_HRTIM_MspPostInit
 728              	.LVL37:
 667:Src/main.c    **** }
 729              		.loc 1 667 0
 730 0122 31B0     		add	sp, sp, #196
 731              		@ sp needed
 732 0124 F0BD     		pop	{r4, r5, r6, r7, pc}
 733              	.L15:
 734 0126 00BF     		.align	2
 735              	.L14:
 736 0128 00000000 		.word	hhrtim1
 737 012c 00740140 		.word	1073837056
 738              		.cfi_endproc
 739              	.LFE134:
 741              		.section	.text.DCDC_Reg,"ax",%progbits
 742              		.align	2
 743              		.global	DCDC_Reg
 744              		.thumb
 745              		.thumb_func
 747              	DCDC_Reg:
 748              	.LFB123:
  92:Src/main.c    **** void DCDC_Reg() {
 749              		.loc 1 92 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753 0000 08B5     		push	{r3, lr}
 754              	.LCFI10:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 3, -8
 757              		.cfi_offset 14, -4
  93:Src/main.c    ****   HAL_GPIO_TogglePin(LED_ACT_GPIO_Port, LED_ACT_Pin);
 758              		.loc 1 93 0
 759 0002 4FF09040 		mov	r0, #1207959552
 760 0006 0221     		movs	r1, #2
 761 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 762              	.LVL38:
 763 000c 08BD     		pop	{r3, pc}
 764              		.cfi_endproc
 765              	.LFE123:
 767 000e 00BF     		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 768              		.align	2
 769              		.global	HAL_TIM_IC_CaptureCallback
 770              		.thumb
 771              		.thumb_func
 773              	HAL_TIM_IC_CaptureCallback:
 774              	.LFB125:
 185:Src/main.c    **** {
ARM GAS  /tmp/ccZ0eTf3.s 			page 33


 775              		.loc 1 185 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              	.LVL39:
 780 0000 10B5     		push	{r4, lr}
 781              	.LCFI11:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 4, -8
 784              		.cfi_offset 14, -4
 785 0002 0446     		mov	r4, r0
 186:Src/main.c    ****   if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 786              		.loc 1 186 0
 787 0004 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 788 0006 012B     		cmp	r3, #1
 789 0008 11D1     		bne	.L18
 790              	.LBB6:
 188:Src/main.c    ****     uint16_t curTimer = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 791              		.loc 1 188 0
 792 000a 0021     		movs	r1, #0
 793 000c FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 794              	.LVL40:
 795 0010 80B2     		uxth	r0, r0
 796              	.LVL41:
 189:Src/main.c    ****     if (curTimer < lastTimer) {
 797              		.loc 1 189 0
 798 0012 114B     		ldr	r3, .L23
 799 0014 1B88     		ldrh	r3, [r3]
 800 0016 9842     		cmp	r0, r3
 801 0018 04D2     		bcs	.L19
 190:Src/main.c    ****       periode = curTimer + (0xFFFF - lastTimer);
 802              		.loc 1 190 0
 803 001a C31A     		subs	r3, r0, r3
 804 001c 013B     		subs	r3, r3, #1
 805 001e 0F4A     		ldr	r2, .L23+4
 806 0020 1380     		strh	r3, [r2]	@ movhi
 807 0022 02E0     		b	.L20
 808              	.L19:
 192:Src/main.c    ****       periode = lastTimer - curTimer;
 809              		.loc 1 192 0
 810 0024 1B1A     		subs	r3, r3, r0
 811 0026 0D4A     		ldr	r2, .L23+4
 812 0028 1380     		strh	r3, [r2]	@ movhi
 813              	.L20:
 194:Src/main.c    ****     lastTimer = curTimer;
 814              		.loc 1 194 0
 815 002a 0B4B     		ldr	r3, .L23
 816 002c 1880     		strh	r0, [r3]	@ movhi
 817              	.LVL42:
 818              	.L18:
 819              	.LBE6:
 196:Src/main.c    ****   if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 820              		.loc 1 196 0
 821 002e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 822 0030 082B     		cmp	r3, #8
 823 0032 10D1     		bne	.L17
 824              	.LBB7:
ARM GAS  /tmp/ccZ0eTf3.s 			page 34


 198:Src/main.c    ****     uint16_t curTimer = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 825              		.loc 1 198 0
 826 0034 2046     		mov	r0, r4
 827 0036 0C21     		movs	r1, #12
 828 0038 FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 829              	.LVL43:
 830 003c 80B2     		uxth	r0, r0
 831              	.LVL44:
 199:Src/main.c    ****     if (curTimer < lastTimer) {
 832              		.loc 1 199 0
 833 003e 064B     		ldr	r3, .L23
 834 0040 1B88     		ldrh	r3, [r3]
 835 0042 9842     		cmp	r0, r3
 836 0044 04D2     		bcs	.L22
 200:Src/main.c    ****       phase = curTimer + (0xFFFF - lastTimer);
 837              		.loc 1 200 0
 838 0046 C31A     		subs	r3, r0, r3
 839 0048 013B     		subs	r3, r3, #1
 840 004a 054A     		ldr	r2, .L23+8
 841 004c 1380     		strh	r3, [r2]	@ movhi
 842 004e 10BD     		pop	{r4, pc}
 843              	.LVL45:
 844              	.L22:
 202:Src/main.c    ****       phase = lastTimer - curTimer;
 845              		.loc 1 202 0
 846 0050 181A     		subs	r0, r3, r0
 847              	.LVL46:
 848 0052 034A     		ldr	r2, .L23+8
 849 0054 1080     		strh	r0, [r2]	@ movhi
 850              	.L17:
 851 0056 10BD     		pop	{r4, pc}
 852              	.LVL47:
 853              	.L24:
 854              		.align	2
 855              	.L23:
 856 0058 00000000 		.word	.LANCHOR0
 857 005c 00000000 		.word	.LANCHOR1
 858 0060 00000000 		.word	.LANCHOR2
 859              	.LBE7:
 860              		.cfi_endproc
 861              	.LFE125:
 863              		.section	.text._Error_Handler,"ax",%progbits
 864              		.align	2
 865              		.global	_Error_Handler
 866              		.thumb
 867              		.thumb_func
 869              	_Error_Handler:
 870              	.LFB141:
 895:Src/main.c    **** 
 896:Src/main.c    **** /**
 897:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 898:Src/main.c    ****   * @param  None
 899:Src/main.c    ****   * @retval None
 900:Src/main.c    ****   */
 901:Src/main.c    **** void _Error_Handler(char * file, int line)
 902:Src/main.c    **** {
 871              		.loc 1 902 0
ARM GAS  /tmp/ccZ0eTf3.s 			page 35


 872              		.cfi_startproc
 873              		@ Volatile: function does not return.
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              		@ link register save eliminated.
 877              	.LVL48:
 878              	.L26:
 879 0000 FEE7     		b	.L26
 880              		.cfi_endproc
 881              	.LFE141:
 883 0002 00BF     		.section	.text.MX_TIM2_Init,"ax",%progbits
 884              		.align	2
 885              		.thumb
 886              		.thumb_func
 888              	MX_TIM2_Init:
 889              	.LFB135:
 672:Src/main.c    **** {
 890              		.loc 1 672 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 48
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 672:Src/main.c    **** {
 894              		.loc 1 672 0
 895 0000 00B5     		push	{lr}
 896              	.LCFI12:
 897              		.cfi_def_cfa_offset 4
 898              		.cfi_offset 14, -4
 899 0002 8DB0     		sub	sp, sp, #52
 900              	.LCFI13:
 901              		.cfi_def_cfa_offset 56
 902              	.LBB8:
 678:Src/main.c    ****   __HAL_RCC_TIM2_CLK_ENABLE();
 903              		.loc 1 678 0
 904 0004 3B4B     		ldr	r3, .L36
 905 0006 DA69     		ldr	r2, [r3, #28]
 906 0008 42F00102 		orr	r2, r2, #1
 907 000c DA61     		str	r2, [r3, #28]
 908 000e DB69     		ldr	r3, [r3, #28]
 909 0010 03F00103 		and	r3, r3, #1
 910 0014 0093     		str	r3, [sp]
 911 0016 009B     		ldr	r3, [sp]
 912              	.LBE8:
 680:Src/main.c    ****   htim2.Instance = TIM2;
 913              		.loc 1 680 0
 914 0018 3748     		ldr	r0, .L36+4
 915 001a 4FF08043 		mov	r3, #1073741824
 916 001e 0360     		str	r3, [r0]
 681:Src/main.c    ****   htim2.Init.Prescaler = 0;
 917              		.loc 1 681 0
 918 0020 0023     		movs	r3, #0
 919 0022 4360     		str	r3, [r0, #4]
 682:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 920              		.loc 1 682 0
 921 0024 8360     		str	r3, [r0, #8]
 683:Src/main.c    ****   htim2.Init.Period = 0xFFFF;
 922              		.loc 1 683 0
 923 0026 4FF6FF72 		movw	r2, #65535
ARM GAS  /tmp/ccZ0eTf3.s 			page 36


 924 002a C260     		str	r2, [r0, #12]
 684:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 925              		.loc 1 684 0
 926 002c 0361     		str	r3, [r0, #16]
 685:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 927              		.loc 1 685 0
 928 002e 8361     		str	r3, [r0, #24]
 686:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 929              		.loc 1 686 0
 930 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 931              	.LVL49:
 932 0034 20B1     		cbz	r0, .L28
 688:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 933              		.loc 1 688 0
 934 0036 3148     		ldr	r0, .L36+8
 935 0038 4FF42C71 		mov	r1, #688
 936 003c FFF7FEFF 		bl	_Error_Handler
 937              	.LVL50:
 938              	.L28:
 691:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 939              		.loc 1 691 0
 940 0040 0CA9     		add	r1, sp, #48
 941 0042 4FF48053 		mov	r3, #4096
 942 0046 41F8103D 		str	r3, [r1, #-16]!
 692:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 943              		.loc 1 692 0
 944 004a 2B48     		ldr	r0, .L36+4
 945 004c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 946              	.LVL51:
 947 0050 20B1     		cbz	r0, .L29
 694:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 948              		.loc 1 694 0
 949 0052 2A48     		ldr	r0, .L36+8
 950 0054 40F2B621 		movw	r1, #694
 951 0058 FFF7FEFF 		bl	_Error_Handler
 952              	.LVL52:
 953              	.L29:
 697:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 954              		.loc 1 697 0
 955 005c 2648     		ldr	r0, .L36+4
 956 005e FFF7FEFF 		bl	HAL_TIM_IC_Init
 957              	.LVL53:
 958 0062 20B1     		cbz	r0, .L30
 699:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 959              		.loc 1 699 0
 960 0064 2548     		ldr	r0, .L36+8
 961 0066 40F2BB21 		movw	r1, #699
 962 006a FFF7FEFF 		bl	_Error_Handler
 963              	.LVL54:
 964              	.L30:
 702:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 965              		.loc 1 702 0
 966 006e 0023     		movs	r3, #0
 967 0070 0593     		str	r3, [sp, #20]
 703:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 968              		.loc 1 703 0
 969 0072 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccZ0eTf3.s 			page 37


 704:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 970              		.loc 1 704 0
 971 0074 2048     		ldr	r0, .L36+4
 972 0076 05A9     		add	r1, sp, #20
 973 0078 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 974              	.LVL55:
 975 007c 20B1     		cbz	r0, .L31
 706:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 976              		.loc 1 706 0
 977 007e 1F48     		ldr	r0, .L36+8
 978 0080 40F2C221 		movw	r1, #706
 979 0084 FFF7FEFF 		bl	_Error_Handler
 980              	.LVL56:
 981              	.L31:
 709:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 982              		.loc 1 709 0
 983 0088 0022     		movs	r2, #0
 984 008a 0192     		str	r2, [sp, #4]
 710:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 985              		.loc 1 710 0
 986 008c 0123     		movs	r3, #1
 987 008e 0293     		str	r3, [sp, #8]
 711:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 988              		.loc 1 711 0
 989 0090 0392     		str	r2, [sp, #12]
 712:Src/main.c    ****   sConfigIC.ICFilter = 0;
 990              		.loc 1 712 0
 991 0092 0492     		str	r2, [sp, #16]
 713:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 992              		.loc 1 713 0
 993 0094 1848     		ldr	r0, .L36+4
 994 0096 01A9     		add	r1, sp, #4
 995 0098 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 996              	.LVL57:
 997 009c 20B1     		cbz	r0, .L32
 715:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 998              		.loc 1 715 0
 999 009e 1748     		ldr	r0, .L36+8
 1000 00a0 40F2CB21 		movw	r1, #715
 1001 00a4 FFF7FEFF 		bl	_Error_Handler
 1002              	.LVL58:
 1003              	.L32:
 718:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 1004              		.loc 1 718 0
 1005 00a8 1348     		ldr	r0, .L36+4
 1006 00aa 01A9     		add	r1, sp, #4
 1007 00ac 0C22     		movs	r2, #12
 1008 00ae FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 1009              	.LVL59:
 1010 00b2 20B1     		cbz	r0, .L33
 720:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1011              		.loc 1 720 0
 1012 00b4 1148     		ldr	r0, .L36+8
 1013 00b6 4FF43471 		mov	r1, #720
 1014 00ba FFF7FEFF 		bl	_Error_Handler
 1015              	.LVL60:
 1016              	.L33:
ARM GAS  /tmp/ccZ0eTf3.s 			page 38


 723:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 1017              		.loc 1 723 0
 1018 00be 0E48     		ldr	r0, .L36+4
 1019 00c0 0021     		movs	r1, #0
 1020 00c2 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1021              	.LVL61:
 1022 00c6 20B1     		cbz	r0, .L34
 726:Src/main.c    ****     Error_Handler();
 1023              		.loc 1 726 0
 1024 00c8 0C48     		ldr	r0, .L36+8
 1025 00ca 40F2D621 		movw	r1, #726
 1026 00ce FFF7FEFF 		bl	_Error_Handler
 1027              	.LVL62:
 1028              	.L34:
 729:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 1029              		.loc 1 729 0
 1030 00d2 0948     		ldr	r0, .L36+4
 1031 00d4 0C21     		movs	r1, #12
 1032 00d6 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1033              	.LVL63:
 1034 00da 20B1     		cbz	r0, .L35
 732:Src/main.c    ****     Error_Handler();
 1035              		.loc 1 732 0
 1036 00dc 0748     		ldr	r0, .L36+8
 1037 00de 4FF43771 		mov	r1, #732
 1038 00e2 FFF7FEFF 		bl	_Error_Handler
 1039              	.LVL64:
 1040              	.L35:
 735:Src/main.c    ****   HAL_TIM_Base_Start(&htim2);
 1041              		.loc 1 735 0
 1042 00e6 0448     		ldr	r0, .L36+4
 1043 00e8 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1044              	.LVL65:
 736:Src/main.c    **** }
 1045              		.loc 1 736 0
 1046 00ec 0DB0     		add	sp, sp, #52
 1047              		@ sp needed
 1048 00ee 5DF804FB 		ldr	pc, [sp], #4
 1049              	.L37:
 1050 00f2 00BF     		.align	2
 1051              	.L36:
 1052 00f4 00100240 		.word	1073876992
 1053 00f8 00000000 		.word	htim2
 1054 00fc 00000000 		.word	.LC0
 1055              		.cfi_endproc
 1056              	.LFE135:
 1058              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1059              		.align	2
 1060              		.thumb
 1061              		.thumb_func
 1063              	MX_USART1_UART_Init:
 1064              	.LFB137:
 790:Src/main.c    **** {
 1065              		.loc 1 790 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZ0eTf3.s 			page 39


 1069 0000 08B5     		push	{r3, lr}
 1070              	.LCFI14:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 3, -8
 1073              		.cfi_offset 14, -4
 792:Src/main.c    ****   huart1.Instance = USART1;
 1074              		.loc 1 792 0
 1075 0002 0C48     		ldr	r0, .L40
 1076 0004 0C4B     		ldr	r3, .L40+4
 1077 0006 0360     		str	r3, [r0]
 793:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 1078              		.loc 1 793 0
 1079 0008 4FF4E133 		mov	r3, #115200
 1080 000c 4360     		str	r3, [r0, #4]
 794:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1081              		.loc 1 794 0
 1082 000e 0023     		movs	r3, #0
 1083 0010 8360     		str	r3, [r0, #8]
 795:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1084              		.loc 1 795 0
 1085 0012 C360     		str	r3, [r0, #12]
 796:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1086              		.loc 1 796 0
 1087 0014 0361     		str	r3, [r0, #16]
 797:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1088              		.loc 1 797 0
 1089 0016 0C22     		movs	r2, #12
 1090 0018 4261     		str	r2, [r0, #20]
 798:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1091              		.loc 1 798 0
 1092 001a 8361     		str	r3, [r0, #24]
 799:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1093              		.loc 1 799 0
 1094 001c C361     		str	r3, [r0, #28]
 800:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1095              		.loc 1 800 0
 1096 001e 0362     		str	r3, [r0, #32]
 801:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1097              		.loc 1 801 0
 1098 0020 4362     		str	r3, [r0, #36]
 802:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1099              		.loc 1 802 0
 1100 0022 FFF7FEFF 		bl	HAL_UART_Init
 1101              	.LVL66:
 1102 0026 20B1     		cbz	r0, .L38
 804:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1103              		.loc 1 804 0
 1104 0028 0448     		ldr	r0, .L40+8
 1105 002a 4FF44971 		mov	r1, #804
 1106 002e FFF7FEFF 		bl	_Error_Handler
 1107              	.LVL67:
 1108              	.L38:
 1109 0032 08BD     		pop	{r3, pc}
 1110              	.L41:
 1111              		.align	2
 1112              	.L40:
 1113 0034 00000000 		.word	huart1
ARM GAS  /tmp/ccZ0eTf3.s 			page 40


 1114 0038 00380140 		.word	1073821696
 1115 003c 00000000 		.word	.LC0
 1116              		.cfi_endproc
 1117              	.LFE137:
 1119              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1120              		.align	2
 1121              		.thumb
 1122              		.thumb_func
 1124              	MX_USART3_UART_Init:
 1125              	.LFB138:
 811:Src/main.c    **** {
 1126              		.loc 1 811 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130 0000 08B5     		push	{r3, lr}
 1131              	.LCFI15:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 3, -8
 1134              		.cfi_offset 14, -4
 813:Src/main.c    ****   huart3.Instance = USART3;
 1135              		.loc 1 813 0
 1136 0002 0C48     		ldr	r0, .L44
 1137 0004 0C4B     		ldr	r3, .L44+4
 1138 0006 0360     		str	r3, [r0]
 814:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 1139              		.loc 1 814 0
 1140 0008 4FF4E133 		mov	r3, #115200
 1141 000c 4360     		str	r3, [r0, #4]
 815:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1142              		.loc 1 815 0
 1143 000e 0023     		movs	r3, #0
 1144 0010 8360     		str	r3, [r0, #8]
 816:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1145              		.loc 1 816 0
 1146 0012 C360     		str	r3, [r0, #12]
 817:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1147              		.loc 1 817 0
 1148 0014 0361     		str	r3, [r0, #16]
 818:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1149              		.loc 1 818 0
 1150 0016 0C22     		movs	r2, #12
 1151 0018 4261     		str	r2, [r0, #20]
 819:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1152              		.loc 1 819 0
 1153 001a 8361     		str	r3, [r0, #24]
 820:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1154              		.loc 1 820 0
 1155 001c C361     		str	r3, [r0, #28]
 821:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1156              		.loc 1 821 0
 1157 001e 0362     		str	r3, [r0, #32]
 822:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1158              		.loc 1 822 0
 1159 0020 4362     		str	r3, [r0, #36]
 823:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1160              		.loc 1 823 0
ARM GAS  /tmp/ccZ0eTf3.s 			page 41


 1161 0022 FFF7FEFF 		bl	HAL_UART_Init
 1162              	.LVL68:
 1163 0026 20B1     		cbz	r0, .L42
 825:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1164              		.loc 1 825 0
 1165 0028 0448     		ldr	r0, .L44+8
 1166 002a 40F23931 		movw	r1, #825
 1167 002e FFF7FEFF 		bl	_Error_Handler
 1168              	.LVL69:
 1169              	.L42:
 1170 0032 08BD     		pop	{r3, pc}
 1171              	.L45:
 1172              		.align	2
 1173              	.L44:
 1174 0034 00000000 		.word	huart3
 1175 0038 00480040 		.word	1073760256
 1176 003c 00000000 		.word	.LC0
 1177              		.cfi_endproc
 1178              	.LFE138:
 1180              		.section	.text.SystemClock_Config,"ax",%progbits
 1181              		.align	2
 1182              		.global	SystemClock_Config
 1183              		.thumb
 1184              		.thumb_func
 1186              	SystemClock_Config:
 1187              	.LFB126:
 210:Src/main.c    **** {
 1188              		.loc 1 210 0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 88
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 1192 0000 00B5     		push	{lr}
 1193              	.LCFI16:
 1194              		.cfi_def_cfa_offset 4
 1195              		.cfi_offset 14, -4
 1196 0002 97B0     		sub	sp, sp, #92
 1197              	.LCFI17:
 1198              		.cfi_def_cfa_offset 96
 218:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 1199              		.loc 1 218 0
 1200 0004 0122     		movs	r2, #1
 1201 0006 0C92     		str	r2, [sp, #48]
 219:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1202              		.loc 1 219 0
 1203 0008 4FF48033 		mov	r3, #65536
 1204 000c 0D93     		str	r3, [sp, #52]
 220:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1205              		.loc 1 220 0
 1206 000e 0021     		movs	r1, #0
 1207 0010 0E91     		str	r1, [sp, #56]
 221:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1208              		.loc 1 221 0
 1209 0012 1092     		str	r2, [sp, #64]
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1210              		.loc 1 222 0
 1211 0014 0222     		movs	r2, #2
 1212 0016 1392     		str	r2, [sp, #76]
ARM GAS  /tmp/ccZ0eTf3.s 			page 42


 223:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1213              		.loc 1 223 0
 1214 0018 1493     		str	r3, [sp, #80]
 224:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1215              		.loc 1 224 0
 1216 001a 4FF4E013 		mov	r3, #1835008
 1217 001e 1593     		str	r3, [sp, #84]
 225:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1218              		.loc 1 225 0
 1219 0020 0CA8     		add	r0, sp, #48
 1220 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1221              	.LVL70:
 1222 0026 18B1     		cbz	r0, .L47
 227:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1223              		.loc 1 227 0
 1224 0028 1D48     		ldr	r0, .L50
 1225 002a E321     		movs	r1, #227
 1226 002c FFF7FEFF 		bl	_Error_Handler
 1227              	.LVL71:
 1228              	.L47:
 232:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 1229              		.loc 1 232 0
 1230 0030 0F23     		movs	r3, #15
 1231 0032 0793     		str	r3, [sp, #28]
 234:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1232              		.loc 1 234 0
 1233 0034 0221     		movs	r1, #2
 1234 0036 0891     		str	r1, [sp, #32]
 235:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1235              		.loc 1 235 0
 1236 0038 0023     		movs	r3, #0
 1237 003a 0993     		str	r3, [sp, #36]
 236:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1238              		.loc 1 236 0
 1239 003c 4FF4A062 		mov	r2, #1280
 1240 0040 0A92     		str	r2, [sp, #40]
 237:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1241              		.loc 1 237 0
 1242 0042 0B93     		str	r3, [sp, #44]
 239:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 1243              		.loc 1 239 0
 1244 0044 07A8     		add	r0, sp, #28
 1245 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1246              	.LVL72:
 1247 004a 18B1     		cbz	r0, .L48
 241:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1248              		.loc 1 241 0
 1249 004c 1448     		ldr	r0, .L50
 1250 004e F121     		movs	r1, #241
 1251 0050 FFF7FEFF 		bl	_Error_Handler
 1252              	.LVL73:
 1253              	.L48:
 244:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1
 1254              		.loc 1 244 0
 1255 0054 44F28103 		movw	r3, #16513
 1256 0058 0093     		str	r3, [sp]
 246:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
ARM GAS  /tmp/ccZ0eTf3.s 			page 43


 1257              		.loc 1 246 0
 1258 005a 0023     		movs	r3, #0
 1259 005c 0293     		str	r3, [sp, #8]
 247:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 1260              		.loc 1 247 0
 1261 005e 4FF48072 		mov	r2, #256
 1262 0062 0492     		str	r2, [sp, #16]
 248:Src/main.c    ****   PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 1263              		.loc 1 248 0
 1264 0064 0693     		str	r3, [sp, #24]
 249:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1265              		.loc 1 249 0
 1266 0066 6846     		mov	r0, sp
 1267 0068 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1268              	.LVL74:
 1269 006c 18B1     		cbz	r0, .L49
 251:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1270              		.loc 1 251 0
 1271 006e 0C48     		ldr	r0, .L50
 1272 0070 FB21     		movs	r1, #251
 1273 0072 FFF7FEFF 		bl	_Error_Handler
 1274              	.LVL75:
 1275              	.L49:
 256:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 1276              		.loc 1 256 0
 1277 0076 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1278              	.LVL76:
 1279 007a 0A4B     		ldr	r3, .L50+4
 1280 007c A3FB0020 		umull	r2, r0, r3, r0
 1281 0080 8009     		lsrs	r0, r0, #6
 1282 0082 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1283              	.LVL77:
 260:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 1284              		.loc 1 260 0
 1285 0086 0420     		movs	r0, #4
 1286 0088 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1287              	.LVL78:
 263:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 1288              		.loc 1 263 0
 1289 008c 4FF0FF30 		mov	r0, #-1
 1290 0090 0021     		movs	r1, #0
 1291 0092 0A46     		mov	r2, r1
 1292 0094 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1293              	.LVL79:
 264:Src/main.c    **** }
 1294              		.loc 1 264 0
 1295 0098 17B0     		add	sp, sp, #92
 1296              		@ sp needed
 1297 009a 5DF804FB 		ldr	pc, [sp], #4
 1298              	.L51:
 1299 009e 00BF     		.align	2
 1300              	.L50:
 1301 00a0 00000000 		.word	.LC0
 1302 00a4 D34D6210 		.word	274877907
 1303              		.cfi_endproc
 1304              	.LFE126:
 1306              		.global	__aeabi_f2d
ARM GAS  /tmp/ccZ0eTf3.s 			page 44


 1307              		.section	.text.main,"ax",%progbits
 1308              		.align	2
 1309              		.global	main
 1310              		.thumb
 1311              		.thumb_func
 1313              	main:
 1314              	.LFB124:
  99:Src/main.c    **** {
 1315              		.loc 1 99 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1320              	.LCFI18:
 1321              		.cfi_def_cfa_offset 20
 1322              		.cfi_offset 4, -20
 1323              		.cfi_offset 5, -16
 1324              		.cfi_offset 6, -12
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 2DED088B 		fstmfdd	sp!, {d8, d9, d10, d11}
 1328              	.LCFI19:
 1329              		.cfi_def_cfa_offset 52
 1330              		.cfi_offset 80, -52
 1331              		.cfi_offset 82, -44
 1332              		.cfi_offset 84, -36
 1333              		.cfi_offset 86, -28
 1334 0006 8DB0     		sub	sp, sp, #52
 1335              	.LCFI20:
 1336              		.cfi_def_cfa_offset 104
 104:Src/main.c    ****   HAL_Init();
 1337              		.loc 1 104 0
 1338 0008 FFF7FEFF 		bl	HAL_Init
 1339              	.LVL80:
 107:Src/main.c    ****   SystemClock_Config();
 1340              		.loc 1 107 0
 1341 000c FFF7FEFF 		bl	SystemClock_Config
 1342              	.LVL81:
 110:Src/main.c    ****   MX_GPIO_Init();
 1343              		.loc 1 110 0
 1344 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1345              	.LVL82:
 111:Src/main.c    ****   MX_DMA_Init();
 1346              		.loc 1 111 0
 1347 0014 FFF7FEFF 		bl	MX_DMA_Init
 1348              	.LVL83:
 118:Src/main.c    ****   MX_TIM2_Init();
 1349              		.loc 1 118 0
 1350 0018 FFF7FEFF 		bl	MX_TIM2_Init
 1351              	.LVL84:
 121:Src/main.c    ****   MX_USART1_UART_Init();
 1352              		.loc 1 121 0
 1353 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 1354              	.LVL85:
 122:Src/main.c    ****   MX_USART3_UART_Init();
 1355              		.loc 1 122 0
 1356 0020 FFF7FEFF 		bl	MX_USART3_UART_Init
ARM GAS  /tmp/ccZ0eTf3.s 			page 45


 1357              	.LVL86:
 124:Src/main.c    ****   ADC1_Config();
 1358              		.loc 1 124 0
 1359 0024 FFF7FEFF 		bl	ADC1_Config
 1360              	.LVL87:
 125:Src/main.c    ****   ADC2_Config();
 1361              		.loc 1 125 0
 1362 0028 FFF7FEFF 		bl	ADC2_Config
 1363              	.LVL88:
 127:Src/main.c    ****   HRTIM_Config();
 1364              		.loc 1 127 0
 1365 002c FFF7FEFF 		bl	HRTIM_Config
 1366              	.LVL89:
 1367              	.LBB9:
 136:Src/main.c    ****     for (int i = 0; i < 1500; i++) {
 1368              		.loc 1 136 0
 1369 0030 0025     		movs	r5, #0
 1370              	.LBB10:
 137:Src/main.c    ****       Vin = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * ADC_VREF * VOUT_DIV)/ARES;
 1371              		.loc 1 137 0
 1372 0032 9FEDA98A 		flds	s16, .L73
 1373 0036 DFEDA99A 		flds	s19, .L73+4
 1374 003a DFEDA98A 		flds	s17, .L73+8
 142:Src/main.c    ****       Temp1 = r2temp(NTC_R((HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2) * ADC_VREF)/ARE
 1375              		.loc 1 142 0
 1376 003e 9FEDA99A 		flds	s18, .L73+12
 149:Src/main.c    ****       esum = CLAMP(esum, -2000, 2000);
 1377              		.loc 1 149 0
 1378 0042 DFEDA9AA 		flds	s21, .L73+16
 151:Src/main.c    ****       duty = 1.0f - (Vin / (VTARGET + DC_RES * Iout + (esum * 0.01f)));
 1379              		.loc 1 151 0
 1380 0046 9FEDA9BA 		flds	s22, .L73+20
 1381 004a DDE0     		b	.L69
 1382              	.LVL90:
 1383              	.L56:
 137:Src/main.c    ****       Vin = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * ADC_VREF * VOUT_DIV)/ARES;
 1384              		.loc 1 137 0
 1385 004c A84E     		ldr	r6, .L73+24
 1386 004e 3046     		mov	r0, r6
 1387 0050 0221     		movs	r1, #2
 1388 0052 FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1389              	.LVL91:
 1390 0056 07EE100A 		fmsr	s14, r0	@ int
 1391 005a F8EE477A 		fuitos	s15, s14
 1392 005e 67EE887A 		fmuls	s15, s15, s16
 1393 0062 67EEA97A 		fmuls	s15, s15, s19
 1394 0066 67EEA87A 		fmuls	s15, s15, s17
 1395 006a A24B     		ldr	r3, .L73+28
 1396 006c C3ED007A 		fsts	s15, [r3]
 138:Src/main.c    ****       Vout = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * ADC_VREF * VOUT_DIV)/ARES;
 1397              		.loc 1 138 0
 1398 0070 3046     		mov	r0, r6
 1399 0072 0121     		movs	r1, #1
 1400 0074 FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1401              	.LVL92:
 1402 0078 07EE100A 		fmsr	s14, r0	@ int
 1403 007c F8EE477A 		fuitos	s15, s14
ARM GAS  /tmp/ccZ0eTf3.s 			page 46


 1404 0080 67EE887A 		fmuls	s15, s15, s16
 1405 0084 67EEA97A 		fmuls	s15, s15, s19
 1406 0088 67EEA87A 		fmuls	s15, s15, s17
 1407 008c 9A4F     		ldr	r7, .L73+32
 1408 008e C7ED007A 		fsts	s15, [r7]
 140:Src/main.c    ****       Iout = (HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1) * ADC_VREF * IOUT_DIV)/ARES;
 1409              		.loc 1 140 0
 1410 0092 9A4C     		ldr	r4, .L73+36
 1411 0094 2046     		mov	r0, r4
 1412 0096 0121     		movs	r1, #1
 1413 0098 FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1414              	.LVL93:
 1415 009c 07EE100A 		fmsr	s14, r0	@ int
 1416 00a0 F8EE477A 		fuitos	s15, s14
 1417 00a4 67EE887A 		fmuls	s15, s15, s16
 1418 00a8 B7EE087A 		fconsts	s14, #120
 1419 00ac 67EE877A 		fmuls	s15, s15, s14
 1420 00b0 67EEA87A 		fmuls	s15, s15, s17
 1421 00b4 924B     		ldr	r3, .L73+40
 1422 00b6 C3ED007A 		fsts	s15, [r3]
 142:Src/main.c    ****       Temp1 = r2temp(NTC_R((HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2) * ADC_VREF)/ARE
 1423              		.loc 1 142 0
 1424 00ba 2046     		mov	r0, r4
 1425 00bc 0221     		movs	r1, #2
 1426 00be FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1427              	.LVL94:
 1428 00c2 07EE900A 		fmsr	s15, r0	@ int
 1429 00c6 B8EE67AA 		fuitos	s20, s15
 1430 00ca 2AEE08AA 		fmuls	s20, s20, s16
 1431 00ce 2AEE28AA 		fmuls	s20, s20, s17
 1432 00d2 2AEE09AA 		fmuls	s20, s20, s18
 1433 00d6 2046     		mov	r0, r4
 1434 00d8 0221     		movs	r1, #2
 1435 00da FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1436              	.LVL95:
 1437 00de 07EE100A 		fmsr	s14, r0	@ int
 1438 00e2 B8EE470A 		fuitos	s0, s14
 1439 00e6 20EE080A 		fmuls	s0, s0, s16
 1440 00ea 20EE280A 		fmuls	s0, s0, s17
 1441 00ee 38EE400A 		fsubs	s0, s16, s0
 1442 00f2 8AEE000A 		fdivs	s0, s20, s0
 1443 00f6 FFF7FEFF 		bl	r2temp
 1444              	.LVL96:
 1445 00fa 824B     		ldr	r3, .L73+44
 1446 00fc 83ED000A 		fsts	s0, [r3]
 143:Src/main.c    ****       Temp2 = r2temp(NTC_R((HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3) * ADC_VREF)/ARE
 1447              		.loc 1 143 0
 1448 0100 2046     		mov	r0, r4
 1449 0102 0321     		movs	r1, #3
 1450 0104 FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1451              	.LVL97:
 1452 0108 07EE900A 		fmsr	s15, r0	@ int
 1453 010c B8EE67AA 		fuitos	s20, s15
 1454 0110 2AEE08AA 		fmuls	s20, s20, s16
 1455 0114 2AEE28AA 		fmuls	s20, s20, s17
 1456 0118 2AEE09AA 		fmuls	s20, s20, s18
 1457 011c 2046     		mov	r0, r4
ARM GAS  /tmp/ccZ0eTf3.s 			page 47


 1458 011e 0321     		movs	r1, #3
 1459 0120 FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1460              	.LVL98:
 1461 0124 07EE100A 		fmsr	s14, r0	@ int
 1462 0128 B8EE470A 		fuitos	s0, s14
 1463 012c 20EE080A 		fmuls	s0, s0, s16
 1464 0130 20EE280A 		fmuls	s0, s0, s17
 1465 0134 38EE400A 		fsubs	s0, s16, s0
 1466 0138 8AEE000A 		fdivs	s0, s20, s0
 1467 013c FFF7FEFF 		bl	r2temp
 1468              	.LVL99:
 1469 0140 714B     		ldr	r3, .L73+48
 1470 0142 83ED000A 		fsts	s0, [r3]
 145:Src/main.c    ****       US_pp = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * ADC_VREF)/ARES;
 1471              		.loc 1 145 0
 1472 0146 3046     		mov	r0, r6
 1473 0148 0321     		movs	r1, #3
 1474 014a FFF7FEFF 		bl	HAL_ADCEx_InjectedGetValue
 1475              	.LVL100:
 1476 014e 07EE100A 		fmsr	s14, r0	@ int
 1477 0152 F8EE477A 		fuitos	s15, s14
 1478 0156 67EE887A 		fmuls	s15, s15, s16
 1479 015a 67EEA87A 		fmuls	s15, s15, s17
 1480 015e 6B4B     		ldr	r3, .L73+52
 1481 0160 C3ED007A 		fsts	s15, [r3]
 147:Src/main.c    ****       float error = VTARGET - Vout;
 1482              		.loc 1 147 0
 1483 0164 D7ED007A 		flds	s15, [r7]
 1484 0168 B3EE087A 		fconsts	s14, #56
 1485 016c 77EE677A 		fsubs	s15, s14, s15
 1486              	.LVL101:
 148:Src/main.c    ****       esum += error;
 1487              		.loc 1 148 0
 1488 0170 674B     		ldr	r3, .L73+56
 1489 0172 93ED007A 		flds	s14, [r3]
 1490 0176 77EE877A 		fadds	s15, s15, s14
 1491              	.LVL102:
 149:Src/main.c    ****       esum = CLAMP(esum, -2000, 2000);
 1492              		.loc 1 149 0
 1493 017a F4EEEA7A 		fcmpes	s15, s21
 1494 017e F1EE10FA 		fmstat
 1495 0182 09D8     		bhi	.L70
 149:Src/main.c    ****       esum = CLAMP(esum, -2000, 2000);
 1496              		.loc 1 149 0 is_stmt 0 discriminator 1
 1497 0184 9FED637A 		flds	s14, .L73+60
 1498 0188 F4EEC77A 		fcmpes	s15, s14
 1499 018c F1EE10FA 		fmstat
 1500 0190 B8BF     		it	lt
 1501 0192 F0EE477A 		fcpyslt	s15, s14
 1502 0196 01E0     		b	.L54
 1503              	.L70:
 149:Src/main.c    ****       esum = CLAMP(esum, -2000, 2000);
 1504              		.loc 1 149 0
 1505 0198 F0EE6A7A 		fcpys	s15, s21
 1506              	.L54:
 149:Src/main.c    ****       esum = CLAMP(esum, -2000, 2000);
 1507              		.loc 1 149 0 discriminator 3
ARM GAS  /tmp/ccZ0eTf3.s 			page 48


 1508 019c 5C4B     		ldr	r3, .L73+56
 1509 019e C3ED007A 		fsts	s15, [r3]
 151:Src/main.c    ****       duty = 1.0f - (Vin / (VTARGET + DC_RES * Iout + (esum * 0.01f)));
 1510              		.loc 1 151 0 is_stmt 1 discriminator 3
 1511 01a2 574B     		ldr	r3, .L73+40
 1512 01a4 93ED007A 		flds	s14, [r3]
 1513 01a8 27EE0B7A 		fmuls	s14, s14, s22
 1514 01ac F3EE086A 		fconsts	s13, #56
 1515              	.LVL103:
 1516 01b0 37EE267A 		fadds	s14, s14, s13
 1517 01b4 DFED586A 		flds	s13, .L73+64
 1518              	.LVL104:
 1519 01b8 67EEA67A 		fmuls	s15, s15, s13
 1520 01bc 77EE277A 		fadds	s15, s14, s15
 1521 01c0 4C4B     		ldr	r3, .L73+28
 1522 01c2 93ED007A 		flds	s14, [r3]
 1523 01c6 87EE277A 		fdivs	s14, s14, s15
 1524 01ca F7EE007A 		fconsts	s15, #112
 1525 01ce 37EEC77A 		fsubs	s14, s15, s14
 152:Src/main.c    ****       duty = MIN(duty, 0.76f); // limit dutycicle (max 50V at 12V in)
 1526              		.loc 1 152 0 discriminator 3
 1527 01d2 DFED527A 		flds	s15, .L73+68
 1528 01d6 B4EEE77A 		fcmpes	s14, s15
 1529 01da F1EE10FA 		fmstat
 1530 01de 88BF     		it	hi
 1531 01e0 B0EE677A 		fcpyshi	s14, s15
 1532 01e4 4E4B     		ldr	r3, .L73+72
 1533 01e6 83ED007A 		fsts	s14, [r3]
 154:Src/main.c    ****       uint16_t TIMERSET = BUCK_PWM_PERIOD - (BUCK_PWM_PERIOD * duty);
 1534              		.loc 1 154 0 discriminator 3
 1535 01ea DFED4E7A 		flds	s15, .L73+76
 1536 01ee 27EE277A 		fmuls	s14, s14, s15
 1537 01f2 77EEC77A 		fsubs	s15, s15, s14
 1538 01f6 FCEEE77A 		ftouizs	s15, s15
 1539 01fa 17EE902A 		fmrs	r2, s15	@ int
 1540 01fe 92B2     		uxth	r2, r2
 1541              	.LVL105:
 156:Src/main.c    ****       HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = TIMERSET; //set new compare value
 1542              		.loc 1 156 0 discriminator 3
 1543 0200 494B     		ldr	r3, .L73+80
 1544 0202 C3F89C20 		str	r2, [r3, #156]
 1545              	.LVL106:
 1546              	.LBE10:
 136:Src/main.c    ****     for (int i = 0; i < 1500; i++) {
 1547              		.loc 1 136 0 discriminator 3
 1548 0206 0135     		adds	r5, r5, #1
 1549              	.LVL107:
 1550              	.L69:
 136:Src/main.c    ****     for (int i = 0; i < 1500; i++) {
 1551              		.loc 1 136 0 is_stmt 0 discriminator 1
 1552 0208 40F2DB53 		movw	r3, #1499
 1553 020c 9D42     		cmp	r5, r3
 1554 020e 7FF71DAF 		ble	.L56
 1555              	.LBE9:
 160:Src/main.c    ****     HAL_GPIO_TogglePin(LED_READY_GPIO_Port, LED_READY_Pin);
 1556              		.loc 1 160 0 is_stmt 1
 1557 0212 4FF09040 		mov	r0, #1207959552
ARM GAS  /tmp/ccZ0eTf3.s 			page 49


 1558 0216 0121     		movs	r1, #1
 1559 0218 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1560              	.LVL108:
 162:Src/main.c    ****     if (US_pp > 1.7f) {
 1561              		.loc 1 162 0
 1562 021c 3B4B     		ldr	r3, .L73+52
 1563 021e 93ED007A 		flds	s14, [r3]
 1564 0222 DFED427A 		flds	s15, .L73+84
 1565 0226 B4EEE77A 		fcmpes	s14, s15
 1566 022a F1EE10FA 		fmstat
 1567 022e 03DD     		ble	.L71
 163:Src/main.c    ****       HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 1568              		.loc 1 163 0
 1569 0230 1220     		movs	r0, #18
 1570 0232 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1571              	.LVL109:
 1572 0236 02E0     		b	.L59
 1573              	.L71:
 165:Src/main.c    ****       HAL_NVIC_DisableIRQ(ADC1_2_IRQn);
 1574              		.loc 1 165 0
 1575 0238 1220     		movs	r0, #18
 1576 023a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1577              	.LVL110:
 1578              	.L59:
 171:Src/main.c    ****     HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin,(Temp1 > 50 || Temp2 > 50));
 1579              		.loc 1 171 0
 1580 023e 314B     		ldr	r3, .L73+44
 1581 0240 93ED007A 		flds	s14, [r3]
 1582 0244 DFED3A7A 		flds	s15, .L73+88
 1583 0248 B4EEE77A 		fcmpes	s14, s15
 1584 024c F1EE10FA 		fmstat
 1585 0250 09DC     		bgt	.L64
 171:Src/main.c    ****     HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin,(Temp1 > 50 || Temp2 > 50));
 1586              		.loc 1 171 0 is_stmt 0 discriminator 2
 1587 0252 2D4B     		ldr	r3, .L73+48
 1588 0254 93ED007A 		flds	s14, [r3]
 1589 0258 B4EEE77A 		fcmpes	s14, s15
 1590 025c F1EE10FA 		fmstat
 1591 0260 03DD     		ble	.L72
 171:Src/main.c    ****     HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin,(Temp1 > 50 || Temp2 > 50));
 1592              		.loc 1 171 0
 1593 0262 0122     		movs	r2, #1
 1594 0264 02E0     		b	.L60
 1595              	.L64:
 1596 0266 0122     		movs	r2, #1
 1597 0268 00E0     		b	.L60
 1598              	.L72:
 1599 026a 0022     		movs	r2, #0
 1600              	.L60:
 171:Src/main.c    ****     HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin,(Temp1 > 50 || Temp2 > 50));
 1601              		.loc 1 171 0 discriminator 4
 1602 026c 3148     		ldr	r0, .L73+92
 1603 026e 1021     		movs	r1, #16
 1604 0270 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1605              	.LVL111:
 180:Src/main.c    ****     printf("%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%d;%d\n\r", Temp1, Temp2, Vin, Vout, Iout, US_pp, periode
 1606              		.loc 1 180 0 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccZ0eTf3.s 			page 50


 1607 0274 234B     		ldr	r3, .L73+44
 1608 0276 1868     		ldr	r0, [r3]	@ float
 1609 0278 FFF7FEFF 		bl	__aeabi_f2d
 1610              	.LVL112:
 1611 027c 0446     		mov	r4, r0
 1612 027e 0D46     		mov	r5, r1
 1613              	.LVL113:
 1614 0280 214B     		ldr	r3, .L73+48
 1615 0282 1868     		ldr	r0, [r3]	@ float
 1616 0284 FFF7FEFF 		bl	__aeabi_f2d
 1617              	.LVL114:
 1618 0288 CDE90001 		strd	r0, [sp]
 1619 028c 194B     		ldr	r3, .L73+28
 1620 028e 1868     		ldr	r0, [r3]	@ float
 1621 0290 FFF7FEFF 		bl	__aeabi_f2d
 1622              	.LVL115:
 1623 0294 CDE90201 		strd	r0, [sp, #8]
 1624 0298 174B     		ldr	r3, .L73+32
 1625 029a 1868     		ldr	r0, [r3]	@ float
 1626 029c FFF7FEFF 		bl	__aeabi_f2d
 1627              	.LVL116:
 1628 02a0 CDE90401 		strd	r0, [sp, #16]
 1629 02a4 164B     		ldr	r3, .L73+40
 1630 02a6 1868     		ldr	r0, [r3]	@ float
 1631 02a8 FFF7FEFF 		bl	__aeabi_f2d
 1632              	.LVL117:
 1633 02ac CDE90601 		strd	r0, [sp, #24]
 1634 02b0 164B     		ldr	r3, .L73+52
 1635 02b2 1868     		ldr	r0, [r3]	@ float
 1636 02b4 FFF7FEFF 		bl	__aeabi_f2d
 1637              	.LVL118:
 1638 02b8 CDE90801 		strd	r0, [sp, #32]
 1639 02bc 1E4B     		ldr	r3, .L73+96
 1640 02be 1B88     		ldrh	r3, [r3]
 1641 02c0 0A93     		str	r3, [sp, #40]
 1642 02c2 1E4B     		ldr	r3, .L73+100
 1643 02c4 1B88     		ldrh	r3, [r3]
 1644 02c6 0B93     		str	r3, [sp, #44]
 1645 02c8 1D48     		ldr	r0, .L73+104
 1646 02ca 2246     		mov	r2, r4
 1647 02cc 2B46     		mov	r3, r5
 1648 02ce FFF7FEFF 		bl	printf
 1649              	.LVL119:
 1650              	.LBB11:
 136:Src/main.c    ****     for (int i = 0; i < 1500; i++) {
 1651              		.loc 1 136 0 discriminator 4
 1652 02d2 0025     		movs	r5, #0
 1653              	.LBE11:
 181:Src/main.c    ****   }
 1654              		.loc 1 181 0 discriminator 4
 1655 02d4 98E7     		b	.L69
 1656              	.L74:
 1657 02d6 00BF     		.align	2
 1658              	.L73:
 1659 02d8 33335340 		.word	1079194419
 1660 02dc 0AD77341 		.word	1098110730
 1661 02e0 00008039 		.word	964689920
ARM GAS  /tmp/ccZ0eTf3.s 			page 51


 1662 02e4 00401C46 		.word	1176256512
 1663 02e8 0000FA44 		.word	1157234688
 1664 02ec CDCC2C40 		.word	1076677837
 1665 02f0 00000000 		.word	hadc1
 1666 02f4 00000000 		.word	Vin
 1667 02f8 00000000 		.word	Vout
 1668 02fc 00000000 		.word	hadc2
 1669 0300 00000000 		.word	Iout
 1670 0304 00000000 		.word	Temp1
 1671 0308 00000000 		.word	Temp2
 1672 030c 00000000 		.word	US_pp
 1673 0310 00000000 		.word	esum
 1674 0314 0000FAC4 		.word	-990248960
 1675 0318 0AD7233C 		.word	1008981770
 1676 031c 5C8F423F 		.word	1061326684
 1677 0320 00000000 		.word	duty
 1678 0324 00008045 		.word	1166016512
 1679 0328 00740140 		.word	1073837056
 1680 032c 9A99D93F 		.word	1071225242
 1681 0330 00004842 		.word	1112014848
 1682 0334 00040048 		.word	1207960576
 1683 0338 00000000 		.word	.LANCHOR1
 1684 033c 00000000 		.word	.LANCHOR2
 1685 0340 0C000000 		.word	.LC1
 1686              		.cfi_endproc
 1687              	.LFE124:
 1689              		.global	uwIC2Value1
 1690              		.global	phase
 1691              		.global	periode
 1692              		.global	lastTimer
 1693              		.comm	esum,4,4
 1694              		.comm	duty,4,4
 1695              		.comm	US_pp,4,4
 1696              		.comm	Iout,4,4
 1697              		.comm	Temp2,4,4
 1698              		.comm	Temp1,4,4
 1699              		.comm	Vout,4,4
 1700              		.comm	Vin,4,4
 1701              		.comm	hdma_usart1_tx,68,4
 1702              		.comm	hdma_usart1_rx,68,4
 1703              		.comm	huart3,112,4
 1704              		.comm	huart1,112,4
 1705              		.comm	htim3,64,4
 1706              		.comm	htim2,64,4
 1707              		.comm	hhrtim1,220,4
 1708              		.comm	hdac2,20,4
 1709              		.comm	hdac1,20,4
 1710              		.comm	hcomp6,44,4
 1711              		.comm	hcomp4,44,4
 1712              		.comm	hcomp2,44,4
 1713              		.comm	hdma_adc2,68,4
 1714              		.comm	hdma_adc1,68,4
 1715              		.comm	hadc2,84,4
 1716              		.comm	hadc1,84,4
 1717              		.section	.bss.lastTimer,"aw",%nobits
 1718              		.align	1
 1719              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/ccZ0eTf3.s 			page 52


 1722              	lastTimer:
 1723 0000 0000     		.space	2
 1724              		.section	.bss.phase,"aw",%nobits
 1725              		.align	1
 1726              		.set	.LANCHOR2,. + 0
 1729              	phase:
 1730 0000 0000     		.space	2
 1731              		.section	.bss.periode,"aw",%nobits
 1732              		.align	1
 1733              		.set	.LANCHOR1,. + 0
 1736              	periode:
 1737 0000 0000     		.space	2
 1738              		.section	.bss.uwIC2Value1,"aw",%nobits
 1739              		.align	1
 1742              	uwIC2Value1:
 1743 0000 0000     		.space	2
 1744              		.section	.rodata.str1.4,"aMS",%progbits,1
 1745              		.align	2
 1746              	.LC0:
 1747 0000 5372632F 		.ascii	"Src/main.c\000"
 1747      6D61696E 
 1747      2E6300
 1748 000b 00       		.space	1
 1749              	.LC1:
 1750 000c 252E3266 		.ascii	"%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%d;%d\012\015\000"
 1750      3B252E32 
 1750      663B252E 
 1750      32663B25 
 1750      2E32663B 
 1751 0032 0000     		.text
 1752              	.Letext0:
 1753              		.file 2 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f334x8.h"
 1754              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 1755              		.file 4 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1756              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 1757              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1758              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1759              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1760              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1761              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1762              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 1763              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 1764              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_comp.h"
 1765              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
 1766              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_hrtim.h"
 1767              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1768              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1769              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1770              		.file 19 "Drivers/CMSIS/Include/core_cm4.h"
 1771              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 1772              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1773              		.file 22 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdio.h"
ARM GAS  /tmp/ccZ0eTf3.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccZ0eTf3.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccZ0eTf3.s:25     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccZ0eTf3.s:128    .text.MX_GPIO_Init:0000008c $d
     /tmp/ccZ0eTf3.s:134    .text.MX_DMA_Init:00000000 $t
     /tmp/ccZ0eTf3.s:138    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccZ0eTf3.s:209    .text.MX_DMA_Init:00000060 $d
     /tmp/ccZ0eTf3.s:214    .text.ADC1_Config:00000000 $t
     /tmp/ccZ0eTf3.s:218    .text.ADC1_Config:00000000 ADC1_Config
     /tmp/ccZ0eTf3.s:359    .text.ADC1_Config:000000a4 $d
                            *COM*:00000054 hadc1
     /tmp/ccZ0eTf3.s:364    .text.ADC2_Config:00000000 $t
     /tmp/ccZ0eTf3.s:368    .text.ADC2_Config:00000000 ADC2_Config
     /tmp/ccZ0eTf3.s:509    .text.ADC2_Config:000000a4 $d
                            *COM*:00000054 hadc2
     /tmp/ccZ0eTf3.s:515    .text.HRTIM_Config:00000000 $t
     /tmp/ccZ0eTf3.s:519    .text.HRTIM_Config:00000000 HRTIM_Config
     /tmp/ccZ0eTf3.s:736    .text.HRTIM_Config:00000128 $d
                            *COM*:000000dc hhrtim1
     /tmp/ccZ0eTf3.s:742    .text.DCDC_Reg:00000000 $t
     /tmp/ccZ0eTf3.s:747    .text.DCDC_Reg:00000000 DCDC_Reg
     /tmp/ccZ0eTf3.s:768    .text.HAL_TIM_IC_CaptureCallback:00000000 $t
     /tmp/ccZ0eTf3.s:773    .text.HAL_TIM_IC_CaptureCallback:00000000 HAL_TIM_IC_CaptureCallback
     /tmp/ccZ0eTf3.s:856    .text.HAL_TIM_IC_CaptureCallback:00000058 $d
     /tmp/ccZ0eTf3.s:864    .text._Error_Handler:00000000 $t
     /tmp/ccZ0eTf3.s:869    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccZ0eTf3.s:884    .text.MX_TIM2_Init:00000000 $t
     /tmp/ccZ0eTf3.s:888    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/ccZ0eTf3.s:1052   .text.MX_TIM2_Init:000000f4 $d
                            *COM*:00000040 htim2
     /tmp/ccZ0eTf3.s:1059   .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccZ0eTf3.s:1063   .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccZ0eTf3.s:1113   .text.MX_USART1_UART_Init:00000034 $d
                            *COM*:00000070 huart1
     /tmp/ccZ0eTf3.s:1120   .text.MX_USART3_UART_Init:00000000 $t
     /tmp/ccZ0eTf3.s:1124   .text.MX_USART3_UART_Init:00000000 MX_USART3_UART_Init
     /tmp/ccZ0eTf3.s:1174   .text.MX_USART3_UART_Init:00000034 $d
                            *COM*:00000070 huart3
     /tmp/ccZ0eTf3.s:1181   .text.SystemClock_Config:00000000 $t
     /tmp/ccZ0eTf3.s:1186   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccZ0eTf3.s:1301   .text.SystemClock_Config:000000a0 $d
     /tmp/ccZ0eTf3.s:1308   .text.main:00000000 $t
     /tmp/ccZ0eTf3.s:1313   .text.main:00000000 main
     /tmp/ccZ0eTf3.s:1659   .text.main:000002d8 $d
                            *COM*:00000004 Vin
                            *COM*:00000004 Vout
                            *COM*:00000004 Iout
                            *COM*:00000004 Temp1
                            *COM*:00000004 Temp2
                            *COM*:00000004 US_pp
                            *COM*:00000004 esum
                            *COM*:00000004 duty
     /tmp/ccZ0eTf3.s:1742   .bss.uwIC2Value1:00000000 uwIC2Value1
     /tmp/ccZ0eTf3.s:1729   .bss.phase:00000000 phase
     /tmp/ccZ0eTf3.s:1736   .bss.periode:00000000 periode
     /tmp/ccZ0eTf3.s:1722   .bss.lastTimer:00000000 lastTimer
ARM GAS  /tmp/ccZ0eTf3.s 			page 54


                            *COM*:00000044 hdma_usart1_tx
                            *COM*:00000044 hdma_usart1_rx
                            *COM*:00000040 htim3
                            *COM*:00000014 hdac2
                            *COM*:00000014 hdac1
                            *COM*:0000002c hcomp6
                            *COM*:0000002c hcomp4
                            *COM*:0000002c hcomp2
                            *COM*:00000044 hdma_adc2
                            *COM*:00000044 hdma_adc1
     /tmp/ccZ0eTf3.s:1718   .bss.lastTimer:00000000 $d
     /tmp/ccZ0eTf3.s:1725   .bss.phase:00000000 $d
     /tmp/ccZ0eTf3.s:1732   .bss.periode:00000000 $d
     /tmp/ccZ0eTf3.s:1739   .bss.uwIC2Value1:00000000 $d
     /tmp/ccZ0eTf3.s:1745   .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_Init
HAL_ADCEx_InjectedConfigChannel
HAL_ADCEx_Calibration_Start
HAL_ADCEx_InjectedStart
HAL_HRTIM_Init
HAL_HRTIM_TimeBaseConfig
HAL_HRTIM_WaveformTimerConfig
HAL_HRTIM_WaveformOutputConfig
HAL_HRTIM_WaveformCompareConfig
HAL_HRTIM_DeadTimeConfig
HAL_HRTIM_ADCTriggerConfig
HAL_HRTIM_WaveformOutputStart
HAL_HRTIM_WaveformCounterStart_IT
HAL_HRTIM_MspPostInit
HAL_GPIO_TogglePin
HAL_TIM_ReadCapturedValue
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_TIM_IC_Start_IT
HAL_TIM_Base_Start
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
__aeabi_f2d
HAL_Init
HAL_ADCEx_InjectedGetValue
r2temp
ARM GAS  /tmp/ccZ0eTf3.s 			page 55


HAL_NVIC_DisableIRQ
printf
