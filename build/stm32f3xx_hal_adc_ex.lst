ARM GAS  /tmp/cckiGtEU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 1
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f3xx_hal_adc_ex.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ADC_Disable,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	ADC_Disable:
  26              	.LFB163:
  27              		.file 1 "Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c"
   1:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @file    stm32f3xx_hal_adc_ex.c
   4:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @version V1.4.0
   6:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @date    16-December-2016
   7:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          peripheral:
  10:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *           + Operation functions
  11:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  12:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  13:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *             ++ Multimode feature (available on devices with 2 ADCs or more)
  14:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  15:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *           + Control functions
  16:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  17:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  18:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          "stm32f3xx_hal_adc.c".
  19:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         
  20:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   @verbatim
  21:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   [..] 
  22:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  23:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       available in file of generic functions "stm32f3xx_hal_adc.c".
  24:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   [..]
  25:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   @endverbatim
  26:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ******************************************************************************
  27:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @attention
  28:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
  29:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  30:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
  31:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
ARM GAS  /tmp/cckiGtEU.s 			page 2


  32:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
  33:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  34:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  35:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  36:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  37:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  38:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  39:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
  40:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *      without specific prior written permission.
  41:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
  42:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  43:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  44:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  45:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  46:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  47:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  48:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  49:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  50:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  51:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  52:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
  53:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ******************************************************************************  
  54:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
  55:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
  56:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  57:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #include "stm32f3xx_hal.h"
  58:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
  59:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @addtogroup STM32F3xx_HAL_Driver
  60:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
  61:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
  62:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
  63:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  64:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief ADC Extended HAL module driver
  65:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
  66:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
  67:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
  68:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  69:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
  70:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  71:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  72:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  73:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
  74:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
  75:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
  76:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
  77:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
  78:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  79:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Fixed timeout values for ADC calibration, enable settling time, disable  */
  80:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* settling time.                                                           */
  81:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Values defined to be higher than worst cases: low clock frequency,       */
  82:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* maximum prescalers.                                                      */
  83:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.5 MHz, ADC clock         */
  84:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* prescaler 256 (devices STM32F30xx), sampling time 7.5 ADC clock cycles,  */
  85:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* resolution 12 bits.                                                      */
  86:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
  87:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT         ( 10U)
  88:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_ENABLE_TIMEOUT              (  2U)
ARM GAS  /tmp/cckiGtEU.s 			page 3


  89:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_DISABLE_TIMEOUT             (  2U)
  90:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_STOP_CONVERSION_TIMEOUT     ( 11U)
  91:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
  92:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Timeout to wait for current conversion on going to be completed.         */
  93:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Timeout fixed to worst case, for 1 channel.                              */
  94:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   - maximum sampling time (601.5 adc_clk)                                */
  95:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   - ADC resolution (Tsar 12 bits= 12.5 adc_clk)                          */
  96:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   - ADC clock (from PLL with prescaler 256 (devices STM32F30xx))         */
  97:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: cycles of CPU clock.                                               */
  98:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSION_TIME_MAX_CPU_CYCLES ( 156928U)
  99:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Delay for ADC stabilization time (ADC voltage regulator start-up time)   */
 101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, param. TADCVREG_STUP). */
 102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
 103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_STAB_DELAY_US               ( 10U)
 104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
 106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer device datasheet, parameter tSTART).        */
 107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
 108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
 111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
 112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
 113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
 114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
 116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
 119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* prescaler 4U, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
 122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_ENABLE_TIMEOUT              ( 2U)
 123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_DISABLE_TIMEOUT             ( 2U)
 124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Delay for ADC calibration:                                               */
 126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Hardware prerequisite before starting a calibration: the ADC must have   */
 127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* been in power-on state for at least two ADC clock cycles.                */
 128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: ADC clock cycles                                                   */
 129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES       ( 2U)
 130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Timeout value for ADC calibration                                        */
 132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Value defined to be higher than worst cases: low clocks freq,            */
 133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
 134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* prescaler 4U, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
 137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT         ( 10U)
 138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Delay for ADC stabilization time.                                        */
 140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
 142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_STAB_DELAY_US               ( 1U)
 143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
 145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
ARM GAS  /tmp/cckiGtEU.s 			page 4


 146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
 147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Maximum number of CPU cycles corresponding to 1 ADC cycle                */
 150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Value fixed to worst case: clock prescalers slowing down ADC clock to    */
 151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* minimum frequency                                                        */
 152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   - AHB prescaler: 16                                                    */
 153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   - ADC prescaler: 8                                                     */
 154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Unit: cycles of CPU clock.                                               */
 155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CYCLE_WORST_CASE_CPU_CYCLES ( 128U)
 156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ADC conversion cycles (unit: ADC clock cycles)                           */
 158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (selected sampling time + conversion time of 12.5 ADC clock cycles, with */
 159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* resolution 12 bits)                                                      */
 160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_1CYCLE5    ( 14U)
 161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_7CYCLES5   ( 20U)
 162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_13CYCLES5  ( 26U)
 163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_28CYCLES5  ( 41U)
 164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_41CYCLES5  ( 54U)
 165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_55CYCLES5  ( 68U)
 166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_71CYCLES5  ( 84U)
 167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_239CYCLES5 (252U)
 168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
 169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
 170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @}
 171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
 172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
 174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
 175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
 177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
 178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
 179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
 180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup);
 183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
 184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
 185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
 186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
 187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
 189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc);
 191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
 192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* Exported functions --------------------------------------------------------*/
 198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
 200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
 201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
 202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cckiGtEU.s 			page 5


 203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 ADCEx Initialization and de-initialization functions
 204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief    ADC Extended Initialization and Configuration functions
 205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
 206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** @verbatim    
 207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  ===============================================================================
 208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****               ##### Initialization and de-initialization functions #####
 209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  ===============================================================================
 210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Initialize and configure the ADC. 
 212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) De-initialize the ADC.
 213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** @endverbatim
 215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
 216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
 217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
 219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
 220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
 221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
 222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
 223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         depending on possible clock sources: AHB clock or PLL clock.
 227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         See commented example code below that can be copied and uncommented 
 228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         into HAL_ADC_MspInit().
 229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
 230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         coming from ADC state reset. Following calls to this function can
 232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         before HAL_ADC_Init().
 236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned by ADC state.
 237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
 238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_InitTypeDef".
 239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         of structure "ADC_InitTypeDef".
 242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   For devices with several ADCs: parameters related to common ADC 
 243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         registers (ADC clock mode) are set only if all ADCs sharing the
 244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         same common group are disabled.
 245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         If this is not the case, these common parameters setting are  
 246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         case of update of a parameter of ADC_InitTypeDef on the fly,
 248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         without  disabling the other ADCs sharing the same common group.
 249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
 251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
 252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
 257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpCFGR = 0U;
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
ARM GAS  /tmp/cckiGtEU.s 			page 6


 260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check ADC handle */
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc == NULL)
 262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return HAL_ERROR;
 264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
 267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of ADC core parameters and ADC MSP related parameters */
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured  */
 294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* at RCC top level.                                                      */
 295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Refer to header of this file for more details on clock enabling        */
 296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* procedure.                                                             */
 297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Actions performed only if ADC is coming from state reset:              */
 299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Initialization of ADC MSP                                            */
 300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - ADC voltage regulator enable                                         */
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->State == HAL_ADC_STATE_RESET)
 302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Initialize ADC error code */
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Initialize HAL ADC API internal variables */
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = 0U;
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0U;
 309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Allocate lock resource and initialize it */
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->Lock = HAL_UNLOCKED;
 312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Init the low level hardware */
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_MspInit(hadc);
 315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable voltage regulator (if disabled at this step) */
ARM GAS  /tmp/cckiGtEU.s 			page 7


 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
 319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: The software must wait for the startup time of the ADC       */
 320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       voltage regulator before launching a calibration or          */
 321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       enabling the ADC. This temporization must be implemented by  */ 
 322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       software and is equal to 10 us in the worst case             */
 323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       process/temperature/power supply.                            */
 324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable the ADC (if not already disabled) */
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
 327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Check if ADC is effectively disabled */
 329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Configuration of ADC parameters if previous preliminary actions    */ 
 330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* are correctly completed.                                           */
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (tmp_hal_status == HAL_OK)                                  )
 333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
 334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC state */
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State,
 336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                             HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                             HAL_ADC_STATE_BUSY_INTERNAL);
 338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
 339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set the intermediate state before moving the ADC voltage         */
 340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* regulator to state enable.                                       */
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADVREGEN bits to 0x01U */
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
 345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Delay for ADC stabilization time.                                */
 346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             wait_loop_index--;
 351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
 353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
 354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Verification that ADC voltage regulator is correctly enabled, whether  */
 357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* or not ADC is coming from state reset (if any potential problem of     */
 358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* clocking, voltage regulator would not be enabled).                     */
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to ADC IP internal error */
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cckiGtEU.s 			page 8


 374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* correctly completed and if there is no conversion on going on regular    */
 377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* called to update a parameter on the fly).                                */
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (tmp_hal_status == HAL_OK)                                &&
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY,
 386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of common ADC parameters                                 */
 389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Pointer to the common control register to which is belonging hadc      */
 391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
 392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* control registers)                                                     */
 393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set handle of the other ADC sharing the same common register           */
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Parameters update conditioned to ADC state:                            */
 400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - Multimode clock configuration                                       */
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset configuration of ADC common register CCR:                      */
 407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*   - ADC clock mode: CKMODE                                           */
 408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Some parameters of this register are not reset, since they are set   */
 409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* by other functions and must be kept in case of usage of this         */
 410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* parameters):                                                         */
 413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*   - multimode related parameters: MDMA, DMACFG, DELAY, MULTI (set    */
 414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
 415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*     (set into HAL_ADC_ConfigChannel() or                             */
 417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*     HAL_ADCEx_InjectedConfigChannel() )                              */
 418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR       ,
 420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CCR_CKMODE           ,
 421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  hadc->Init.ClockPrescaler );
 422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of ADC:                                                  */
 426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - resolution                                                          */
 427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - data alignment                                                      */
 428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - external trigger to start conversion                                */
 429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - external trigger polarity                                           */
 430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - continuous conversion mode                                          */
ARM GAS  /tmp/cckiGtEU.s 			page 9


 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - overrun                                                             */
 432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - discontinuous mode                                                  */
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
 435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      hadc->Init.DataAlign                               |
 436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      hadc->Init.Resolution                               );
 437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
 443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Enable the selected ADC regular discontinuous mode */
 444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the number of channels to be converted in discontinuous mode */
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                          ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
 448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
 449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
 450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* cannot be enabled simultaneously.                                  */
 453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_CONFIG);
 458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC error code to ADC IP internal error */
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
 462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable external trigger if trigger selection is different of software  */
 465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* start.                                                                 */
 466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       software start.                                                  */
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                        hadc->Init.ExternalTrigConvEdge                         );
 473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Parameters update conditioned to ADC state:                            */
 476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Parameters that can be updated when ADC is disabled or enabled without */
 477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* conversion on going on regular and injected groups:                    */
 478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - DMA continuous request                                              */
 479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - LowPowerAutoWait feature                                            */
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_CFGR_DMACFG  );
 484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                        ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/cckiGtEU.s 			page 10


 488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC configuration register with previous settings */
 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CFGR,
 491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_DISCNUM |
 492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_DISCEN  |
 493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_CONT    |
 494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_OVRMOD  |
 495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_EXTSEL  |
 496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_EXTEN   |
 497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_ALIGN   |
 498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CFGR_RES        ,
 499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                tmpCFGR              );
 500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of regular group sequencer:                              */
 503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   0x00: 1 channel converted (channel on regular rank 1U)                */
 505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   parameter "NbrOfConversion"                                          */   
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set number of ranks in regular group sequencer */     
 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR1                     ,
 514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR1_L                               ,
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
 518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set the ADC state */
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_ERROR_INTERNAL);
 536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR; 
 538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
ARM GAS  /tmp/cckiGtEU.s 			page 11


 545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
 546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
 547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
 548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
 550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
 551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (clock source APB2).
 555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         See commented example code below that can be copied and uncommented 
 556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         into HAL_ADC_MspInit().
 557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
 558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         coming from ADC state reset. Following calls to this function can
 560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         before HAL_ADC_Init().
 564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
 565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
 566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_InitTypeDef".
 567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         of structure "ADC_InitTypeDef".
 570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
 572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
 573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_cr1 = 0U;
 577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_cr2 = 0U;
 578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_sqr1 = 0U;
 579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check ADC handle */
 581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc == NULL)
 582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return HAL_ERROR;
 584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
 587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 12


 602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* at RCC top level.                                                        */
 605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Refer to header of this file for more details on clock enabling          */
 606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* procedure.                                                               */
 607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Actions performed only if ADC is coming from state reset:                */
 609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - Initialization of ADC MSP                                              */
 610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Initialize ADC error code */
 613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Allocate lock resource and initialize it */
 616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Lock = HAL_UNLOCKED;
 617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Init the low level hardware */
 619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_MspInit(hadc);
 620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
 624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       bit ADON.                                                          */
 627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* correctly completed.                                                     */
 632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (tmp_hal_status == HAL_OK)                                  )
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
 636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC parameters */
 641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of ADC:                                                  */
 643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - data alignment                                                      */
 644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - external trigger to start conversion                                */
 645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - external trigger polarity (always set to 1U, because needed for all  */
 646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*    triggers: external trigger of SW start)                             */
 647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - continuous conversion mode                                          */
 648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       a conversion on injected group would start a conversion also on  */
 651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       regular group after ADC enabling.                                */
 652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cr2 |= (hadc->Init.DataAlign                             |
 653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                 hadc->Init.ExternalTrigConv                      |
 654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode) );
 655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of ADC:                                                  */
 657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - scan mode                                                           */
 658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - discontinuous mode disable/enable                                   */
ARM GAS  /tmp/cckiGtEU.s 			page 13


 659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - discontinuous mode number of conversions                            */
 660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
 669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Enable the selected ADC regular discontinuous mode */
 670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the number of channels to be converted in discontinuous mode */
 671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                   ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
 674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
 675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
 676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* cannot be enabled simultaneously.                                  */
 679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC error code to ADC IP internal error */
 684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
 686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC configuration register CR1 with previous settings */
 689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CR1,
 690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR1_SCAN    |
 691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR1_DISCEN  |
 692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR1_DISCNUM    ,
 693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmp_cr1             );
 694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC configuration register CR2 with previous settings */
 696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CR2,
 697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR2_ALIGN   |
 698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR2_EXTSEL  |
 699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR2_EXTTRIG |
 700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CR2_CONT       ,
 701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmp_cr2             );
 702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of regular group sequencer:                              */
 704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   0x00: 1 channel converted (channel on regular rank 1U)                */
 706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*   parameter "NbrOfConversion"                                          */
 712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/cckiGtEU.s 			page 14


 716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SQR1,
 718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR1_L          ,
 719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                tmp_sqr1             );
 720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check back that ADC registers have effectively been configured to      */
 722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* measurement path bit (TSVREFE).                                        */
 727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                         ADC_CR2_TSVREFE                     ))
 731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          == tmp_cr2)
 732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to none */
 734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the ADC state */
 737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
 742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to ADC IP internal error */
 749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
 756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
 764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
 767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
 769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
 770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
 771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
 772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
ARM GAS  /tmp/cckiGtEU.s 			page 15


 773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         values, with deinitialization of the ADC MSP.
 775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         only if all ADCs sharing the same common group are disabled.
 777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         If this is not the case, reset of these common parameters reset is  
 778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         common group is still running.
 781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   For devices with several ADCs: Global reset of all ADCs sharing a
 782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         common group is possible.
 783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         As this function is intended to reset a single ADC, to not impact 
 784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         other ADCs, instructions for global reset of multiple ADCs have been
 785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         let commented below.
 786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         If needed, the example code can be copied and uncommented into
 787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function HAL_ADC_MspDeInit().
 788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
 790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
 791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
 796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check ADC handle */
 798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc == NULL)
 799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      return HAL_ERROR;
 801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
 804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set ADC state */
 807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Flush register JSQR: queue sequencer reset when injected queue         */
 816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* sequencer is enabled and ADC disabled.                                 */
 817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable injected queue sequencer after injected conversion stop         */
 818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the ADC peripheral */
 821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
 822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Change ADC state */
 827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->State = HAL_ADC_STATE_READY;
 828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
ARM GAS  /tmp/cckiGtEU.s 			page 16


 830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {      
 831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* correctly completed.                                                     */
 838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
 840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ========== Reset ADC registers ========== */
 841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register IER */
 842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_IT_JQOVF | ADC_IT_OVR  |
 844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_IT_JEOS  | ADC_IT_JEOC |
 845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_IT_EOSMP | ADC_IT_RDY                 ) );
 847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register ISR */
 849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_FLAG_JEOS  | ADC_FLAG_JEOC |
 852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_FLAG_EOSMP | ADC_FLAG_RDY                   ) );
 854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register CR */
 856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART are  */
 857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* in access mode "read-set": no direct reset applicable.                 */
 858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset Calibration mode to default setting (single ended):              */
 859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable voltage regulator:                                             */
 860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: Voltage regulator disable is conditioned to ADC state disabled:  */
 861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       already done above.                                              */
 862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: Voltage regulator disable is intended for power saving.          */
 863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Sequence to disable voltage regulator:                                 */
 864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 1. Set the intermediate state before moving the ADC voltage regulator  */
 865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*    to disable state.                                                   */
 866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Set ADVREGEN bits to 0x10U */
 868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
 870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register CFGR */
 871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |     
 873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  | 
 874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |     
 875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  | ADC_CFGR_ALIGN   |     
 876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CFGR_RES     | ADC_CFGR_DMACFG  | ADC_CFGR_DMAEN    );
 877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SMPR1 */
 879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                      ADC_SMPR1_SMP6 | ADC_SMPR1_SMP5 | ADC_SMPR1_SMP4 | 
 881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                      ADC_SMPR1_SMP3 | ADC_SMPR1_SMP2 | ADC_SMPR1_SMP1  );
 882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SMPR2 */
 884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                      ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 | 
 886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                      ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10  );
ARM GAS  /tmp/cckiGtEU.s 			page 17


 887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register TR1 */
 889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register TR2 */
 892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register TR3 */
 895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR1 */
 898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR1_SQ1 | ADC_SQR1_L);
 900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR2 */
 902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR3 */
 906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR4 */
 910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register DR */
 913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* bits in access mode read only, no direct reset applicable*/
 914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register OFR1 */
 916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register OFR2 */
 918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register OFR3 */
 920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register OFR4 */
 922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* bits in access mode read only, no direct reset applicable*/
 926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register AWD2CR */
 928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register AWD3CR */
 931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register DIFSEL */
 934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register CALFACT */
 937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 18


 944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ========== Reset common ADC registers ========== */
 945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Pointer to the common control register to which is belonging hadc      */
 947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
 948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* control registers)                                                     */
 949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set handle of the other ADC sharing the same common register           */
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Software is allowed to change common parameters only when all ADCs of  */
 955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* the common group are disabled.                                         */
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (tmphadcSharingSameCommonRegister.Instance == NULL) ||
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
 960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset configuration of ADC common register CCR:
 961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         - clock mode: CKMODE
 962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         - multimode related parameters: MDMA, DMACFG, DELAY, MULTI (set into
 963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           HAL_ADCEx_MultiModeConfigChannel() )
 964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         - internal measurement paths: Vbat, temperature sensor, Vref (set into
 965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
 966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       */
 967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_VBATEN |
 969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_TSEN   |
 970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_VREFEN |
 971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_MDMA   |
 972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_DMACFG |
 973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_DELAY  |
 974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CCR_MULTI   );
 975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
 976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Other ADC common registers (CSR, CDR) are in access mode read only,
 977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          no direct reset applicable */
 978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
 979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ========== Hard reset and clock disable of ADC peripheral ========== */
 982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Into HAL_ADC_MspDeInit(), ADC clock can be hard reset and disabled     */
 983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* at RCC top level.                                                      */
 984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Refer to header of this file for more details on clock disabling       */
 985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* procedure.                                                             */
 986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
 988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* DeInit the low level hardware */
 989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_MspDeInit(hadc);
 990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
 994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
 995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_RESET;
 996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
 997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
 998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
 999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
1000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cckiGtEU.s 			page 19


1001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
1003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
1004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
1006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
1007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
1008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
1009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
1011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Deinitialize the ADC peripheral registers to its default reset values.
1013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
1017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** { 
1018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check ADC handle */
1021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc == NULL)
1022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      return HAL_ERROR;
1024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set ADC state */
1030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
1031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
1033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
1034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
1038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* correctly completed.                                                     */
1039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
1040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ========== Reset ADC registers ========== */
1042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SR */
1043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
1044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
1045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                          
1046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register CR1 */
1047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
1048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
1049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
1050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
1051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register CR2 */
1053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
1054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
1055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
1056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
1057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_CR2_ADON                                          ));
ARM GAS  /tmp/cckiGtEU.s 			page 20


1058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SMPR1 */
1060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP18 | ADC_SMPR1_SMP17 | ADC_SMPR1_SMP15 | 
1061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_SMPR1_SMP15 | ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | 
1062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_SMPR1_SMP12 | ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10  ));
1063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SMPR2 */
1065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
1066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
1067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
1068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_SMPR2_SMP0                                    ));
1069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register JOFR1 */
1071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
1072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register JOFR2 */
1073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
1074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register JOFR3 */
1075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
1076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register JOFR4 */
1077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
1078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register HTR */
1080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
1081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register LTR */
1082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
1083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR1 */
1085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
1086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
1087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
1088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR1 */
1090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
1091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
1092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
1093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR2 */
1095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
1096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
1097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register SQR3 */
1099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
1100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
1101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register JSQR */
1103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
1104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
1105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
1106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register JSQR */
1108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
1109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
1110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
1111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset register DR */
1113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* bits in access mode read only, no direct reset applicable*/
1114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 21


1115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
1116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* bits in access mode read only, no direct reset applicable*/
1117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Reset VBAT measurement path, in case of enabled before by selecting    */
1119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* channel ADC_CHANNEL_VBAT. */
1120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_VBAT);
1121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ========== Hard reset ADC peripheral ========== */
1124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
1125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* forced to a similar state after device power-on.                       */
1126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
1127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
1128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*                                                                        */
1129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
1130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
1131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* DeInit the low level hardware */
1133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_MspDeInit(hadc);
1134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC error code to none */
1136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
1137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_RESET;
1140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
1144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
1145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
1147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
1148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
1150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @}
1153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 ADCEx Input and Output operation functions
1156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief    ADC Extended IO operation functions
1157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
1158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** @verbatim   
1159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  ===============================================================================
1160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              ##### IO operation functions #####
1161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  ===============================================================================  
1162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Start conversion of regular group.
1164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Stop conversion of regular group.
1165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Poll for conversion complete on regular group.
1166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Poll for conversion event.
1167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Get result of regular channel conversion.
1168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Start conversion of regular group and enable interruptions.
1169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Stop conversion of regular group and disable interruptions.
1170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Handle ADC interrupt request
1171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Start conversion of regular group and enable DMA transfer.
ARM GAS  /tmp/cckiGtEU.s 			page 22


1172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
1175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
1176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
1177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
1178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
1179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
1180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
1182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
1183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
1184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
1186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
1187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
1188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** @endverbatim
1190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
1191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
1194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
1195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
1196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
1197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group.
1199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
1200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs):
1201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if ADC is slave, ADC is enabled only (conversion is not started).
1202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if ADC is master, ADC is enabled and multimode conversion is started.
1203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process locked */
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
1218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
1220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
1221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
1223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
1224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
1226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Clear state bitfield related to regular group conversion results   */
1227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Set state bitfield related to regular operation                    */
1228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cckiGtEU.s 			page 23


1229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY);
1231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set group injected state (from auto-injection) and multimode state   */
1233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* for all cases of multimode: independent mode, multimode ADC master   */
1234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* or multimode ADC slave (for devices with several ADCs):              */
1235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state (ADC independent or master) */
1238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If conversions on group regular are also triggering group injected,*/
1241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* update ADC state.                                                  */
1242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
1243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
1244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
1246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
1248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state (ADC slave) */
1250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If conversions on group regular are also triggering group injected,*/
1253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* update ADC state.                                                  */
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
1256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
1258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* State machine update: Check if an injected conversion is ongoing */
1261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Reset ADC error code fields related to conversions on group regular*/
1264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
1267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Reset ADC all error code fields */
1269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
1270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
1273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
1276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear regular group conversion flag and overrun flag */
1278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* operations)                                                          */
1280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable conversion of regular group.                                  */
1283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.  */
1284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next */
1285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* trigger event.                                                       */
ARM GAS  /tmp/cckiGtEU.s 			page 24


1286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Case of multimode enabled (for devices with several ADCs):           */
1287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
1288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
1290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
1292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
1295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
1297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
1298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
1301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
1303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
1306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
1307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
1309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
1310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
1311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
1312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
1314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group.
1316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
1317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
1328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
1329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****    
1330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
1331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
1332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
1334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
1335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
1337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
1338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
1339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
1340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
1341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
1342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 25


1343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set group injected state (from auto-injection) */
1344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
1345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
1346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* State machine update: Check if an injected conversion is ongoing */
1352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC error code fields related to conversions on group regular */
1355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
1358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
1360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
1361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process unlocked */
1364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
1367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
1369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable conversion of regular group.                                    */
1373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
1374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
1375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
1376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
1381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
1384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
1386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
1391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
1392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
1394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
1396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
1397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
1398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
1399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
ARM GAS  /tmp/cckiGtEU.s 			page 26


1400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of both groups regular and injected,
1401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         disable ADC peripheral.
1402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC peripheral disable is forcing interruption of potential 
1403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion on injected group. If injected group is under use,
1404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         it should be preliminarily stopped using function
1405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_InjectedStop().
1406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To stop ADC conversion only on ADC group regular
1407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         while letting ADC group injected conversions running,
1408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADCEx_RegularStop().
1409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
1411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
1421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular and injected groups */
1423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
1424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
1427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
1429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
1430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
1432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
1433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
1435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
1436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
1438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
1442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
1443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
1445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
1446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
1448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
1449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
1450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
1451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
1453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC peripheral.
1456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC peripheral disable is forcing interruption of potential 
ARM GAS  /tmp/cckiGtEU.s 			page 27


1457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion on injected group. If injected group is under use, it
1458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
1461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
1469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
1470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
1471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
1473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
1474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
1477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
1478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
1481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
1483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
1486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
1487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
1489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
1490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
1492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
1494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
1495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
1496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
1497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Wait for regular group conversion to be completed.
1499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion) are cleared by this function, with an exception:
1501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
1502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         not cleared to not interfere with this feature until data register
1503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         is read using function HAL_ADC_GetValue().
1504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         performed on each conversion. Nevertheless, polling can still 
1509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         be performed on the complete sequence (ADC init
1510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
1513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
ARM GAS  /tmp/cckiGtEU.s 			page 28


1514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         checked and cleared depending on autodelay status (bit AUTDLY).     
1515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
1520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_Flag_EOC;
1521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
1522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_cfgr     = 0x0U;
1523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /* If end of conversion selected to end of sequence */
1528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
1529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
1531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If end of conversion selected to end of each conversion */
1533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else /* ADC_EOC_SINGLE_CONV */
1534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Verification that ADC configuration is compliant with polling for      */
1536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* each conversion:                                                       */
1537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* several ranks and polling for end of each conversion.                  */
1539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For code simplicity sake, this particular case is generalized to       */
1540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Pointer to the common control register to which is belonging hadc      */
1543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
1544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* control registers)                                                     */
1545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
1546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check DMA configuration, depending on MultiMode set or not */
1548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
1549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
1551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
1556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
1557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
1559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
1562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
1564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
1565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
1570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 29


1571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
1573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
1577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave      */
1581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* in function of multimode state (for devices with multimode             */
1582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* available).                                                            */
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
1586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
1588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
1590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get tick count */
1593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
1594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Wait until End of Conversion or End of Sequence flag is raised */
1596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
1597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
1599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
1600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to timeout */
1604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
1607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
1608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
1610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Update ADC state machine */
1615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group regular       */
1618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
1620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
1621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If End of Sequence is reached, disable interrupts */
1623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
1626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* ADSTART==0 (no conversion on going)                                  */
1627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
ARM GAS  /tmp/cckiGtEU.s 			page 30


1628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {        
1629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
1630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
1634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
1636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
1638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Change ADC state to error state */
1640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC error code to ADC IP internal error */
1643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Clear end of conversion flag of regular group if low power feature       */
1649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
1650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
1651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
1652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear regular group conversion flag */
1654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (EOC or EOS depending on HAL ADC initialization parameter) */
1655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
1656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC state */
1659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
1660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
1662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
1663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
1664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
1665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
1667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Wait for regular group conversion to be completed.
1669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in DMA mode.
1671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         performed on each conversion.
1673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   On STM32F37x devices, limitation in case of sequencer enabled
1674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (several ranks selected): polling cannot be done on each 
1675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion inside the sequence. In this case, polling is replaced by
1676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         wait for maximum conversion time.
1677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
1679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
1684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
ARM GAS  /tmp/cckiGtEU.s 			page 31


1685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled */
1686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
1687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0U;
1688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verification that ADC configuration is compliant with polling for        */
1693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* each conversion:                                                         */
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Particular case is ADC configured in DMA mode                            */
1695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
1696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
1698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process unlocked */
1701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
1702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return HAL_ERROR;
1704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get tick count */
1707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();
1708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
1710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion.                                                              */
1711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
1712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    with NbrOfConversion =1U), flag EOC is used to determine the           */
1713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
1714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
1715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    NbrOfConversion >=2U), flag EOC is set only at the end of the          */
1716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    sequence.                                                             */
1717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
1718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
1719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
1720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
1721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
1722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    be set.                                                               */
1723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
1724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
1725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
1727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
1728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
1730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
1731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
1734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
1735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
1737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Process unlocked */
1738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
1739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
1740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
1741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
ARM GAS  /tmp/cckiGtEU.s 			page 32


1742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
1746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
1748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Calculation of CPU cycles corresponding to ADC conversion cycles.      */
1749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Retrieve ADC clock prescaler and ADC maximum conversion cycles on all  */
1750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* channels.                                                              */
1751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
1752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
1753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Poll with maximum conversion time */
1755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
1756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
1758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
1759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
1761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
1762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
1763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
1765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Process unlocked */
1766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
1767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
1768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
1769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
1770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
1772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Clear regular group conversion flag */
1776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Update ADC state machine */
1779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group regular       */
1782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: On STM32F37x devices, in case of sequencer enabled                 */
1784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       at the end of the sequence.                                        */
1786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
1788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {   
1789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     { 
1794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC state */
ARM GAS  /tmp/cckiGtEU.s 			page 33


1799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
1800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
1802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
1804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
1805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
1806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
1807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Poll for conversion event.
1809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  EventType: the ADC event type.
1811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
1812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_AWD1_EVENT: ADC Analog watchdog 1 event (main analog watchdog, present on a
1813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_AWD2_EVENT: ADC Analog watchdog 2 event (additional analog watchdog, not pr
1814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_AWD3_EVENT: ADC Analog watchdog 3 event (additional analog watchdog, not pr
1815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
1816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_JQOVF_EVENT: ADC Injected context queue overflow event
1817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
1818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart; 
1823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get start tick count */
1829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
1830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check selected event flag */
1832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
1835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
1836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
1838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to timeout */
1840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
1843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
1844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
1846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   switch(EventType)
1852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Analog watchdog (level out of window) event */
1854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: In case of several analog watchdog enabled, if needed to know      */
1855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* which one triggered and on which ADCx, test ADC state of analog watchdog */
ARM GAS  /tmp/cckiGtEU.s 			page 34


1856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* flags HAL_ADC_STATE_AWD1/2U/3 using function "HAL_ADC_GetState()".        */
1857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For example:                                                             */
1858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)) "    */
1859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD2)) "    */
1860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD3)) "    */
1861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check analog watchdog 1 flag */
1862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   case ADC_AWD_EVENT:
1863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
1866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC analog watchdog flag */
1867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
1868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
1869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check analog watchdog 2 flag */
1871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   case ADC_AWD2_EVENT:
1872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
1874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC analog watchdog flag */
1876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
1877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
1878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check analog watchdog 3 flag */
1880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   case ADC_AWD3_EVENT:
1881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
1883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC analog watchdog flag */
1885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
1886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
1887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Injected context queue overflow event */
1889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   case ADC_JQOVF_EVENT:
1890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
1892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC error code to Injected context queue overflow */
1894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
1895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC Injected context queue overflow flag */
1897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
1898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
1899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
1900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Overrun event */
1901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   default: /* Case ADC_OVR_EVENT */
1902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* considered as an error.                                                */
1904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* overrun ")                                                             */
1906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
1909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to overrun */
1912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
ARM GAS  /tmp/cckiGtEU.s 			page 35


1913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC Overrun flag */
1916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
1918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC state */
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
1922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
1924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
1925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
1926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
1927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
1929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Poll for conversion event.
1931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  EventType: the ADC event type.
1933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
1934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
1936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
1940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart; 
1941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
1943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();   
1947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
1948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check selected event flag */
1949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
1951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
1952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
1953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
1954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
1956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to timeout */
1957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
1960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
1961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
1962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
1963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
1964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
1965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
1966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Analog watchdog (level out of window) event */
1968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
1969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
ARM GAS  /tmp/cckiGtEU.s 			page 36


1970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
1971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Clear ADC analog watchdog flag */
1972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
1974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC state */
1975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
1976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
1977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
1978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
1979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
1980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
1981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
1982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
1983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
1984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
1986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - EOC (end of conversion of regular group) or EOS (end of 
1987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence of regular group) depending on ADC initialization 
1988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            parameter "EOCSelection"
1989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun, depending on ADC initialization parameter "Overrun"
1990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
1991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
1992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function must be called for ADC slave first, then ADC master. 
1993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).  
1994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
1995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
1997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
1998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process locked */
2009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
2010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
2012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
2013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
2015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
2016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
2018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Clear state bitfield related to regular group conversion results   */
2019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Set state bitfield related to regular operation                    */
2020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
2021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
2022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY);
2023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set group injected state (from auto-injection) and multimode state   */
2025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* for all cases of multimode: independent mode, multimode ADC master   */
2026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* or multimode ADC slave (for devices with several ADCs):              */
ARM GAS  /tmp/cckiGtEU.s 			page 37


2027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
2028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state (ADC independent or master) */
2030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If conversions on group regular are also triggering group injected,*/
2033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* update ADC state.                                                  */
2034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
2035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
2037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
2040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state (ADC slave) */
2042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If conversions on group regular are also triggering group injected,*/
2045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* update ADC state.                                                  */
2046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
2047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* State machine update: Check if an injected conversion is ongoing */
2053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Reset ADC error code fields related to conversions on group regular*/
2056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
2057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
2059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Reset ADC all error code fields */
2061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
2062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
2065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
2066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
2067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
2068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear regular group conversion flag and overrun flag */
2070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC           */
2071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* operations)                                                          */
2072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
2073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable ADC end of conversion interrupt */
2075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable ADC overrun interrupt */  
2076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       switch(hadc->Init.EOCSelection)
2077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         case ADC_EOC_SEQ_CONV: 
2079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
2080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
2081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           break;
2082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* case ADC_EOC_SINGLE_CONV */
2083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         default:
ARM GAS  /tmp/cckiGtEU.s 			page 38


2084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
2085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           break;
2086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If overrun is set to overwrite previous data (default setting),      */
2089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* overrun interrupt is not activated (overrun event is not considered  */
2090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* as an error).                                                        */
2091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (cf ref manual "Managing conversions without using the DMA and       */
2092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* without overrun ")                                                   */
2093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
2094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
2096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable conversion of regular group.                                  */
2099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.  */
2100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next */
2101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* trigger event.                                                       */
2102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Case of multimode enabled (for devices with several ADCs):           */
2103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
2104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
2105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
2106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
2108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
2113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
2114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
2117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
2119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
2125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
2126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
2127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
2128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
2130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
2132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
2133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - EOC (end of conversion of regular group)
2134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
2135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
2137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
2139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/cckiGtEU.s 			page 39


2141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
2146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
2147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
2149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
2150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
2152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
2153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
2155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
2156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
2157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
2158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
2159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
2160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set group injected state (from auto-injection) */
2162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
2163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
2164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
2165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
2167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* State machine update: Check if an injected conversion is ongoing */
2170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC error code fields related to conversions on group regular */
2173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
2174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
2178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
2179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process unlocked */
2182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
2183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
2184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
2185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
2187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
2188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
2189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for regular group */
2191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
2192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable conversion of regular group.                                    */
2194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
2195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
2196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
2197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
ARM GAS  /tmp/cckiGtEU.s 			page 40


2198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
2200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
2201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
2205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
2206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
2213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
2215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
2216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
2217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
2218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of both groups regular and injected,
2220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         disable ADC peripheral.
2221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
2222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - EOC (end of conversion of regular group) and EOS (end of 
2223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence of regular group)
2224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
2225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC peripheral disable is forcing interruption of potential 
2226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion on injected group. If injected group is under use,
2227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         it should be preliminarily stopped using function
2228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_InjectedStop().
2229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To stop ADC conversion only on ADC group regular
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         while letting ADC group injected conversions running,
2231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADCEx_RegularStop_IT().
2232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
2234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
2236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
2243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
2244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular and injected groups */
2246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
2247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
2250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC end of conversion interrupt for regular group */
2252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
2253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
2254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 41


2255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
2256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
2257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
2259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
2260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
2262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
2263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
2265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
2269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
2270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
2275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
2276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
2277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
2278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
2280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
2282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable interrution of 
2283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         end-of-conversion, disable ADC peripheral.
2284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
2286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
2288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
2294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
2295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
2296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
2298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
2299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
2300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
2302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
2303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC end of conversion interrupt for regular group */
2305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
2306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
2308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
2309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
2311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 42


2312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
2314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
2315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
2320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
2322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
2323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
2324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
2325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
2327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         through DMA.
2328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
2329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
2330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
2331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
2332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
2333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
2334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function is for single-ADC mode only. For multimode, use the 
2335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         dedicated MultimodeStart function.
2336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
2338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
2339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
2340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
2342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process locked */
2352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
2353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Verification if multimode is disabled (for devices with several ADC)   */
2355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If multimode is enabled, dedicated function multimode conversion       */
2356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* start DMA must be used.                                                */
2357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
2358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable the ADC peripheral */
2360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(hadc);
2361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start conversion if ADC is effectively enabled */
2363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
2364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state                                                      */
2366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* - Clear state bitfield related to regular group conversion results */
2367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* - Set state bitfield related to regular operation                  */
2368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cckiGtEU.s 			page 43


2369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
2370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY);
2371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set group injected state (from auto-injection) and multimode state */
2373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* for all cases of multimode: independent mode, multimode ADC master */
2374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* or multimode ADC slave (for devices with several ADCs):            */
2375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
2376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC state (ADC independent or master) */
2378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
2380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* If conversions on group regular are also triggering group injected,*/
2381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* update ADC state.                                                  */
2382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
2383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
2384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
2385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
2386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else
2388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC state (ADC slave) */
2390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
2392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* If conversions on group regular are also triggering group injected,*/
2393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* update ADC state.                                                  */
2394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
2395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
2396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
2398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* State machine update: Check if an injected conversion is ongoing */
2401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Reset ADC error code fields related to conversions on group regular*/
2404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
2405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else
2407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Reset ADC all error code fields */
2409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_CLEAR_ERRORCODE(hadc);
2410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
2413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Unlock before starting ADC conversions: in case of potential         */
2414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* interruption, to let the process to ADC IRQ Handler.                 */
2415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
2416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the DMA transfer complete callback */
2419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
2420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the DMA half transfer complete callback */
2422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
2423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the DMA error callback */
2425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
ARM GAS  /tmp/cckiGtEU.s 			page 44


2426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****               
2428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC */
2429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* start (in case of SW start):                                       */
2430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Clear regular group conversion flag and overrun flag */
2432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* (To ensure of no unknown state from potential previous ADC         */
2433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* operations)                                                        */
2434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
2435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Enable ADC overrun interrupt */
2437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
2438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Enable ADC DMA mode */
2440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
2441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Start the DMA channel */
2443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
2444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  
2445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Enable conversion of regular group.                                */
2446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If software start has been selected, conversion starts immediately.*/
2447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If external trigger has been selected, conversion will start at    */
2448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* next trigger event.                                                */
2449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
2450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
2453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
2455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
2456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
2461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
2462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
2463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
2464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
2467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
2469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
2475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
2476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
2477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
2478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
2480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
2482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         through DMA.
ARM GAS  /tmp/cckiGtEU.s 			page 45


2483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
2484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
2485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
2486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
2487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
2488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
2489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
2491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
2492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
2493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
2495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
2502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
2503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
2505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
2506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
2508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
2509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
2511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
2512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
2513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
2514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
2515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
2516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set group injected state (from auto-injection) */
2518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
2519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
2520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
2521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
2523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* State machine update: Check if an injected conversion is ongoing */
2526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC error code fields related to conversions on group regular */
2529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
2530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
2534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
2535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process unlocked */
2538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
2539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
ARM GAS  /tmp/cckiGtEU.s 			page 46


2540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
2541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set the DMA transfer complete callback */
2543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
2544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        
2545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set the DMA half transfer complete callback */
2546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
2547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set the DMA error callback */
2549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
2550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
2553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* start (in case of SW start):                                           */
2554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
2556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
2557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
2558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable ADC DMA mode */
2560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
2561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Start the DMA channel */
2563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
2564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable conversion of regular group.                                    */
2566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
2567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
2568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
2569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
2570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
2571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
2572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
2574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
2575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
2579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
2580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
2587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
2589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
2590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
2591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
2592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of both groups regular and injected,
2594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         disable ADC DMA transfer, disable ADC peripheral.
2595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
2596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
ARM GAS  /tmp/cckiGtEU.s 			page 47


2597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
2598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
2599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC peripheral disable is forcing interruption of potential 
2600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion on injected group. If injected group is under use,
2601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         it should be preliminarily stopped using function
2602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_InjectedStop().
2603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To stop ADC conversion only on ADC group regular
2604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         while letting ADC group injected conversions running,
2605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADCEx_RegularStop_DMA().
2606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
2607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function is for single-ADC mode only. For multimode, use the 
2608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         dedicated MultimodeStop function.
2609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
2611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
2613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {  
2614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
2620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
2621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular and injected groups */
2623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
2624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
2627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
2629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
2630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
2632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
2633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
2634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
2636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
2637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
2639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
2640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
2643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
2644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
2646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
2647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* to retain a potential failing status.                                  */
2648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
2649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
2651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/cckiGtEU.s 			page 48


2654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
2655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
2658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
2659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
2661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
2662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
2664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
2669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
2670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
2675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
2676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
2677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
2678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
2680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
2682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
2683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         ADC peripheral.
2684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC peripheral disable is forcing interruption of potential 
2685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         conversion on injected group. If injected group is under use, it
2686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
2687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
2688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
2689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
2691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
2693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
2699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
2700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
2701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
2703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
2704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
2705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
2707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
2708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC DMA mode */
2710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
ARM GAS  /tmp/cckiGtEU.s 			page 49


2711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
2713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
2714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
2715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
2717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
2718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
2720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
2721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
2723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
2727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
2732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
2733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
2735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
2736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
2738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
2740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
2741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
2742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
2743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Get ADC regular group conversion result.
2745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group regular end of unitary conversion).
2747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag EOS 
2748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group regular end of sequence conversion).
2749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Occurrence of flag EOS rising:
2750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            to flag EOC.
2752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
2753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            both flags EOC and EOS are raised.
2755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
2756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
2758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval ADC group regular conversion data
2761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
2763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: ADC flag EOC is not cleared here by software because               */
ARM GAS  /tmp/cckiGtEU.s 			page 50


2768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       automatically cleared by hardware when reading register DR.        */
2769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
2771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return hadc->Instance->DR;
2772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
2774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
2775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
2776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
2777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
2779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Get ADC regular group conversion result.
2781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group regular end of unitary conversion).
2783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag EOS 
2784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group regular end of sequence conversion).
2785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Occurrence of flag EOS rising:
2786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            to flag EOC.
2788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
2789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            both flags EOC and EOS are raised.
2791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
2792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
2794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval ADC group regular conversion data
2797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
2799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
2804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       cleared by hardware when reading register DR.                      */
2805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
2807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return hadc->Instance->DR;
2808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
2809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
2810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
2812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
2813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
2814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
2815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
2816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Handles ADC interrupt request.  
2817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
2818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
2819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
2820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
2821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
2822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error *
2823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
2824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_cfgr     = 0x0U;
ARM GAS  /tmp/cckiGtEU.s 			page 51


2825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_cfgr_jqm = 0x0U;
2826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
2828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
2830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
2831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check End of Conversion flag for regular group ========== */
2833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
2834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
2835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update state machine on conversion status if not in error state */
2837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
2838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
2840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
2841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave    */
2844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* in function of multimode state (for devices with multimode           */
2845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* available).                                                          */
2846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
2847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
2849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
2853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable interruption if no further conversion upcoming by regular      */
2856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* external trigger or by continuous mode,                                */
2857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* and if scan sequence if completed.                                     */
2858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
2859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
2860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If End of Sequence is reached, disable interrupts */
2862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
2863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* ADSTART==0 (no conversion on going)                                */
2866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Disable ADC end of sequence conversion interrupt */
2869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* by overrun IRQ process below.                                    */
2872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
2874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC state */
2875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
2876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
2877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
2879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
2880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
2881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
ARM GAS  /tmp/cckiGtEU.s 			page 52


2882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else
2883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Update ADC state machine to error */
2885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC error code to ADC IP internal error */
2888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Conversion complete callback */
2894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: into callback, to determine if conversion has been triggered     */
2895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       from EOC or EOS, possibility to use:                             */
2896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
2897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_ConvCpltCallback(hadc);
2898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear regular group conversion flag */
2901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
2902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       conversion flags clear induces the release of the preserved      */
2903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       data.                                                            */
2904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
2905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
2906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
2907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
2910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check End of Conversion flag for injected group ========== */
2911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
2912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
2913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
2914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
2915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
2916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave      */
2918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* in function of multimode state (for devices with multimode             */
2919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* available).                                                            */
2920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
2921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
2923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
2925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
2926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
2927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable interruption if no further conversion upcoming by injected     */
2930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* external trigger or by automatic injected conversion with regular      */
2931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* group having no further conversion upcoming (same conditions as        */
2932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* regular group interruption disabling above),                           */
2933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* and if injected scan sequence is completed.                            */
2934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
2935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
2936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
2937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
2938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/cckiGtEU.s 			page 53


2939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If End of Sequence is reached, disable interrupts */
2940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
2941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
2942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Get relevant register CFGR in ADC instance of ADC master or slave  */
2944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* in function of multimode state (for devices with multimode         */
2945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* available).                                                        */
2946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
2947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
2949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else
2951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
2953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
2955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Particular case if injected contexts queue is enabled:             */
2956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* when the last context has been fully processed, JSQR is reset      */
2957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* by the hardware. Even if no injected conversion is planned to come */
2958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* (queue empty, triggers are ignored), it can start again            */
2959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* immediately after setting a new context (JADSTART is still set).   */
2960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Therefore, state of HAL ADC injected group is kept to busy.        */
2961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
2962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
2963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
2964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* JADSTART==0 (no conversion on going)                             */
2965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
2966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
2967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             /* Disable ADC end of sequence conversion interrupt  */
2968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
2969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             
2970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             /* Set ADC state */
2971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
2972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
2973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
2974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             { 
2975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
2976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             }
2977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
2978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           else
2979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
2980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             /* Update ADC state machine to error */
2981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
2983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             /* Set ADC error code to ADC IP internal error */
2984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
2986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
2987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
2988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
2989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
2990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Conversion complete callback */
2991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: into callback, to determine if conversion has been triggered     */
2992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       from JEOC or JEOS, possibility to use:                           */
2993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
2994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
2995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 54


2996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
2997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
2998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
2999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check analog watchdog 1 flag ========== */
3001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
3002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
3005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Level out of window 1 callback */
3007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
3008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC analog watchdog flag */ 
3009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
3010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check analog watchdog 2 flag ========== */
3013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
3014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
3017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Level out of window 2 callback */
3019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
3020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC analog watchdog flag */ 
3021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
3022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   } 
3023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check analog watchdog 3 flag ========== */
3025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
3026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
3029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Level out of window 3 callback */
3031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
3032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear ADC analog watchdog flag */ 
3033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
3034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check Overrun flag ========== */
3037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
3038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If overrun is set to overwrite previous data (default setting),        */
3040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* overrun event is not considered as an error.                           */
3041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (cf ref manual "Managing conversions without using the DMA and         */
3042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* without overrun ")                                                     */
3043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Exception for usage with DMA overrun event always considered as an     */
3044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* error.                                                                 */
3045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
3046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       overrun_error = 1U;
3048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
3050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Pointer to the common control register to which is belonging hadc    */
3052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
ARM GAS  /tmp/cckiGtEU.s 			page 55


3053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* control registers)                                                   */
3054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpADC_Common = ADC_COMMON_REGISTER(hadc);
3055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check DMA configuration, depending on MultiMode set or not */
3057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
3058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
3060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
3061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           overrun_error = 1U;  
3062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
3063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
3065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
3067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
3068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
3069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           overrun_error = 1U;  
3070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
3071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (overrun_error == 1U)
3075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
3077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
3078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to ADC IP internal error */
3080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
3081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Error callback */ 
3083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_ErrorCallback(hadc);
3084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear the Overrun flag */
3087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
3088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check Injected context queue overflow flag ========== */
3093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
3094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
3096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
3097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to ADC IP internal error */
3099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
3100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear the Injected context queue overflow flag */
3102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
3103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Error callback */ 
3105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
3106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
ARM GAS  /tmp/cckiGtEU.s 			page 56


3110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
3115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Handles ADC interrupt request  
3117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
3119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
3121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
3125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
3126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check End of Conversion flag for regular group ========== */
3129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
3130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
3132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update state machine on conversion status if not in error state */
3134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
3135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
3137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
3138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Determine whether any further conversion upcoming on group regular   */
3141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
3142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: On STM32F37x devices, in case of sequencer enabled             */
3143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       (several ranks selected), end of conversion flag is raised     */
3144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       at the end of the sequence.                                    */
3145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)       && 
3146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (hadc->Init.ContinuousConvMode == DISABLE)  )
3147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable ADC end of single conversion interrupt  */
3149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
3150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
3152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
3153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
3155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
3156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
3158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Conversion complete callback */
3161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_ConvCpltCallback(hadc);
3162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear regular group conversion flag */
3164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
3165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 57


3167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check End of Conversion flag for injected group ========== */
3169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
3170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
3172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update state machine on conversion status if not in error state */
3174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
3175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
3177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
3178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Determine whether any further conversion upcoming on group injected  */
3181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* by external trigger, scan sequence on going or by automatic injected */
3182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* conversion from group regular (same conditions as group regular      */
3183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* interruption disabling above).                                       */
3184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: On STM32F37x devices, in case of sequencer enabled             */
3185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       (several ranks selected), end of conversion flag is raised     */
3186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       at the end of the sequence.                                    */
3187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
3188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
3189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
3190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (hadc->Init.ContinuousConvMode == DISABLE)  )         )   )
3191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable ADC end of single conversion interrupt  */
3193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
3194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
3196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
3197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
3199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         { 
3200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
3202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Conversion complete callback */ 
3205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
3206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear injected group conversion flag */
3208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
3209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****    
3212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ========== Check Analog watchdog flags ========== */
3213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
3214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
3216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
3218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
3219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Level out of window callback */ 
3221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
3222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear the ADC analog watchdog flag */
ARM GAS  /tmp/cckiGtEU.s 			page 58


3224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
3225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
3230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
3233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
3234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
3235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
3236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
3238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
3239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
3240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  SingleDiff: Selection of single-ended or differential input
3242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
3243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
3244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
3245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
3246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
3248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
3251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
3255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
3257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
3258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****    
3259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Calibration prerequisite: ADC must be disabled. */
3260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****    
3261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable the ADC (if not already disabled) */
3262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Disable(hadc);
3263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
3265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
3266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Change ADC state */
3268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_READY;
3269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Select calibration mode single ended or differential ended */
3271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
3272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
3273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->Instance->CR |= ADC_CR_ADCALDIF;
3275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Start ADC calibration */
3278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Instance->CR |= ADC_CR_ADCAL;
3279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
ARM GAS  /tmp/cckiGtEU.s 			page 59


3281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait for calibration completion */
3283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
3284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
3286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
3288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
3289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
3290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
3291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
3293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
3294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
3296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
3301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
3302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
3303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
3307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
3308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
3311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
3312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
3317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
3322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
3324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
3325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
3326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         During calibration process, ADC is enabled. ADC is let enabled at
3327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         the completion of this function.
3328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
3330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
3332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
3335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
3336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
ARM GAS  /tmp/cckiGtEU.s 			page 60


3338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
3341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
3342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Calibration prerequisite:                                             */
3344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
3345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      mode before ADC enable                                              */
3346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups       */
3347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
3348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
3349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
3351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
3352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
3355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
3356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
3357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait two ADC clock cycles */
3359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
3360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       wait_loop_index++;
3362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Enable the ADC peripheral */
3365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_Enable(hadc);
3366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 3. Resets ADC calibration registers */  
3369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
3370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
3372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait for calibration reset completion */
3374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
3375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
3377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
3379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
3380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
3381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
3382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
3384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
3385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
3387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 4. Start ADC calibration */
3392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
3393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
ARM GAS  /tmp/cckiGtEU.s 			page 61


3395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait for calibration completion */
3397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
3398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
3400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
3402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
3403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
3404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
3405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
3407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
3408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
3410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
3415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
3416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
3417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
3420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
3421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
3427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
3429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
3430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
3431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
3432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Get the calibration factor from automatic conversion result
3434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  SingleDiff: Selection of single-ended or differential input
3436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
3437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
3438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
3439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval Converted value
3440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
3442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff)); 
3446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return the selected ADC calibration value */ 
3448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
3449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return ADC_CALFACT_DIFF_GET(hadc->Instance->CALFACT);
3451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 62


3452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return ((hadc->Instance->CALFACT) & ADC_CALFACT_CALFACT_S);
3455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
3458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
3463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
3464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
3465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
3466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Set the calibration factor to overwrite automatic conversion result. ADC must be enable
3468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  SingleDiff: Selection of single-ended or differential input
3470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
3471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
3472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
3473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  CalibrationFactor: Calibration factor (coded on 7 bits maximum)
3474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL state
3475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef* hadc, uint32_t SingleDiff, uint
3477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff)); 
3483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_CALFACT(CalibrationFactor)); 
3484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
3486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
3487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verification of hardware constraints before modifying the calibration    */
3489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* factors register: ADC must be enabled, no conversion on going.           */
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_ENABLE(hadc) != RESET)                              &&
3491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)   )
3492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set the selected ADC calibration value */ 
3494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
3495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CALFACT                ,
3497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CALFACT_CALFACT_D                  ,
3498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CALFACT_DIFF_SET(CalibrationFactor) );
3499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
3501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CALFACT,
3503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CALFACT_CALFACT_S  ,
3504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  CalibrationFactor       );
3505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
ARM GAS  /tmp/cckiGtEU.s 			page 63


3509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
3510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
3511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC error code to ADC IP internal error */
3513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
3517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
3518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
3523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
3528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
3529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
3530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
3531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
3533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
3534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
3535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function must be called for ADC slave first, then ADC master. 
3536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).  
3537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
3538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
3540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
3542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
3549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
3550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process locked */
3552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
3553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
3555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
3556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start conversion if ADC is effectively enabled */
3558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
3559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
3561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
3562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
3563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
3564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
3565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
ARM GAS  /tmp/cckiGtEU.s 			page 64


3566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Case of independent mode or multimode(for devices with several ADCs):*/
3568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set multimode state.                                                 */
3569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
3570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
3572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
3574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
3576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
3579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: On this device, there is no ADC error code fields related to   */
3580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       conversions on group injected only. In case of conversion on   */
3581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       going on group regular, no error code is reset.                */
3582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
3583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Reset ADC all error code fields */
3585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
3586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
3589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
3590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
3591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
3592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear injected group conversion flag */
3594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC           */
3595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* operations)                                                          */
3596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
3597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected           */
3599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* conversion is disabled.                                              */
3600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.  */
3601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next */
3602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* trigger event.                                                       */
3603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Case of multimode enabled (for devices with several ADCs):           */
3604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
3605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
3606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
3607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
3608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
3610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
3613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
3615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
3616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
3621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
ARM GAS  /tmp/cckiGtEU.s 			page 65


3623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
3627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
3632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
3634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
3635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
3637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
3639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
3646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
3647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
3649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
3650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
3652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
3653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
3655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
3656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
3657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
3658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
3659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
3660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
3662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
3663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
3664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
3665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
3666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
3668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
3669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process unlocked */
3672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
3673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
3674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
3675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
3677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
3678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
3679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 66


3680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
3681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
3682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
3683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
3684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
3685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
3686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
3687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
3688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_INJECTED(hadc)               && 
3689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
3690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on injected group with SW start */
3692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
3693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
3695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on injected group with external trigger */
3697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
3698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
3705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
3707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
3708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
3709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
3710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC group injected conversion (potential conversion on going
3712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group regular is not impacted), disable ADC peripheral
3713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group regular.
3714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To stop ADC conversion of both groups regular and injected and to
3715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         to disable ADC peripheral, instead of using 2 functions
3716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_RegularStop() and @ref HAL_ADCEx_InjectedStop(),
3717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADC_Stop().
3718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
3719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
3720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
3721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function must be called for ADC master first, then ADC slave.
3722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled. 
3723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
3724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
3725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
3726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
3728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
3730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
ARM GAS  /tmp/cckiGtEU.s 			page 67


3737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
3738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential ADC conversion on going and disable ADC peripheral        */
3740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conditioned to:                                                          */
3741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
3742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC injected group conversion stop:                                */
3743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   On this STM32 family, conversion on the other group                    */
3744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   (group regular) can continue (groups regular and injected              */
3745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversion stop commands are independent)                              */
3746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC disable:                                                       */
3747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   No conversion on the other group (group regular) must be intended to   */
3748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (groups regular and injected are both impacted by             */
3749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   ADC disable)                                                           */
3750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO))
3751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 1. Stop potential conversion on going on injected group only. */
3753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
3754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC peripheral if conversion on ADC group injected is          */
3756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* effectively stopped and if no conversion on the other group            */
3757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (ADC group regular) is intended to continue.                           */
3758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
3759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {      
3760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
3761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          ((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)    )
3762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* 2. Disable the ADC peripheral */
3764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
3765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Check if ADC is effectively disabled */
3767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
3768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
3769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC state */
3770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State,
3771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                             HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
3772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                             HAL_ADC_STATE_READY);
3773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
3774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Conversion on ADC group injected group is stopped, but ADC is not    */
3776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* disabled since conversion on ADC group regular is still on going.    */
3777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
3778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
3780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
3781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
3787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
3788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
3789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
3790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
3793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 68


3794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
3799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
3804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
3806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         no regular conversion is on going.
3807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
3808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
3809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
3810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
3811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
3813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
3815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
3822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
3823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
3825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
3826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
3827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
3828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   are common)                                                            */
3829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
3830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
3831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
3832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
3834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
3835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
3836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
3838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
3839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
3841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
3842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
3843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
3844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
3849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
3850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
ARM GAS  /tmp/cckiGtEU.s 			page 69


3851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
3852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
3855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
3856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
3858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
3859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
3861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
3863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
3864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
3865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
3866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
3868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
3870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
3871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
3873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
3875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_Flag_EOC;
3876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_cfgr = 0x00000000U;
3877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If end of conversion selected to end of sequence */
3882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
3883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = ADC_FLAG_JEOS;
3885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If end of conversion selected to end of each conversion */
3887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else /* ADC_EOC_SINGLE_CONV */
3888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = (ADC_FLAG_JEOC | ADC_FLAG_JEOS);
3890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave      */
3893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* in function of multimode state (for devices with multimode             */
3894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* available).                                                            */
3895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
3896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
3898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
3900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
3902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get tick count */
3905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
3906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
3907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Wait until End of Conversion flag is raised */
ARM GAS  /tmp/cckiGtEU.s 			page 70


3908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
3909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
3911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
3912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
3914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
3915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to timeout */
3916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
3917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
3919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
3920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
3921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
3922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
3923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Update ADC state machine */
3927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
3928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
3930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
3931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* from group regular.                                                      */
3932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
3933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
3934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
3935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
3936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
3938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
3939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
3940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
3941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
3942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
3944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Clear end of conversion flag of injected group if low power feature      */
3947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* "Auto Wait" is disabled, to not interfere with this feature until data   */
3948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* register is read using function HAL_ADC_GetValue().                      */
3949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
3950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
3951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
3952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (JEOC or JEOS depending on HAL ADC initialization parameter) */
3953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
3954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
3955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC state */
3957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
3958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
3959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
3960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
3961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
3962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
3963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
ARM GAS  /tmp/cckiGtEU.s 			page 71


3965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
3966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
3967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
3968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
3969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
3970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
3971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
3972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
3973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart = 0U;
3974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
3975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled */
3976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max =0U;
3977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles =0U;
3978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  
3979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
3980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
3982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get tick count */
3983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
3984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
3985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
3986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion.                                                              */
3987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
3988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
3989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
3990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1U), flag JEOC is used to determine the      */
3991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
3992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
3993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2U), flag JEOC is set only at the end of the */
3994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    sequence.                                                             */
3995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
3996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
3997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
3998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
3999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    As flag JEOC is not set after each conversion, no timeout status can  */
4000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    be set.                                                               */
4001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
4002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
4004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
4005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
4007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
4008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
4010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
4011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
4012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
4013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
4014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Process unlocked */
4015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
4016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
4017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
4018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
4019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 72


4022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
4023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
4025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Calculation of CPU cycles corresponding to ADC conversion cycles.      */
4026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Retrieve ADC clock prescaler and ADC maximum conversion cycles on all  */
4027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* channels.                                                              */
4028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE();
4029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
4030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Poll with maximum conversion time */
4032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
4033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
4035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
4036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
4038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
4039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
4040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
4041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
4042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Process unlocked */
4043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
4044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
4045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
4046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
4047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
4049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Clear injected group conversion flag (and regular conversion flag raised simultaneously) */
4054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
4055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Update ADC state machine */
4057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
4058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
4060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
4061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* from group regular.                                                      */
4062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
4063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
4064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
4065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
4066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
4068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
4069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
4071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
4073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC state */
4077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
4078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
ARM GAS  /tmp/cckiGtEU.s 			page 73


4079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
4080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
4082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
4083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
4084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
4085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
4087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
4088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group) or JEOS (end of 
4089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence of injected group) depending on ADC initialization 
4090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            parameter "EOCSelection"
4091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
4092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
4093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function must be called for ADC slave first, then ADC master. 
4094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).  
4095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
4096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
4098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
4100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
4107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
4108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process locked */
4110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
4111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
4113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
4114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
4116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start conversion if ADC is effectively enabled */
4117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
4120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
4121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
4122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
4123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
4124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
4125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Case of independent mode or multimode(for devices with several ADCs):*/
4127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set multimode state.                                                 */
4128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
4129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
4131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
4133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
4135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
ARM GAS  /tmp/cckiGtEU.s 			page 74


4136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
4138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: On this device, there is no ADC error code fields related to   */
4139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       conversions on group injected only. In case of conversion on   */
4140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       going on group regular, no error code is reset.                */
4141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
4142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Reset ADC all error code fields */
4144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
4145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
4148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
4149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
4150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
4151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear injected group conversion flag */
4153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC           */
4154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* operations)                                                          */
4155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
4156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable ADC Injected context queue overflow interrupt if this feature */
4158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* is enabled.                                                          */
4159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
4160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
4162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable ADC end of conversion interrupt */
4165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       switch(hadc->Init.EOCSelection)
4166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         case ADC_EOC_SEQ_CONV: 
4168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
4169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
4170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           break;
4171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* case ADC_EOC_SINGLE_CONV */
4172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         default:
4173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
4174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           break;
4175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected           */
4178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* conversion is disabled.                                              */
4179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.  */
4180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next */
4181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* trigger event.                                                       */
4182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Case of multimode enabled (for devices with several ADCs):           */
4183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
4184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
4185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
4186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
4187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
4189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
4192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/cckiGtEU.s 			page 75


4193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
4194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
4195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
4198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
4200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
4206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
4207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
4208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
4209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
4211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
4213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
4214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
4215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
4216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
4218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
4220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
4230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
4231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
4233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
4234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
4236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
4237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
4238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
4239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
4240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
4241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
4243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
4244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
4245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
4246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
4247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
4249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 76


4250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Process unlocked */
4253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
4254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
4255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
4256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC error code to none */
4258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
4259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
4261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
4262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
4263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
4265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
4266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
4268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
4269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
4270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
4271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
4272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* trigger event.                                                         */
4273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
4274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
4275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_INJECTED(hadc)              && 
4276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
4277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on injected group with SW start */
4279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
4280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
4282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start ADC conversion on injected group with external trigger */
4284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
4285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
4292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
4294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
4295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
4296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
4297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC group injected conversion (potential conversion on going
4299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group regular is not impacted), disable ADC peripheral
4300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group regular.
4301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
4302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group) and JEOS (end of 
4303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence of injected group)
4304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To stop ADC conversion of both groups regular and injected and to
4305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         to disable ADC peripheral, instead of using 2 functions
4306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_RegularStop() and @ref HAL_ADCEx_InjectedStop(),
ARM GAS  /tmp/cckiGtEU.s 			page 77


4307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADC_Stop().
4308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
4309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
4310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
4311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function must be called for ADC master first, then ADC slave.
4312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled. 
4313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
4314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
4315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
4316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
4318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
4320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** { 
4321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential ADC conversion on going and disable ADC peripheral        */
4330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conditioned to:                                                          */
4331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
4332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC injected group conversion stop:                                */
4333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   On this STM32 family, conversion on the other group                    */
4334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   (group regular) can continue (groups regular and injected              */
4335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversion stop commands are independent)                              */
4336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC disable:                                                       */
4337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   No conversion on the other group (group regular) must be intended to   */
4338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (groups regular and injected are both impacted by             */
4339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   ADC disable)                                                           */
4340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO))
4341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 1. Stop potential conversion on going on injected group only. */
4343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
4344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC peripheral if conversion on ADC group injected is          */
4346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* effectively stopped and if no conversion on the other group            */
4347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (ADC group regular) is intended to continue.                           */
4348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
4351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_IT_JQOVF));
4352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
4354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          ((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)    )
4355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* 2. Disable the ADC peripheral */
4357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
4358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
4359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Check if ADC is effectively disabled */
4360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
4361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
4362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC state */
4363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cckiGtEU.s 			page 78


4364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                             HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
4365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                             HAL_ADC_STATE_READY);
4366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
4367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Conversion on ADC group injected group is stopped, but ADC is not    */
4369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* disabled since conversion on ADC group regular is still on going.    */
4370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
4371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC state */
4373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
4374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
4378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
4380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
4381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
4383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
4386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
4387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
4392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
4393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
4394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
4395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
4397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
4399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
4400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         is on going.
4401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
4402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
4403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
4404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
4406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
4408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
4418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
4419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
4420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
ARM GAS  /tmp/cckiGtEU.s 			page 79


4421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   are common)                                                            */
4422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
4423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
4424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
4425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
4427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
4428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
4429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
4431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
4434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
4435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
4437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
4438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
4439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
4440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
4443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
4445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
4446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
4448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
4451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
4452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
4457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
4459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
4460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
4461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  With ADC configured in multimode, for ADC master:
4463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Enables ADC, starts conversion of regular group and transfers result
4464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         through DMA.
4465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Multimode must have been previously configured using 
4466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
4467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
4468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
4469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
4470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
4471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
4472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   ADC slave must be preliminarily enabled using single-mode  
4473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_Start() function.
4474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
4475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
4476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
4477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
ARM GAS  /tmp/cckiGtEU.s 			page 80


4478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
4480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
4483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
4484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
4487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
4488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
4489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
4490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
4495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (check on ADC master only) */
4496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
4497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
4499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
4500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
4501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
4503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
4505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
4506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
4508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
4509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
4511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC peripherals: master and slave (in case if not already   */
4515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* enabled previously)                                                    */
4516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
4517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(&tmphadcSlave);
4520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Start conversion all ADCs of multimode are effectively enabled */
4523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state (ADC master)                                           */
4526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Clear state bitfield related to regular group conversion results   */
4527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* - Set state bitfield related to regular operation                    */
4528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
4529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
4530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY);
4531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
4532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If conversions on group regular are also triggering group injected,  */
4533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* update ADC state.                                                    */
4534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
ARM GAS  /tmp/cckiGtEU.s 			page 81


4535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
4537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
4540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
4541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
4542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
4543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to none */
4545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
4546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the DMA transfer complete callback */
4549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
4550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          
4551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the DMA half transfer complete callback */
4552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
4553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the DMA error callback */
4555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
4556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Pointer to the common control register to which is belonging hadc    */
4558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
4559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* control registers)                                                   */
4560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpADC_Common = ADC_COMMON_REGISTER(hadc);
4561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
4564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* start (in case of SW start):                                         */
4565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear regular group conversion flag and overrun flag */
4567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
4568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
4569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable ADC overrun interrupt */
4571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
4572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Start the DMA channel */
4574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
4575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
4576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable conversion of regular group.                                  */
4577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.  */
4578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next */
4579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* trigger event.                                                       */
4580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
4581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
4584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
4586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
4587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
4590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
ARM GAS  /tmp/cckiGtEU.s 			page 82


4592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  With ADC configured in multimode, for ADC master:
4600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Stop ADC group regular conversion (potential conversion on going
4601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected is not impacted),
4602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         disable ADC DMA transfer, disable ADC peripheral
4603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group injected.
4604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
4605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
4606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
4607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
4608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, this function also stop conversion
4609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected.
4610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode
4611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel() ), ADC must be 
4612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
4613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
4614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
4615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel of ADC slave.
4616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
4617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
4618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
4620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
4623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
4624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
4627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular and          */
4632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    injected groups.                                                      */
4633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
4634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
4636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
4637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
4639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
4640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
4641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
4643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine (ADC master) to error */
4645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
4646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
4648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 83


4649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
4651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
4654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
4655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 1. Wait until ADSTP=0 for ADC master and ADC slave */
4657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
4658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
4660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave)   )
4661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
4663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine (ADC master) to error */
4665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
4666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
4667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
4668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
4669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
4670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
4671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
4675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
4676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: In case of ADC slave using its own DMA channel (multimode        */
4677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       parameter "DMAAccessMode" set to disabled):                      */
4678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       DMA channel of ADC slave should stopped after this function with */
4679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       function HAL_ADC_Stop_DMA.                                       */
4680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
4681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
4683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
4684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
4686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
4687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
4690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
4691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave */
4695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
4696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* to retain a potential failing status.                                  */
4697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if ADC are effectively disabled */
4700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) != HAL_ERROR)          &&
4701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_Disable(&tmphadcSlave) != HAL_ERROR)   )
4702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
4703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_OK;
4704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
4705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Change ADC state (ADC master) */
ARM GAS  /tmp/cckiGtEU.s 			page 84


4706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
4707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
4708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
4709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
4710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
4712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* In case of error, attempt to disable ADC instances anyway */
4714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
4715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(&tmphadcSlave);
4716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
4717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine (ADC master) to error */
4718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
4719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
4724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
4725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Returns the last ADC Master&Slave regular conversions results data
4732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in the selected multi mode.
4733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Reading register CDR does not clear flag ADC flag EOC
4734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group regular end of unitary conversion),
4735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         as it is the case for independent mode data register.
4736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
4737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval The converted data value.
4738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
4740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
4742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
4745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Pointer to the common control register to which is belonging hadc        */
4747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common     */
4748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* control registers)                                                       */
4749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmpADC_Common = ADC_COMMON_REGISTER(hadc);
4750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return the multi mode conversion value */
4752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmpADC_Common->CDR;
4753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
4755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
4756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx    */
4757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
4759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
4760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
4761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
4762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
ARM GAS  /tmp/cckiGtEU.s 			page 85


4763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
4764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
4765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
4766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
4767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
4768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
4769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
4770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            to flag JEOC.
4771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
4772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
4773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
4774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
4775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
4776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
4777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
4778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
4779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
4780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
4781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
4783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
4784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
4785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
4786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
4787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
4788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
4789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
4791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0U;
4793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
4797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: ADC flag JEOC is not cleared here by software because              */
4799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       automatically cleared by hardware when reading register JDRx.      */
4800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
4802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   switch(InjectedRank)
4803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {  
4804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
4805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
4806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
4808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
4809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
4811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
4812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
4814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     default:
4815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
4816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
ARM GAS  /tmp/cckiGtEU.s 			page 86


4820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_jdr;
4821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
4823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
4824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
4825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
4826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
4828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
4830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
4831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
4832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
4833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
4834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
4835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
4836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            to flag JEOC.
4837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
4838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
4839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
4840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
4841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
4842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
4843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
4844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
4845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
4846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
4847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
4849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
4850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
4851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
4852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
4853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
4854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
4855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
4857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0U;
4859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
4863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
4865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   switch(InjectedRank)
4866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {  
4867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
4868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
4869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
4871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
4872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
4874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
4875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
ARM GAS  /tmp/cckiGtEU.s 			page 87


4877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     default:
4878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
4879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
4880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
4883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_jdr;
4884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
4886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
4888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
4889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
4890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
4891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC group regular conversion (potential conversion on going
4893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected is not impacted), disable ADC peripheral
4894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group injected.
4895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To stop ADC conversion of both groups regular and injected and to
4896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         to disable ADC peripheral, instead of using 2 functions
4897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_RegularStop() and @ref HAL_ADCEx_InjectedStop(),
4898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADC_Stop().
4899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, this function also stop conversion
4900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected.
4901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
4903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop(ADC_HandleTypeDef* hadc)
4905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential ADC conversion on going and disable ADC peripheral        */
4915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conditioned to:                                                          */
4916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC regular group conversion stop:                                 */
4917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   On this STM32 family, conversion on the other group                    */
4918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   (group injected) can continue (groups regular and injected             */
4919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversion stop commands are independent)                              */
4920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC disable:                                                       */
4921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   No conversion on the other group (group injected) must be intended to  */
4922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (groups regular and injected are both impacted by             */
4923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   ADC disable)                                                           */
4924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular group only */
4926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
4927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversion on ADC group regular is             */
4929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* effectively stopped and if no conversion on the other group              */
4930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (ADC group injected) is intended to continue.                            */
4931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
4932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
4933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
ARM GAS  /tmp/cckiGtEU.s 			page 88


4934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
4935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
4936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
4937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
4938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
4939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
4940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
4941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
4942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
4943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
4944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
4945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Conversion on ADC group regular group is stopped, but ADC is not         */
4947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* disabled since conversion on ADC group injected is still on going.       */
4948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
4949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
4950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
4951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
4952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
4953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
4955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
4956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
4958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
4959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
4960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
4961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
4962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC group regular conversion (potential conversion on going
4963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected is not impacted), disable ADC peripheral
4964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group injected.
4965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
4966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - EOC (end of conversion of regular group) and EOS (end of 
4967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            sequence of regular group)
4968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
4969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To stop ADC conversion of both groups regular and injected and to
4970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         to disable ADC peripheral, instead of using 2 functions
4971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_RegularStop() and @ref HAL_ADCEx_InjectedStop(),
4972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADC_Stop().
4973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, this function also stop conversion
4974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected.
4975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
4976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
4977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
4978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(ADC_HandleTypeDef* hadc)
4979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
4980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
4981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
4983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
4984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
4986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
4987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential ADC conversion on going and disable ADC peripheral        */
4989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conditioned to:                                                          */
4990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC regular group conversion stop:                                 */
ARM GAS  /tmp/cckiGtEU.s 			page 89


4991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   On this STM32 family, conversion on the other group                    */
4992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   (group injected) can continue (groups regular and injected             */
4993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversion stop commands are independent)                              */
4994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC disable:                                                       */
4995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   No conversion on the other group (group injected) must be intended to  */
4996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (groups regular and injected are both impacted by             */
4997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   ADC disable)                                                           */
4998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
4999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular group only */
5000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
5001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversion on ADC group regular is             */
5003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* effectively stopped and if no conversion on the other group              */
5004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (ADC group injected) is intended to continue.                            */
5005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
5006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
5007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC end of conversion interrupt for regular group */
5009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
5010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
5011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
5013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
5014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
5016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
5017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
5019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
5020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
5021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
5022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Conversion on ADC group regular group is stopped, but ADC is not         */
5025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* disabled since conversion on ADC group injected is still on going.       */
5026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
5029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
5030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
5033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
5034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
5036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
5037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC group regular conversion (potential conversion on going
5041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected is not impacted), 
5042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         disable ADC DMA transfer, disable ADC peripheral
5043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group injected.
5044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
5045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
5046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
5047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
ARM GAS  /tmp/cckiGtEU.s 			page 90


5048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To stop ADC conversion of both groups regular and injected and to
5049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         to disable ADC peripheral, instead of using 2 functions
5050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_RegularStop() and @ref HAL_ADCEx_InjectedStop(),
5051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         use function @ref HAL_ADC_Stop().
5052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (for devices with several ADCs): This 
5053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function is for single-ADC mode only. For multimode, use the 
5054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         dedicated MultimodeStop function.
5055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
5057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef* hadc)
5059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
5061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
5063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
5064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
5066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
5067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential ADC conversion on going and disable ADC peripheral        */
5069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conditioned to:                                                          */
5070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC regular group conversion stop:                                 */
5071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   On this STM32 family, conversion on the other group                    */
5072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   (group injected) can continue (groups regular and injected             */
5073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversion stop commands are independent)                              */
5074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC disable:                                                       */
5075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   No conversion on the other group (group injected) must be intended to  */
5076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (groups regular and injected are both impacted by             */
5077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   ADC disable)                                                           */
5078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular group only */
5080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
5081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversion on ADC group regular is             */
5083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* effectively stopped and if no conversion on the other group              */
5084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (ADC group injected) is intended to continue.                            */
5085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
5086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
5087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
5089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
5090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
5092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
5093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
5094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
5096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
5097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
5099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
5100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
5103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
5104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cckiGtEU.s 			page 91


5105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
5106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
5107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* to retain a potential failing status.                                  */
5108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
5109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
5111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
5113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
5115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
5118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
5119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
5121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
5122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
5123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
5124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Conversion on ADC group regular group is stopped, but ADC is not         */
5127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* disabled since conversion on ADC group injected is still on going.       */
5128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
5131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
5132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
5135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
5136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
5138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
5139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
5142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
5143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
5144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  With ADC configured in multimode, for ADC master:
5146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Stop ADC group regular conversion (potential conversion on going
5147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected is not impacted),
5148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         disable ADC DMA transfer, disable ADC peripheral
5149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         if no conversion is on going on group injected.
5150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Interruptions disabled in this function:
5151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA transfer complete
5152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - DMA half transfer
5153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - overrun
5154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To stop ADC conversion of both groups regular and injected and to
5155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         to disable ADC peripheral, instead of using 2 functions
5156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_RegularMultiModeStop_DMA() and
5157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_InjectedStop(), use function
5158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         @ref HAL_ADCEx_MultiModeStop_DMA.
5159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, this function also stop conversion
5160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         on ADC group injected.
5161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode
ARM GAS  /tmp/cckiGtEU.s 			page 92


5162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel() ), ADC must be 
5163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
5164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
5165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
5166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel of ADC slave.
5167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
5168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
5169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularMultiModeStop_DMA(ADC_HandleTypeDef* hadc)
5171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
5173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart;
5174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
5175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
5177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
5178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
5180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
5181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Stop potential ADC conversion on going and disable ADC peripheral        */
5183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conditioned to:                                                          */
5184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC regular group conversion stop:                                 */
5185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   On this STM32 family, conversion on the other group                    */
5186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   (group injected) can continue (groups regular and injected             */
5187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversion stop commands are independent)                              */
5188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - For ADC disable:                                                       */
5189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   No conversion on the other group (group injected) must be intended to  */
5190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   continue (groups regular and injected are both impacted by             */
5191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   ADC disable)                                                           */
5192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going, on regular group only */
5194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
5195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversion on ADC group regular is             */
5197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* effectively stopped and if no conversion on the other group              */
5198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* (ADC group injected) is intended to continue.                            */
5199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
5200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
5201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
5203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
5204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
5205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
5207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine (ADC master) to error */
5209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
5210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Process unlocked */
5212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
5213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
5215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
5218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
ARM GAS  /tmp/cckiGtEU.s 			page 93


5219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 1. Wait until ADSTP=0 for ADC master and ADC slave*/
5221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
5222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
5224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave)   )
5225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
5227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine (ADC master) to error */
5229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
5230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
5231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Process unlocked */
5232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
5233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
5234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
5235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
5239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
5240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: In case of ADC slave using its own DMA channel (multimode        */
5241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       parameter "DMAAccessMode" set to disabled):                      */
5242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       DMA channel of ADC slave should stopped after this function with */
5243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       function HAL_ADC_Stop_DMA.                                       */
5244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
5245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
5247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
5248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
5250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
5251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
5254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
5255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave */
5259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
5260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* to retain a potential failing status.                                  */
5261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
5262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Check if ADC are effectively disabled */
5264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) != HAL_ERROR)          &&
5265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_Disable(&tmphadcSlave) != HAL_ERROR)   )
5266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_OK;
5268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
5269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Change ADC state (ADC master) */
5270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
5271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
5272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
5273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
ARM GAS  /tmp/cckiGtEU.s 			page 94


5276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* In case of error, attempt to disable ADC instances anyway */
5278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
5279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(&tmphadcSlave);
5280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine (ADC master) to error */
5282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
5283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Conversion on ADC group regular group is stopped, but ADC is not         */
5287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* disabled since conversion on ADC group injected is still on going.       */
5288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Set ADC state */
5291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
5292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
5295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
5296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
5298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
5299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
5301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
5302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx    */
5303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
5306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
5307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
5308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
5309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
5312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
5314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
5316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
5318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   UNUSED(hadc);
5319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
5321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
5322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
5326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
5327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
5328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
5329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Injected context queue overflow flag callback. 
5331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   This callback is called if injected context queue is enabled
5332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (parameter "QueueInjectedContext" in injected channel configuration)
ARM GAS  /tmp/cckiGtEU.s 			page 95


5333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             and if a new injected context is set when queue is full (maximum 2
5334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             contexts).
5335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
5337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
5339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
5341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   UNUSED(hadc);
5342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
5344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
5345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             in the user file.
5346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                         
5349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Analog watchdog 2 callback in non blocking mode. 
5351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
5353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
5355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
5357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   UNUSED(hadc);
5358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
5360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
5361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Analog watchdog 3 callback in non blocking mode. 
5366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
5368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
5370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
5372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   UNUSED(hadc);
5373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
5375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
5376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
5379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
5380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
5381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
5382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @}
5385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group3 ADCEx Peripheral Control functions
5388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief    ADC Extended Peripheral Control functions
5389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *
ARM GAS  /tmp/cckiGtEU.s 			page 96


5390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** @verbatim   
5391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  ===============================================================================
5392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
5393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  ===============================================================================  
5394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
5395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Configure channels on regular group
5396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Configure channels on injected group
5397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Configure multimode
5398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (+) Configure the analog watchdog
5399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** @endverbatim
5401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
5402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
5406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
5407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
5408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
5409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Configures the the selected channel to be linked to the regular
5411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         group.
5412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
5413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
5414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The recommended sampling time is at least:
5415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For devices STM32F37x: 17.1us for temperature sensor
5416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For the other STM32F3 devices: 2.2us for each of channels 
5417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            Vbat/VrefInt/TempSensor.
5418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         These internal paths can be be disabled using function 
5419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
5420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
5421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes channel into regular group, following  
5422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
5423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
5424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         the ADC.
5425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
5426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
5427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_ChannelConfTypeDef".
5428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  sConfig: Structure ADC channel for regular group.
5430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
5431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
5433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
5435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
5436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
5437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
5438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
5439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
5441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
5442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
5443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
5444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
5445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
5446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
ARM GAS  /tmp/cckiGtEU.s 			page 97


5447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verification of channel number: Channels 1 to 14 are available in        */  
5450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
5451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* single-ended mode.                                                       */
5452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
5453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(sConfig->Channel));
5455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
5459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
5462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
5463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
5466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
5467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
5468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Channel number                                                        */
5469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Channel rank                                                          */
5470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
5471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Regular sequence configuration */
5473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For Rank 1 to 4U */
5474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfig->Rank < 5U)
5475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR1,
5477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
5478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
5479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For Rank 5 to 9U */
5481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else if (sConfig->Rank < 10U)
5482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR2,
5484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
5485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
5486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For Rank 10 to 14U */
5488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else if (sConfig->Rank < 15U)
5489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR3                        ,
5491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR3_RK(ADC_SQR3_SQ10, sConfig->Rank)   ,
5492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
5493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For Rank 15 to 16U */
5495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
5496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {   
5497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR4                        ,
5498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR4_RK(ADC_SQR4_SQ15, sConfig->Rank)   ,
5499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
5500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
ARM GAS  /tmp/cckiGtEU.s 			page 98


5504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
5505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
5506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Channel sampling time                                                 */
5507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Channel offset                                                        */
5508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
5509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Channel sampling time configuration */
5511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For channels 10 to 18U */
5512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfig->Channel >= ADC_CHANNEL_10)
5513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR2                             ,
5515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
5516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
5517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else /* For channels 1 to 9U */
5519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR1                             ,
5521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR1(ADC_SMPR1_SMP0, sConfig->Channel)       ,
5522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
5523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configure the offset: offset enable/disable, channel, offset value */
5527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Shift the offset in function of the selected ADC resolution. */
5529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
5530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* to 0.                                                                  */
5531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
5532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configure the selected offset register:                                */
5534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Enable offset                                                        */
5535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set channel number                                                   */
5536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set offset value                                                     */
5537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     switch (sConfig->OffsetNumber)
5538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_1:
5540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 1U */
5541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR1               ,
5542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR1_OFFSET1_CH |
5543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR1_OFFSET1                   ,
5544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR1_OFFSET1_EN               |
5545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfig->Channel) |
5546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                    );
5547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
5548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_2:
5550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 2U */
5551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR2               ,
5552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR2_OFFSET2_CH |
5553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR2_OFFSET2                   ,
5554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR2_OFFSET2_EN               |
5555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfig->Channel) |
5556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                    );
5557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
5558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
5559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_3:
5560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 3U */
ARM GAS  /tmp/cckiGtEU.s 			page 99


5561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR3               ,
5562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR3_OFFSET3_CH |
5563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR3_OFFSET3                   ,
5564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR3_OFFSET3_EN               |
5565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfig->Channel) |
5566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                    );
5567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
5568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_4:
5570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 4U */
5571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR4               ,
5572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR4_OFFSET4_CH |
5573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR4_OFFSET4                   ,
5574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR4_OFFSET4_EN               |
5575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfig->Channel) |
5576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                    );
5577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
5578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Case ADC_OFFSET_NONE */
5580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     default :
5581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
5582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* enabled. If this is the case, offset OFRx is disabled.                 */
5583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
5584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR1*/
5586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
5587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
5589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR2*/
5591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
5592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
5594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR3*/
5596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
5597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
5599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR4*/
5601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
5602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
5604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  
5608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
5610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
5611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Single or differential mode                                           */
5612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
5613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
5614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of differential mode */
5616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
5617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/cckiGtEU.s 			page 100


5618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Disable differential mode (default mode: single-ended) */
5619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
5620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
5622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable differential mode */
5624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
5625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Channel sampling time configuration (channel ADC_INx +1              */
5627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* corresponding to differential negative input).                       */
5628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* For channels 10 to 18U */
5629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfig->Channel >= ADC_CHANNEL_10)
5630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR2,
5632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
5633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
5634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else /* For channels 1 to 9U */
5636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR1,
5638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR1(ADC_SMPR1_SMP0, sConfig->Channel +1U)       ,
5639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel +1U) );
5640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Management of internal measurement channels: VrefInt/TempSensor/Vbat   */
5645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* internal measurement paths enable: If internal channel selected,       */
5646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* enable dedicated internal buffers and path.                            */
5647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: these internal measurement paths can be disabled using           */
5648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* HAL_ADC_DeInit().                                                      */
5649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        
5650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of common ADC parameters                                 */
5651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Pointer to the common control register to which is belonging hadc      */
5652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
5653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* control registers)                                                     */
5654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
5655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If the requested internal measurement path has already been enabled,   */
5657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* bypass the configuration processing.                                   */
5658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
5659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
5660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
5661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
5662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
5663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
5664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        )
5665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configuration of common ADC parameters (continuation)                */
5667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set handle of the other ADC sharing the same common register         */
5668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
5669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Software is allowed to change common parameters only when all ADCs   */
5671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* of the common group are disabled.                                    */
5672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
5673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
5674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
ARM GAS  /tmp/cckiGtEU.s 			page 101


5675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path    */
5677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: Temp. sensor internal channels available on ADC1 only        */
5678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
5679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
5680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
5681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
5682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
5683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
5684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
5685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
5686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
5687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             wait_loop_index--;
5688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
5689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
5690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If Channel_17 is selected, enable VBAT measurement path            */
5691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: VBAT internal channels available on ADC1 only                */
5692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
5693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
5694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
5695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
5696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If Channel_18 is selected, enable VREFINT measurement path         */
5697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: VrefInt internal channels available on all ADCs, but only    */
5698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       one ADC is allowed to be connected to VrefInt at the same    */
5699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       time.                                                        */
5700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
5701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
5702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
5703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
5704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If the requested internal measurement path has already been          */
5706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* enabled and other ADC of the common group are enabled, internal      */
5707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* measurement paths cannot be enabled.                                 */
5708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else  
5709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
5711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
5712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
5713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
5714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If a conversion is on going on regular group, no update on regular       */
5721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* channel could be done on neither of the channel configuration structure  */
5722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* parameters.                                                              */
5723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
5726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
5727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
5729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
ARM GAS  /tmp/cckiGtEU.s 			page 102


5732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
5733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
5735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
5736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
5738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
5739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
5740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
5741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
5743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Configures the the selected channel to be linked to the regular
5745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         group.
5746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
5747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
5748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The recommended sampling time is at least:
5749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For devices STM32F37x: 17.1us for temperature sensor
5750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For the other STM32F3 devices: 2.2us for each of channels 
5751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            Vbat/VrefInt/TempSensor.
5752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         These internal paths can be be disabled using function 
5753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
5754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
5755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes channel into regular group, following  
5756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
5757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
5758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         the ADC.
5759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
5760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
5761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_ChannelConfTypeDef".
5762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  sConfig: Structure of ADC channel for regular group.
5764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
5765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
5767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** { 
5768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
5769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
5770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
5772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
5773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
5774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
5775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
5776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
5778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
5779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Regular sequence configuration */
5782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For Rank 1 to 6U */
5783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (sConfig->Rank < 7U)
5784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
5786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
5787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
5788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 103


5789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For Rank 7 to 12U */
5790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else if (sConfig->Rank < 13U)
5791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
5793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
5794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
5795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For Rank 13 to 16U */
5797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
5800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
5801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
5802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Channel sampling time configuration */
5806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For channels 10 to 18U */
5807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (sConfig->Channel > ADC_CHANNEL_10)
5808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
5810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
5811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
5812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else   /* For channels 0 to 9U */
5814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
5816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
5817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
5818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
5821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
5822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
5823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
5824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
5826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
5828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Delay for temperature sensor stabilization time */
5830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Compute number of CPU cycles to wait for */
5831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
5832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       while(wait_loop_index != 0U)
5833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         wait_loop_index--;
5835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
5837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
5839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else if (sConfig->Channel == ADC_CHANNEL_VBAT)
5840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
5842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****    
5845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
ARM GAS  /tmp/cckiGtEU.s 			page 104


5846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
5847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
5849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
5850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
5851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
5852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
5853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
5854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
5855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
5856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
5857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
5858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
5859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         linked to the injected group.
5860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
5861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
5862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
5863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
5864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
5865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
5866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef".
5867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
5868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
5869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The recommended sampling time is at least:
5870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For devices STM32F37x: 17.1us for temperature sensor
5871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For the other STM32F3 devices: 2.2us for each of channels 
5872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            Vbat/VrefInt/TempSensor.
5873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         These internal paths can be be disabled using function 
5874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
5875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To reset injected sequencer, function HAL_ADCEx_InjectedStop() can
5876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         be used.
5877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Caution: For Injected Context Queue use: a context must be fully 
5878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * defined before start of injected conversion: all channels configured 
5879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * consecutively for the same ADC instance. Therefore, Number of calls of 
5880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * HAL_ADCEx_InjectedConfigChannel() must correspond to value of parameter 
5881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * InjectedNbrOfConversion for each context.
5882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *  - Example 1: If 1 context intended to be used (or not use of this feature: 
5883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    QueueInjectedContext=DISABLE) and usage of the 3 first injected ranks 
5884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    (InjectedNbrOfConversion=3), HAL_ADCEx_InjectedConfigChannel() must be  
5885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    called once for each channel (3 times) before launching a conversion.   
5886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    This function must not be called to configure the 4th injected channel:   
5887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    it would start a new context into context queue.
5888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *  - Example 2: If 2 contexts intended to be used and usage of the 3 first 
5889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    injected ranks (InjectedNbrOfConversion=3),  
5890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() must be called once for each channel and  
5891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    for each context (3 channels x 2 contexts = 6 calls). Conversion can  
5892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *    start once the 1st context is set. The 2nd context can be set on the fly.
5893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
5894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
5895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         injected group.
5896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
5897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
5898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
5899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
5900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
5901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
5902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
ARM GAS  /tmp/cckiGtEU.s 			page 105


5903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
5904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
5905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Injected context queue feature: temporary JSQR variables defined in      */
5907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* static to be passed over calls of this function                          */
5908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
5909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
5911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
5912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
5913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
5914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
5915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
5916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
5917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
5918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
5919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
5920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
5922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
5924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
5925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
5926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verification of channel number: Channels 1 to 14 are available in        */  
5929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
5930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* single-ended mode.                                                       */
5931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
5932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
5934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
5936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
5938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
5939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
5941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
5942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of Injected group sequencer.                               */
5944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Hardware constraint: Must fully define injected context register JSQR    */
5945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* before make it entering into injected sequencer queue.                   */
5946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*                                                                          */
5947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - if scan mode is disabled:                                              */
5948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to 0x00: 1 channel         */
5949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      converted (channel on injected rank 1U)                              */
5950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      Parameter "InjectedNbrOfConversion" is discarded.                   */
5951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting is simple: register is fully */
5952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      defined on one call of this function (for injected rank 1U) and can  */
5953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      be entered into queue directly.                                     */
5954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - if scan mode is enabled:                                               */
5955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to parameter               */
5956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      "InjectedNbrOfConversion".                                          */
5957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting more complex: register is    */
5958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      fully defined over successive calls of this function, for each      */
5959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      injected channel rank. It is entered into queue only when all       */
ARM GAS  /tmp/cckiGtEU.s 			page 106


5960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*      injected ranks have been set.                                       */
5961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   Note: Scan mode is not present by hardware on this device, but used    */
5962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   by software for alignment over all STM32 devices.                      */
5963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
5964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
5965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U)  )
5966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
5967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of context register JSQR:                                */
5968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - number of ranks in injected group sequencer: fixed to 1st rank      */
5969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*    (scan mode disabled, only rank 1 used)                              */
5970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - external trigger to start conversion                                */
5971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - external trigger polarity                                           */
5972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
5973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
5974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
5975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
5976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
5977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* software start.                                                      */
5978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
5979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
5980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       software start.                                                */
5981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
5982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_
5984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                                  ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->Extern
5985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                                  sConfigInjected->ExternalTrigInjecConvEdge        
5986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
5988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
5989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_
5990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
5991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
5992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC register JSQR */
5993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR           ,
5994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4    |
5995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3    |
5996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2    |
5997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1    |
5998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JEXTEN  |
5999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JEXTSEL |
6000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JL                    ,
6001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmp_JSQR_ContextQueueBeingBuilt );
6002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* For debug and informative reasons, hadc handle saves JSQR setting */
6004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
6005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
6007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
6008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
6011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
6014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cckiGtEU.s 			page 107


6017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
6018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Case of scan mode enabled, several channels to set into injected group */
6020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* sequencer.                                                             */
6021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Procedure to define injected context register JSQR over successive     */
6022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* calls of this function, for each injected channel rank:                */
6023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* 1. Start new context and set parameters related to all injected        */
6025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*    channels: injected sequence length and trigger                      */
6026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
6027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Initialize number of channels that will be configured on the context */
6029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  being built                                                         */
6030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
6031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Initialize value that will be set into register JSQR */
6032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0x00000000U;
6033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configuration of context register JSQR:                              */
6035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - number of ranks in injected group sequencer                       */
6036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - external trigger to start conversion                              */
6037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - external trigger polarity                                         */
6038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
6040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* software start.                                                      */
6041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
6042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
6043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       software start.                                                */
6044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
6045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)
6047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                                     ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->Ext
6048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                                     sConfigInjected->ExternalTrigInjecConvEdge     
6049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
6051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)
6053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* 2. Continue setting of context under definition with parameter       */
6058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    related to each channel: channel rank sequence                    */
6059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the JSQx bits for the selected rank */
6061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
6062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
6063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
6064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Decrease channel count after setting into temporary JSQR variable */
6066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount --;
6067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* 3. End of context setting: If last channel set, then write context   */
6069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    into register JSQR and make it enter into queue                   */
6070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->InjectionConfig.ChannelCount == 0U)
6071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC register JSQR */
6073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->JSQR              ,
ARM GAS  /tmp/cckiGtEU.s 			page 108


6074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ4    |
6075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ3    |
6076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ2    |
6077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ1    |
6078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JEXTEN  |
6079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JEXTSEL |
6080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_JSQR_JL                       ,
6081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    hadc->InjectionConfig.ContextQueue );
6082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
6088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
6089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion on going on injected group:                                   */
6090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Injected context queue: Queue disable (active context is kept) or     */
6091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    enable (context decremented, up to 2 contexts queued)                 */
6092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
6093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    mode is disabled.                                                     */
6094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
6095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {     
6096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If auto-injected mode is disabled: no constraint                       */
6097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == DISABLE)
6098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                                                            ,
6100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_JQM    |
6101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_JDISCEN                                                                ,
6102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE(sConfigInjected->QueueInjectedContext)           | 
6103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_DISCCONTINUOUS(sConfigInjected->InjectedDiscontinuousConvMode)   )
6104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If auto-injected mode is enabled: Injected discontinuous setting is    */
6106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* discarded.                                                             */
6107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                                                ,
6110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_JQM    |
6111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_JDISCEN                                                    ,
6112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE(sConfigInjected->QueueInjectedContext) );
6113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If injected discontinuous mode was intended to be set and could not  */
6115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* due to auto-injected enabled, error is reported.                     */
6116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
6117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
6119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
6122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
6129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
6130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion on going on regular and injected groups:                      */
ARM GAS  /tmp/cckiGtEU.s 			page 109


6131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Automatic injected conversion: can be enabled if injected group       */
6132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    external triggers are disabled.                                       */
6133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Channel sampling time                                                 */
6134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Channel offset                                                        */
6135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
6136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {    
6137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If injected group external triggers are disabled (set to injected      */
6138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* software start): no constraint                                         */
6139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
6140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                                              ,
6142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_JAUTO                                                    ,
6143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_AUTO_CONVERSION(sConfigInjected->AutoInjectedConv) );
6144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If Automatic injected conversion was intended to be set and could not  */
6146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* due to injected group external triggers enabled, error is reported.    */
6147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Disable Automatic injected conversion */
6150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
6151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
6153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
6155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
6158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Channel sampling time configuration */
6163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* For channels 10 to 18U */
6164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
6165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR2                                                             
6167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      
6168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel)
6169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else /* For channels 1 to 9U */
6171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR1                                                             
6173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR1(ADC_SMPR1_SMP0, sConfigInjected->InjectedChannel)                       
6174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel)
6175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configure the offset: offset enable/disable, channel, offset value */
6178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Shift the offset in function of the selected ADC resolution. */
6180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
6181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* to 0.                                                                  */
6182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
6183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configure the selected offset register:                                */
6185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Enable offset                                                        */
6186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set channel number                                                   */
6187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* - Set offset value                                                     */
ARM GAS  /tmp/cckiGtEU.s 			page 110


6188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     switch (sConfigInjected->InjectedOffsetNumber)
6189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_1:
6191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 1U */
6192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR1                               ,
6193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR1_OFFSET1_CH |
6194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR1_OFFSET1                                   ,
6195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR1_OFFSET1_EN                               |
6196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
6197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                                    );
6198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_2:
6201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 2U */
6202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR2                               ,
6203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR2_OFFSET2_CH |
6204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR2_OFFSET2                                   ,
6205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR2_OFFSET2_EN                               |
6206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
6207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                                    );
6208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_3:
6211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 3U */
6212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR3                               ,
6213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR3_OFFSET3_CH |
6214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR3_OFFSET3                                   ,
6215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR3_OFFSET3_EN                               |
6216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
6217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                                    );
6218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_OFFSET_4:
6221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure offset register 4U */
6222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR4                               ,
6223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR4_OFFSET4_CH |
6224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR4_OFFSET4                                   ,
6225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR4_OFFSET4_EN                               |
6226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
6227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpOffsetShifted                                    );
6228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Case ADC_OFFSET_NONE */
6231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     default :
6232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
6233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* enabled. If this is the case, offset OFRx is disabled.                 */
6234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
6235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR1*/
6237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
6238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
6240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR2*/
6242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
6243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
ARM GAS  /tmp/cckiGtEU.s 			page 111


6245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR3*/
6247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
6248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
6250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable offset OFR4*/
6252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
6253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
6261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
6262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Single or differential mode                                           */
6263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
6264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
6265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of differential mode */
6267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
6268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Disable differential mode (default mode: single-ended) */
6270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
6271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Enable differential mode */
6275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
6276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Channel sampling time configuration (channel ADC_INx +1              */
6278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* corresponding to differential negative input).                       */
6279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* For channels 10 to 18U */
6280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
6281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR2,
6283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
6284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChanne
6285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else /* For channels 1 to 9U */
6287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR1,
6289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR1(ADC_SMPR1_SMP0, sConfigInjected->InjectedChannel +1U),
6290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChanne
6291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Management of internal measurement channels: VrefInt/TempSensor/Vbat   */
6296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* internal measurement paths enable: If internal channel selected,       */
6297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* enable dedicated internal buffers and path.                            */
6298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: these internal measurement paths can be disabled using           */
6299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* HAL_ADC_deInit().                                                      */
6300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        
6301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Configuration of common ADC parameters                                 */
ARM GAS  /tmp/cckiGtEU.s 			page 112


6302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Pointer to the common control register to which is belonging hadc      */
6303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
6304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* control registers)                                                     */
6305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
6306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If the requested internal measurement path has already been enabled,   */
6308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* bypass the configuration processing.                                   */
6309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
6310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
6311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
6312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
6313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
6314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
6315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        )
6316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configuration of common ADC parameters (continuation)                */
6318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set handle of the other ADC sharing the same common register         */
6319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
6320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Software is allowed to change common parameters only when all ADCs   */
6322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* of the common group are disabled.                                    */
6323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
6324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
6325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
6326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path    */
6328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: Temp. sensor internal channels available on ADC1 only        */
6329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1
6330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
6332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
6333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
6334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
6335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
6336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
6337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           {
6338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             wait_loop_index--;
6339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           }
6340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If Channel_17 is selected, enable VBAT measurement path            */
6342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: VBAT internal channels available on ADC1 only                */
6343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1)
6344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
6346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* If Channel_18 is selected, enable VREFINT measurement path         */
6348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: VrefInt internal channels available on all ADCs, but only    */
6349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       one ADC is allowed to be connected to VrefInt at the same    */
6350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       time.                                                        */
6351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
6352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
6354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* If the requested internal measurement path has already been enabled  */
6357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* and other ADC of the common group are enabled, internal              */
6358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* measurement paths cannot be enabled.                                 */
ARM GAS  /tmp/cckiGtEU.s 			page 113


6359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else  
6360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
6362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
6365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
6371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
6372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
6374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
6375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
6376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
6377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
6378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
6379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
6380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
6382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
6383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
6384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         linked to the injected group.
6385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
6386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
6387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
6388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
6389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
6390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
6391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
6392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
6393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The recommended sampling time is at least:
6394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For devices STM32F37x: 17.1us for temperature sensor
6395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          - For the other STM32F3 devices: 2.2us for each of channels 
6396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            Vbat/VrefInt/TempSensor.
6397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         These internal paths can be be disabled using function 
6398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
6399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
6400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
6401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         injected group.
6402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
6403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
6404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
6405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
6406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
6407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
6408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
6410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
6411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
6412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
6413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
6414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
6415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
ARM GAS  /tmp/cckiGtEU.s 			page 114


6416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
6418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
6420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
6421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
6422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
6425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
6426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
6428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
6429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1U)                  */
6430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
6431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
6432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
6433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
6434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
6435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*   parameter "InjectedNbrOfConversion".                                   */
6436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
6437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
6439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
6441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                           ,
6442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JL   |
6443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4 |
6444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3 |
6445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2 |
6446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1                                  ,
6447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
6448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       ADC_INJECTED_RANK_1,
6449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                       0x01U)                      );
6450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
6452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
6453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
6456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
6459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
6462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
6464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
6465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
6466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
6467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
6469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
6470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                         ,
6471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  
6472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                                 |
ARM GAS  /tmp/cckiGtEU.s 			page 115


6473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
6474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 sConfigInjected->InjectedRank,         
6475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 sConfigInjected->InjectedNbrOfConversion)     ,
6476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  
6477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
6478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
6479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 sConfigInjected->InjectedRank,         
6480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 sConfigInjected->InjectedNbrOfConversion)      );
6481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
6485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                     ,
6486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  
6487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                             |
6488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
6489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 sConfigInjected->InjectedRank,         
6490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                                 sConfigInjected->InjectedNbrOfConversion) ,
6491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  
6492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  0x00000000                                                );
6493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
6497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
6498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
6499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - external trigger to start conversion                                  */
6500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update not conditioned to ADC state:                          */
6501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
6502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
6503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
6504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
6505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
6506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {    
6507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                   ,
6508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL |
6509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_CR2_ADON                          ,
6510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                sConfigInjected->ExternalTrigInjecConv );
6511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
6514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
6515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
6516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
6518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
6519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
6520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
6522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
6524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
6526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
6528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
ARM GAS  /tmp/cckiGtEU.s 			page 116


6530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
6531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
6535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* disabled.                                                              */  
6536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
6537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
6539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
6541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       } 
6542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
6543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
6545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
6548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* InjectedChannel sampling time configuration */
6553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* For channels 10 to 18 */
6554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel > ADC_CHANNEL_10)
6555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1,
6557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel),
6558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
6559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else /* For channels 1 to 9 */
6561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2,
6563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel),
6564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
6565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
6569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
6570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case 1:
6572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
6573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
6574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
6575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
6576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case 2:
6578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
6579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
6580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
6581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
6582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case 3:
6584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
6585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
6586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
ARM GAS  /tmp/cckiGtEU.s 			page 117


6587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
6588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case 4:
6590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     default:
6591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
6592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
6593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
6594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
6595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
6598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
6599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
6600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
6601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
6603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
6605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
6607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Delay for temperature sensor stabilization time */
6609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Compute number of CPU cycles to wait for */
6610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
6611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         while(wait_loop_index != 0U)
6612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index--;
6614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
6619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
6620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
6622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
6625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
6626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
6628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
6629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
6630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
6631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
6633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
6634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
6635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
6636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
6637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Configures the analog watchdog.
6638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
6639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes the selected analog watchdog, following  
6640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
6641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without reseting 
6642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         the ADC.
6643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
ARM GAS  /tmp/cckiGtEU.s 			page 118


6644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
6645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_AnalogWDGConfTypeDef".
6646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
6647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
6648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
6649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
6650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
6651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
6652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
6653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpAWDHighThresholdShifted;
6655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpAWDLowThresholdShifted;
6656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpADCFlagAWD2orAWD3;
6658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmpADCITAWD2orAWD3;
6659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
6661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
6662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
6663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
6664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
6665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verify if threshold is within the selected ADC resolution */
6667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
6668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
6669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
6671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
6672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
6673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
6675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
6678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
6679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
6681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
6682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion on going on regular and injected groups:                      */
6683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Analog watchdog channels                                              */
6684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Analog watchdog thresholds                                            */
6685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
6686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Analog watchdogs configuration */
6689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
6690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configuration of analog watchdog:                                    */
6692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - Set the analog watchdog enable mode: regular and/or injected      */
6693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    groups, one or overall group of channels.                         */
6694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - Set the Analog watchdog channel (is not used if watchdog          */
6695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    mode "all channels": ADC_CFGR_AWD1SGL=0U).                         */
6696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                             ,
6697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_AWD1SGL |
6698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_JAWD1EN |
6699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_AWD1EN  |
6700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_AWD1CH                                  ,
ARM GAS  /tmp/cckiGtEU.s 			page 119


6701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  AnalogWDGConfig->WatchdogMode                   |
6702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CFGR_AWD1CH_SHIFT(AnalogWDGConfig->Channel)   );
6703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Shift the offset in function of the selected ADC resolution:         */
6705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Thresholds have to be left-aligned on bit 11U, the LSB (right bits)   */
6706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* are set to 0                                                         */ 
6707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighTh
6708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
6709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set the high and low thresholds */
6711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->TR1                                ,
6712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_TR1_HT1 |
6713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_TR1_LT1                                        ,
6714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
6715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  tmpAWDLowThresholdShifted                           );
6716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
6718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
6719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* or HAL_ADC_PollForEvent().                                           */
6720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
6721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure ADC Analog watchdog interrupt */
6723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(AnalogWDGConfig->ITMode == ENABLE)
6724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Enable the ADC Analog watchdog interrupt */
6726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
6727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
6729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Disable the ADC Analog watchdog interrupt */
6731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
6732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
6736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
6737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Shift the threshold in function of the selected ADC resolution */
6739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* have to be left-aligned on bit 7U, the LSB (right bits) are set to 0    */
6740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
6741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
6742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
6744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the Analog watchdog channel or group of channels. This also    */
6746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* enables the watchdog.                                              */
6747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: Conditional register reset, because several channels can be  */
6748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       set by successive calls of this function.                    */
6749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
6750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set the high and low thresholds */
6752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           MODIFY_REG(hadc->Instance->TR2                                ,
6753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_TR2_HT2 |
6754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_TR2_LT2                                        ,
6755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
6756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      tmpAWDLowThresholdShifted                           );
6757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
ARM GAS  /tmp/cckiGtEU.s 			page 120


6758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
6759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else
6761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
6763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
6764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                 
6766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
6767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* settings.                                                          */
6768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
6769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCITAWD2orAWD3 = ADC_IT_AWD2;
6770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
6772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
6773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set the Analog watchdog channel or group of channels. This also    */
6775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* enables the watchdog.                                              */
6776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Note: Conditionnal register reset, because several channels can be */
6777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /*       set by successive calls of this function.                    */
6778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
6779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set the high and low thresholds */
6781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           MODIFY_REG(hadc->Instance->TR3                                ,
6782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_TR3_HT3 |
6783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_TR3_LT3                                        ,
6784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
6785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                      tmpAWDLowThresholdShifted                           );
6786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
6787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
6788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else
6790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
6791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
6792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
6793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
6794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
6795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
6796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* settings.                                                          */
6797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
6798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCITAWD2orAWD3 = ADC_IT_AWD3;
6799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
6802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
6803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* or HAL_ADC_PollForEvent().                                           */
6804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
6805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configure ADC Analog watchdog interrupt */
6807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(AnalogWDGConfig->ITMode == ENABLE)
6808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
6810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
6811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       else
6812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
6813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
6814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
ARM GAS  /tmp/cckiGtEU.s 			page 121


6815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
6816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If a conversion is on going on regular or injected groups, no update     */
6819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* could be done on neither of the AWD configuration structure parameters.  */
6820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
6821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
6823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
6824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
6826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
6830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
6831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
6833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
6834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
6835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
6836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
6837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
6838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
6839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F373xC) || defined(STM32F378xx)
6841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
6842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Configures the analog watchdog.
6843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
6844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         is on going.
6845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         In this case, some constraints must be taken into account:
6846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         the programmed threshold values are effective from the next
6847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         ADC EOC (end of unitary conversion).
6848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         Considering that registers write delay may happen due to
6849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         bus activity, this might cause an uncertainty on the
6850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         effective timing of the new programmed threshold values.
6851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
6852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
6853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
6854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
6855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
6856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
6857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
6858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
6859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
6860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
6861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
6862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
6863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
6865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
6866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
6867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
6869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
ARM GAS  /tmp/cckiGtEU.s 			page 122


6872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
6873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Analog watchdog configuration */
6875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configure ADC Analog watchdog interrupt */
6877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
6878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC Analog watchdog interrupt */
6880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
6881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
6883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Disable the ADC Analog watchdog interrupt */
6885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
6886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Configuration of analog watchdog:                                        */
6889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
6890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    one or all channels.                                                  */
6891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
6892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0U).                             */
6893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   MODIFY_REG(hadc->Instance->CR1            ,
6894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              ADC_CR1_AWDSGL |
6895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              ADC_CR1_JAWDEN |
6896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              ADC_CR1_AWDEN  |
6897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              ADC_CR1_AWDCH                  ,
6898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              AnalogWDGConfig->WatchdogMode |
6899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****              AnalogWDGConfig->Channel       );
6900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set the high threshold */
6902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
6903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set the low threshold */
6905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
6906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
6908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
6909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
6911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
6912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
6913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F373xC || STM32F378xx */
6914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
6916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
6917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
6918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
6919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
6920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
6921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
6922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following  
6923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
6924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without reseting 
6925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         the ADCs (both ADCs of the common group).
6926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
6927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
6928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
ARM GAS  /tmp/cckiGtEU.s 			page 123


6929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   To change back configuration from multimode to single mode, ADC must
6930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
6931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
6932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  multimode : Structure of ADC multimode configuration
6933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status
6934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
6935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
6936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
6937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
6938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
6939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
6940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
6942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
6943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
6944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(multimode->Mode != ADC_MODE_INDEPENDENT)
6945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
6947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
6948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
6949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process locked */
6951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
6952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set handle of the other ADC sharing the same common register             */
6955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
6956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
6957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
6958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
6959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
6960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Multimode DMA configuration                                           */
6961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /*  - Multimode DMA mode                                                    */
6962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
6963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
6964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
6965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Pointer to the common control register to which is belonging hadc      */
6966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
6967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* control registers)                                                     */
6968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
6969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
6970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* If multimode is selected, configure all multimode paramaters.          */
6971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Otherwise, reset multimode parameters (can be used in case of          */
6972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* transition from multimode to independent mode).                        */
6973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(multimode->Mode != ADC_MODE_INDEPENDENT)
6974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
6975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
6976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
6977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - DMA access mode                                                     */
6978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR                                          ,
6979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CCR_MDMA  |
6980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CCR_DMACFG                                              ,
6981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  multimode->DMAAccessMode                                   |
6982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                  ADC_CCR_MULTI_DMACONTREQ(hadc->Init.DMAContinuousRequests)   );
6983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
6984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:              */
6985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                            */
ARM GAS  /tmp/cckiGtEU.s 			page 124


6986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - Set delay between two sampling phases                               */
6987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    Note: Delay range depends on selected resolution:                   */
6988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*      from 1 to 12 clock cycles for 12 bits                             */
6989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*      from 1 to 10 clock cycles for 10 bits,                            */
6990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*      from 1 to 8 clock cycles for 8 bits                               */
6991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*      from 1 to 6 clock cycles for 6 bits                               */
6992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    If a higher delay is selected, it will be clamped to maximum delay  */
6993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*    range                                                               */
6994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Note: If ADC is not in the appropriate state to modify these           */
6995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       parameters, their setting is bypassed without error reporting    */
6996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       (as it can be the expected behaviour in case of intended action  */
6997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       to update parameter above (which fulfills the ADC state          */
6998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       condition: no conversion on going on group regular)              */
6999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*       on the fly).                                                     */
7000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
7001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
7002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(tmpADC_Common->CCR                                          ,
7004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_CCR_MULTI |
7005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    ADC_CCR_DELAY                                               ,
7006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    multimode->Mode                                            |
7007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****                    multimode->TwoSamplingDelay                                  );
7008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else /* ADC_MODE_INDEPENDENT */
7011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
7013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:                */
7015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                              */
7016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /*  - Multimode delay                                                       */
7017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
7018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
7019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
7021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
7025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
7026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
7027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
7028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
7029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
7030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
7032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Process unlocked */
7036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
7037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return function status */
7039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
7040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** } 
7041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
7042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F302xC || STM32F303xC || STM32F358xx || */
ARM GAS  /tmp/cckiGtEU.s 			page 125


7043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        /* STM32F303x8 || STM32F328xx || STM32F334x8    */
7044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @}
7047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @}
7051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Functions ADCEx Private Functions
7054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @{
7055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  DMA transfer complete callback. 
7058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hdma: pointer to DMA handle.
7059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
7060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
7062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
7063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
7064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
7065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****  
7066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Update state machine on conversion status if not in error state */
7067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
7068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
7069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Update ADC state machine */
7070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
7071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Determine whether any further conversion upcoming on group regular     */
7073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
7074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Note: On STM32F3 devices, in case of sequencer enabled                 */
7075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       (several ranks selected), end of conversion flag is raised       */
7076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /*       at the end of the sequence.                                      */
7077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
7078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
7079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC state */
7081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
7082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
7084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
7086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Conversion complete callback */
7090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_ConvCpltCallback(hadc); 
7091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   else
7093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
7094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Call DMA error callback */
7095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
7096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
7098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
ARM GAS  /tmp/cckiGtEU.s 			page 126


7100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  DMA half transfer complete callback. 
7101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hdma: pointer to DMA handle.
7102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
7103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
7105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
7106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
7107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
7108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Half conversion callback */
7110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
7111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
7112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  DMA error callback 
7115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hdma: pointer to DMA handle.
7116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval None
7117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
7119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
7120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
7121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
7122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set ADC state */
7124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
7125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Set ADC error code to DMA error */
7127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
7128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Error callback */
7130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_ADC_ErrorCallback(hadc); 
7131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
7132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx) || \
7134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
7135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
7136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
7137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Enable the selected ADC.
7139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
7140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
7141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
7142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
7143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
7145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
7146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart = 0U;
7147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
7149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
7150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
7151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* causes: ADC clock not running, ...).                                     */
7152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
7153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
7154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if conditions to enable the ADC are fulfilled */
7155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
7156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/cckiGtEU.s 			page 127


7157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
7158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
7159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to ADC IP internal error */
7161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
7162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
7164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
7167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE(hadc);
7168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait for ADC effectively enabled */
7170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
7171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
7173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
7175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
7177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
7178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
7179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC error code to ADC IP internal error */
7180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
7181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
7183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return HAL status */
7188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
7189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
7190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Disable the selected ADC.
7193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
7194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *         stopped.
7195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
7196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
7197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
7199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
  28              		.loc 1 7199 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  41              	.LVL1:
ARM GAS  /tmp/cckiGtEU.s 			page 128


7200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart = 0U;
7201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verification if ADC is not already disabled:                             */
7203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
7204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* disabled.                                                                */
7205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) != RESET )
  42              		.loc 1 7205 0
  43 0004 0368     		ldr	r3, [r0]
  44 0006 9A68     		ldr	r2, [r3, #8]
  45 0008 02F00302 		and	r2, r2, #3
  46 000c 012A     		cmp	r2, #1
  47 000e 05D1     		bne	.L7
  48              		.loc 1 7205 0 is_stmt 0 discriminator 1
  49 0010 1A68     		ldr	r2, [r3]
  50 0012 12F0010F 		tst	r2, #1
  51 0016 03D1     		bne	.L8
  52              		.loc 1 7205 0
  53 0018 0022     		movs	r2, #0
  54 001a 02E0     		b	.L2
  55              	.L7:
  56 001c 0022     		movs	r2, #0
  57 001e 00E0     		b	.L2
  58              	.L8:
  59 0020 0122     		movs	r2, #1
  60              	.L2:
  61              		.loc 1 7205 0 discriminator 4
  62 0022 002A     		cmp	r2, #0
  63 0024 2FD0     		beq	.L9
7206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
7207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Check if conditions to disable the ADC are fulfilled */
7208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
  64              		.loc 1 7208 0 is_stmt 1
  65 0026 9A68     		ldr	r2, [r3, #8]
  66 0028 02F00D02 		and	r2, r2, #13
  67 002c 012A     		cmp	r2, #1
  68 002e 0AD1     		bne	.L4
7209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Disable the ADC peripheral */
7211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE(hadc);
  69              		.loc 1 7211 0
  70 0030 9A68     		ldr	r2, [r3, #8]
  71 0032 42F00202 		orr	r2, r2, #2
  72 0036 9A60     		str	r2, [r3, #8]
  73 0038 2368     		ldr	r3, [r4]
  74 003a 0322     		movs	r2, #3
  75 003c 1A60     		str	r2, [r3]
7212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else
7214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
7216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
7217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Set ADC error code to ADC IP internal error */
7219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
7220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
7222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/cckiGtEU.s 			page 129


7223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      
7224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait for ADC effectively disabled */
7225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
  76              		.loc 1 7225 0
  77 003e FFF7FEFF 		bl	HAL_GetTick
  78              	.LVL2:
  79 0042 0546     		mov	r5, r0
  80              	.LVL3:
7226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
  81              		.loc 1 7227 0
  82 0044 18E0     		b	.L5
  83              	.LVL4:
  84              	.L4:
7216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
  85              		.loc 1 7216 0
  86 0046 636C     		ldr	r3, [r4, #68]
  87 0048 43F01003 		orr	r3, r3, #16
  88 004c 6364     		str	r3, [r4, #68]
7219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  89              		.loc 1 7219 0
  90 004e A36C     		ldr	r3, [r4, #72]
  91 0050 43F00103 		orr	r3, r3, #1
  92 0054 A364     		str	r3, [r4, #72]
7221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
  93              		.loc 1 7221 0
  94 0056 0120     		movs	r0, #1
  95              	.LVL5:
  96 0058 38BD     		pop	{r3, r4, r5, pc}
  97              	.LVL6:
  98              	.L6:
7228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
  99              		.loc 1 7229 0
 100 005a FFF7FEFF 		bl	HAL_GetTick
 101              	.LVL7:
 102 005e 401B     		subs	r0, r0, r5
 103 0060 0228     		cmp	r0, #2
 104 0062 09D9     		bls	.L5
7230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
7232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 105              		.loc 1 7232 0
 106 0064 636C     		ldr	r3, [r4, #68]
 107 0066 43F01003 		orr	r3, r3, #16
 108 006a 6364     		str	r3, [r4, #68]
7233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
7234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC error code to ADC IP internal error */
7235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 109              		.loc 1 7235 0
 110 006c A36C     		ldr	r3, [r4, #72]
 111 006e 43F00103 		orr	r3, r3, #1
 112 0072 A364     		str	r3, [r4, #72]
7236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
7237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 113              		.loc 1 7237 0
 114 0074 0120     		movs	r0, #1
ARM GAS  /tmp/cckiGtEU.s 			page 130


 115 0076 38BD     		pop	{r3, r4, r5, pc}
 116              	.LVL8:
 117              	.L5:
7227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 118              		.loc 1 7227 0 discriminator 1
 119 0078 2368     		ldr	r3, [r4]
 120 007a 9B68     		ldr	r3, [r3, #8]
 121 007c 13F0010F 		tst	r3, #1
 122 0080 EBD1     		bne	.L6
7238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   
7242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return HAL status */
7243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 123              		.loc 1 7243 0
 124 0082 0020     		movs	r0, #0
 125 0084 38BD     		pop	{r3, r4, r5, pc}
 126              	.LVL9:
 127              	.L9:
 128 0086 0020     		movs	r0, #0
 129              	.LVL10:
7244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 130              		.loc 1 7244 0
 131 0088 38BD     		pop	{r3, r4, r5, pc}
 132              		.cfi_endproc
 133              	.LFE163:
 135 008a 00BF     		.section	.text.ADC_ConversionStop,"ax",%progbits
 136              		.align	2
 137              		.thumb
 138              		.thumb_func
 140              	ADC_ConversionStop:
 141              	.LFB164:
7245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** /**
7248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion.
7249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
7250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @param  ConversionGroup: ADC group regular and/or injected.
7251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
7252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_REGULAR_GROUP: ADC regular conversion type.
7253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
7254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
7255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   * @retval HAL status.
7256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   */
7257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
7258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 142              		.loc 1 7258 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              	.LVL11:
 147 0000 70B5     		push	{r4, r5, r6, lr}
 148              	.LCFI1:
 149              		.cfi_def_cfa_offset 16
 150              		.cfi_offset 4, -16
 151              		.cfi_offset 5, -12
ARM GAS  /tmp/cckiGtEU.s 			page 131


 152              		.cfi_offset 6, -8
 153              		.cfi_offset 14, -4
 154 0002 0446     		mov	r4, r0
 155              	.LVL12:
7259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
7260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t tickstart = 0U;
7261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0U;
7262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Check the parameters */
7264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
7265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
7266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Verification if ADC is not already stopped (on regular and injected      */
7268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* groups) to bypass this function if not needed.                           */
7269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 156              		.loc 1 7269 0
 157 0004 0368     		ldr	r3, [r0]
 158 0006 9A68     		ldr	r2, [r3, #8]
 159 0008 12F00C0F 		tst	r2, #12
 160 000c 61D0     		beq	.L24
7270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   {
7271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Particular case of continuous auto-injection mode combined with        */
7272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* auto-delay mode.                                                       */
7273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
7274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* injected group stop ADC_CR_JADSTP).                                    */
7275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
7276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* (see reference manual).                                                */
7277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 161              		.loc 1 7277 0
 162 000e DA68     		ldr	r2, [r3, #12]
 163 0010 12F0007F 		tst	r2, #33554432
 164 0014 1DD0     		beq	.L13
7278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (hadc->Init.ContinuousConvMode==ENABLE)               &&
 165              		.loc 1 7278 0 discriminator 1
 166 0016 C269     		ldr	r2, [r0, #28]
7277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 167              		.loc 1 7277 0 discriminator 1
 168 0018 012A     		cmp	r2, #1
 169 001a 1AD1     		bne	.L13
7279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 170              		.loc 1 7279 0
 171 001c 8269     		ldr	r2, [r0, #24]
7278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (hadc->Init.ContinuousConvMode==ENABLE)               &&
 172              		.loc 1 7278 0
 173 001e 012A     		cmp	r2, #1
 174 0020 17D1     		bne	.L13
 175 0022 0DE0     		b	.L25
 176              	.LVL13:
 177              	.L16:
7280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Use stop of regular group */
7282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ConversionGroup = ADC_REGULAR_GROUP;
7283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
7285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
7286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
ARM GAS  /tmp/cckiGtEU.s 			page 132


 178              		.loc 1 7287 0
 179 0024 8242     		cmp	r2, r0
 180 0026 09D9     		bls	.L15
7288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         {
7289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Update ADC state machine to error */
7290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 181              		.loc 1 7290 0
 182 0028 636C     		ldr	r3, [r4, #68]
 183 002a 43F01003 		orr	r3, r3, #16
 184 002e 6364     		str	r3, [r4, #68]
7291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
7292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           /* Set ADC error code to ADC IP internal error */
7293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 185              		.loc 1 7293 0
 186 0030 A36C     		ldr	r3, [r4, #72]
 187 0032 43F00103 		orr	r3, r3, #1
 188 0036 A364     		str	r3, [r4, #72]
7294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           
7295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           return HAL_ERROR;
 189              		.loc 1 7295 0
 190 0038 0120     		movs	r0, #1
 191 003a 70BD     		pop	{r4, r5, r6, pc}
 192              	.LVL14:
 193              	.L15:
7296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         }
7297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         Conversion_Timeout_CPU_cycles ++;
 194              		.loc 1 7297 0
 195 003c 0132     		adds	r2, r2, #1
 196              	.LVL15:
 197 003e 01E0     		b	.L14
 198              	.LVL16:
 199              	.L25:
 200 0040 0022     		movs	r2, #0
7287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 201              		.loc 1 7287 0
 202 0042 2548     		ldr	r0, .L29
 203              	.LVL17:
 204              	.L14:
7285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 205              		.loc 1 7285 0 discriminator 1
 206 0044 1968     		ldr	r1, [r3]
 207 0046 11F0400F 		tst	r1, #64
 208 004a EBD0     		beq	.L16
7298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Clear JEOS */
7301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 209              		.loc 1 7301 0
 210 004c 4022     		movs	r2, #64
 211              	.LVL18:
 212 004e 1A60     		str	r2, [r3]
7282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ConversionGroup = ADC_REGULAR_GROUP;
 213              		.loc 1 7282 0
 214 0050 0C21     		movs	r1, #12
 215              	.L13:
 216              	.LVL19:
7302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/cckiGtEU.s 			page 133


7303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Stop potential conversion on going on regular group */
7305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ConversionGroup != ADC_INJECTED_GROUP)
 217              		.loc 1 7305 0
 218 0052 6029     		cmp	r1, #96
 219 0054 0CD0     		beq	.L17
7306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
7308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 220              		.loc 1 7308 0
 221 0056 2368     		ldr	r3, [r4]
 222 0058 9A68     		ldr	r2, [r3, #8]
 223 005a 12F0040F 		tst	r2, #4
 224 005e 07D0     		beq	.L17
7309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 225              		.loc 1 7309 0 discriminator 1
 226 0060 9A68     		ldr	r2, [r3, #8]
7308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 227              		.loc 1 7308 0 discriminator 1
 228 0062 12F0020F 		tst	r2, #2
 229 0066 03D1     		bne	.L17
7310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Stop conversions on regular group */
7312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->Instance->CR |= ADC_CR_ADSTP;
 230              		.loc 1 7312 0
 231 0068 9A68     		ldr	r2, [r3, #8]
 232 006a 42F01002 		orr	r2, r2, #16
 233 006e 9A60     		str	r2, [r3, #8]
 234              	.L17:
7313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Stop potential conversion on going on injected group */
7317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ConversionGroup != ADC_REGULAR_GROUP)
 235              		.loc 1 7317 0
 236 0070 0C29     		cmp	r1, #12
 237 0072 0CD0     		beq	.L18
7318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
7320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 238              		.loc 1 7320 0
 239 0074 2368     		ldr	r3, [r4]
 240 0076 9A68     		ldr	r2, [r3, #8]
 241 0078 12F0080F 		tst	r2, #8
 242 007c 07D0     		beq	.L18
7321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 243              		.loc 1 7321 0 discriminator 1
 244 007e 9A68     		ldr	r2, [r3, #8]
7320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 245              		.loc 1 7320 0 discriminator 1
 246 0080 12F0020F 		tst	r2, #2
 247 0084 03D1     		bne	.L18
7322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Stop conversions on injected group */
7324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->Instance->CR |= ADC_CR_JADSTP;
 248              		.loc 1 7324 0
 249 0086 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cckiGtEU.s 			page 134


 250 0088 42F02002 		orr	r2, r2, #32
 251 008c 9A60     		str	r2, [r3, #8]
 252              	.L18:
7325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** 
7328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Selection of start and stop bits in function of regular or injected group */
7329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     switch(ConversionGroup)
 253              		.loc 1 7329 0
 254 008e 6029     		cmp	r1, #96
 255 0090 05D0     		beq	.L26
 256 0092 6C29     		cmp	r1, #108
 257 0094 01D1     		bne	.L28
7330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_REGULAR_INJECTED_GROUP:
7332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 258              		.loc 1 7332 0
 259 0096 0C25     		movs	r5, #12
 260 0098 02E0     		b	.L20
 261              	.L28:
 262              	.LVL20:
7333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         break;
7334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     case ADC_INJECTED_GROUP:
7335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
7336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         break;
7337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Case ADC_REGULAR_GROUP */
7338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     default:
7339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 263              		.loc 1 7339 0
 264 009a 0425     		movs	r5, #4
7340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         break;
 265              		.loc 1 7340 0
 266 009c 00E0     		b	.L20
 267              	.LVL21:
 268              	.L26:
7335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 269              		.loc 1 7335 0
 270 009e 0825     		movs	r5, #8
 271              	.LVL22:
 272              	.L20:
7341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     /* Wait for conversion effectively stopped */
7344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
 273              		.loc 1 7344 0
 274 00a0 FFF7FEFF 		bl	HAL_GetTick
 275              	.LVL23:
 276 00a4 0646     		mov	r6, r0
 277              	.LVL24:
7345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       
7346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 278              		.loc 1 7346 0
 279 00a6 0EE0     		b	.L22
 280              	.LVL25:
 281              	.L23:
7347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     {
7348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
ARM GAS  /tmp/cckiGtEU.s 			page 135


 282              		.loc 1 7348 0
 283 00a8 FFF7FEFF 		bl	HAL_GetTick
 284              	.LVL26:
 285 00ac 801B     		subs	r0, r0, r6
 286 00ae 0B28     		cmp	r0, #11
 287 00b0 09D9     		bls	.L22
7349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       {
7350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
7351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 288              		.loc 1 7351 0
 289 00b2 636C     		ldr	r3, [r4, #68]
 290 00b4 43F01003 		orr	r3, r3, #16
 291 00b8 6364     		str	r3, [r4, #68]
7352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
7353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         /* Set ADC error code to ADC IP internal error */
7354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 292              		.loc 1 7354 0
 293 00ba A36C     		ldr	r3, [r4, #72]
 294 00bc 43F00103 		orr	r3, r3, #1
 295 00c0 A364     		str	r3, [r4, #72]
7355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         
7356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 296              		.loc 1 7356 0
 297 00c2 0120     		movs	r0, #1
 298 00c4 70BD     		pop	{r4, r5, r6, pc}
 299              	.LVL27:
 300              	.L22:
7346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 301              		.loc 1 7346 0 discriminator 1
 302 00c6 2368     		ldr	r3, [r4]
 303 00c8 9B68     		ldr	r3, [r3, #8]
 304 00ca 2B42     		tst	r3, r5
 305 00cc ECD1     		bne	.L23
7357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       }
7358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     }
7359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     
7360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   }
7361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****    
7362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   /* Return HAL status */
7363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 306              		.loc 1 7363 0
 307 00ce 0020     		movs	r0, #0
 308 00d0 70BD     		pop	{r4, r5, r6, pc}
 309              	.LVL28:
 310              	.L24:
 311 00d2 0020     		movs	r0, #0
 312              	.LVL29:
7364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 313              		.loc 1 7364 0
 314 00d4 70BD     		pop	{r4, r5, r6, pc}
 315              	.LVL30:
 316              	.L30:
 317 00d6 00BF     		.align	2
 318              	.L29:
 319 00d8 FF930900 		.word	627711
 320              		.cfi_endproc
 321              	.LFE164:
ARM GAS  /tmp/cckiGtEU.s 			page 136


 323              		.section	.text.ADC_Enable,"ax",%progbits
 324              		.align	2
 325              		.thumb
 326              		.thumb_func
 328              	ADC_Enable:
 329              	.LFB162:
7145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 330              		.loc 1 7145 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              	.LVL31:
 335 0000 38B5     		push	{r3, r4, r5, lr}
 336              	.LCFI2:
 337              		.cfi_def_cfa_offset 16
 338              		.cfi_offset 3, -16
 339              		.cfi_offset 4, -12
 340              		.cfi_offset 5, -8
 341              		.cfi_offset 14, -4
 342 0002 0446     		mov	r4, r0
 343              	.LVL32:
7152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 344              		.loc 1 7152 0
 345 0004 0368     		ldr	r3, [r0]
 346 0006 9A68     		ldr	r2, [r3, #8]
 347 0008 02F00302 		and	r2, r2, #3
 348 000c 012A     		cmp	r2, #1
 349 000e 05D1     		bne	.L37
7152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 350              		.loc 1 7152 0 is_stmt 0 discriminator 1
 351 0010 1A68     		ldr	r2, [r3]
 352 0012 12F0010F 		tst	r2, #1
 353 0016 03D1     		bne	.L38
7152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 354              		.loc 1 7152 0
 355 0018 0022     		movs	r2, #0
 356 001a 02E0     		b	.L32
 357              	.L37:
 358 001c 0022     		movs	r2, #0
 359 001e 00E0     		b	.L32
 360              	.L38:
 361 0020 0122     		movs	r2, #1
 362              	.L32:
7152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 363              		.loc 1 7152 0 discriminator 4
 364 0022 5ABB     		cbnz	r2, .L39
7155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 365              		.loc 1 7155 0 is_stmt 1
 366 0024 9968     		ldr	r1, [r3, #8]
 367 0026 164A     		ldr	r2, .L41
 368 0028 1142     		tst	r1, r2
 369 002a 09D0     		beq	.L34
7158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 370              		.loc 1 7158 0
 371 002c 636C     		ldr	r3, [r4, #68]
 372 002e 43F01003 		orr	r3, r3, #16
 373 0032 6364     		str	r3, [r4, #68]
ARM GAS  /tmp/cckiGtEU.s 			page 137


7161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 374              		.loc 1 7161 0
 375 0034 A36C     		ldr	r3, [r4, #72]
 376 0036 43F00103 		orr	r3, r3, #1
 377 003a A364     		str	r3, [r4, #72]
7163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
 378              		.loc 1 7163 0
 379 003c 0120     		movs	r0, #1
 380              	.LVL33:
 381 003e 38BD     		pop	{r3, r4, r5, pc}
 382              	.LVL34:
 383              	.L34:
7167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE(hadc);
 384              		.loc 1 7167 0
 385 0040 9A68     		ldr	r2, [r3, #8]
 386 0042 42F00102 		orr	r2, r2, #1
 387 0046 9A60     		str	r2, [r3, #8]
7170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 388              		.loc 1 7170 0
 389 0048 FFF7FEFF 		bl	HAL_GetTick
 390              	.LVL35:
 391 004c 0546     		mov	r5, r0
 392              	.LVL36:
7172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 393              		.loc 1 7172 0
 394 004e 0EE0     		b	.L35
 395              	.LVL37:
 396              	.L36:
7174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 397              		.loc 1 7174 0
 398 0050 FFF7FEFF 		bl	HAL_GetTick
 399              	.LVL38:
 400 0054 401B     		subs	r0, r0, r5
 401 0056 0228     		cmp	r0, #2
 402 0058 09D9     		bls	.L35
7177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 403              		.loc 1 7177 0
 404 005a 636C     		ldr	r3, [r4, #68]
 405 005c 43F01003 		orr	r3, r3, #16
 406 0060 6364     		str	r3, [r4, #68]
7180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 407              		.loc 1 7180 0
 408 0062 A36C     		ldr	r3, [r4, #72]
 409 0064 43F00103 		orr	r3, r3, #1
 410 0068 A364     		str	r3, [r4, #72]
7182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 411              		.loc 1 7182 0
 412 006a 0120     		movs	r0, #1
 413 006c 38BD     		pop	{r3, r4, r5, pc}
 414              	.LVL39:
 415              	.L35:
7172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 416              		.loc 1 7172 0 discriminator 1
 417 006e 2368     		ldr	r3, [r4]
 418 0070 1B68     		ldr	r3, [r3]
 419 0072 13F0010F 		tst	r3, #1
 420 0076 EBD0     		beq	.L36
ARM GAS  /tmp/cckiGtEU.s 			page 138


7188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 421              		.loc 1 7188 0
 422 0078 0020     		movs	r0, #0
 423 007a 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL40:
 425              	.L39:
 426 007c 0020     		movs	r0, #0
 427              	.LVL41:
7189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 428              		.loc 1 7189 0
 429 007e 38BD     		pop	{r3, r4, r5, pc}
 430              	.LVL42:
 431              	.L42:
 432              		.align	2
 433              	.L41:
 434 0080 3F000080 		.word	-2147483585
 435              		.cfi_endproc
 436              	.LFE162:
 438              		.section	.text.ADC_DMAError,"ax",%progbits
 439              		.align	2
 440              		.thumb
 441              		.thumb_func
 443              	ADC_DMAError:
 444              	.LFB161:
7119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 445              		.loc 1 7119 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL43:
 450 0000 08B5     		push	{r3, lr}
 451              	.LCFI3:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 3, -8
 454              		.cfi_offset 14, -4
7121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 455              		.loc 1 7121 0
 456 0002 406A     		ldr	r0, [r0, #36]
 457              	.LVL44:
7124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 458              		.loc 1 7124 0
 459 0004 436C     		ldr	r3, [r0, #68]
 460 0006 43F04003 		orr	r3, r3, #64
 461 000a 4364     		str	r3, [r0, #68]
7127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 462              		.loc 1 7127 0
 463 000c 836C     		ldr	r3, [r0, #72]
 464 000e 43F00403 		orr	r3, r3, #4
 465 0012 8364     		str	r3, [r0, #72]
7130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_ADC_ErrorCallback(hadc); 
 466              		.loc 1 7130 0
 467 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 468              	.LVL45:
 469 0018 08BD     		pop	{r3, pc}
 470              		.cfi_endproc
 471              	.LFE161:
 473 001a 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
ARM GAS  /tmp/cckiGtEU.s 			page 139


 474              		.align	2
 475              		.thumb
 476              		.thumb_func
 478              	ADC_DMAHalfConvCplt:
 479              	.LFB160:
7105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 480              		.loc 1 7105 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              	.LVL46:
 485 0000 08B5     		push	{r3, lr}
 486              	.LCFI4:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 3, -8
 489              		.cfi_offset 14, -4
 490              	.LVL47:
7110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 491              		.loc 1 7110 0
 492 0002 406A     		ldr	r0, [r0, #36]
 493              	.LVL48:
 494 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 495              	.LVL49:
 496 0008 08BD     		pop	{r3, pc}
 497              		.cfi_endproc
 498              	.LFE160:
 500 000a 00BF     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 501              		.align	2
 502              		.thumb
 503              		.thumb_func
 505              	ADC_DMAConvCplt:
 506              	.LFB159:
7062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 507              		.loc 1 7062 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              	.LVL50:
 512 0000 08B5     		push	{r3, lr}
 513              	.LCFI5:
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 3, -8
 516              		.cfi_offset 14, -4
7064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 517              		.loc 1 7064 0
 518 0002 436A     		ldr	r3, [r0, #36]
 519              	.LVL51:
7067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 520              		.loc 1 7067 0
 521 0004 5A6C     		ldr	r2, [r3, #68]
 522 0006 12F0500F 		tst	r2, #80
 523 000a 1AD1     		bne	.L46
7070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 524              		.loc 1 7070 0
 525 000c 5A6C     		ldr	r2, [r3, #68]
 526 000e 42F40072 		orr	r2, r2, #512
 527 0012 5A64     		str	r2, [r3, #68]
ARM GAS  /tmp/cckiGtEU.s 			page 140


7077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 528              		.loc 1 7077 0
 529 0014 1A68     		ldr	r2, [r3]
 530 0016 D268     		ldr	r2, [r2, #12]
 531 0018 12F4406F 		tst	r2, #3072
 532 001c 0DD1     		bne	.L47
7078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 533              		.loc 1 7078 0 discriminator 1
 534 001e DA69     		ldr	r2, [r3, #28]
7077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 535              		.loc 1 7077 0 discriminator 1
 536 0020 5AB9     		cbnz	r2, .L47
7081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 537              		.loc 1 7081 0
 538 0022 5A6C     		ldr	r2, [r3, #68]
 539 0024 22F48072 		bic	r2, r2, #256
 540 0028 5A64     		str	r2, [r3, #68]
7083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 541              		.loc 1 7083 0
 542 002a 5A6C     		ldr	r2, [r3, #68]
 543 002c 12F4805F 		tst	r2, #4096
 544 0030 03D1     		bne	.L47
7085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 545              		.loc 1 7085 0
 546 0032 5A6C     		ldr	r2, [r3, #68]
 547 0034 42F00102 		orr	r2, r2, #1
 548 0038 5A64     		str	r2, [r3, #68]
 549              	.L47:
7090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 550              		.loc 1 7090 0
 551 003a 1846     		mov	r0, r3
 552              	.LVL52:
 553 003c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 554              	.LVL53:
 555 0040 08BD     		pop	{r3, pc}
 556              	.LVL54:
 557              	.L46:
7095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 558              		.loc 1 7095 0
 559 0042 DB6B     		ldr	r3, [r3, #60]
 560              	.LVL55:
 561 0044 1B6B     		ldr	r3, [r3, #48]
 562 0046 9847     		blx	r3
 563              	.LVL56:
 564 0048 08BD     		pop	{r3, pc}
 565              		.cfi_endproc
 566              	.LFE159:
 568 004a 00BF     		.section	.text.HAL_ADC_Init,"ax",%progbits
 569              		.align	2
 570              		.global	HAL_ADC_Init
 571              		.thumb
 572              		.thumb_func
 574              	HAL_ADC_Init:
 575              	.LFB123:
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 576              		.loc 1 253 0
 577              		.cfi_startproc
ARM GAS  /tmp/cckiGtEU.s 			page 141


 578              		@ args = 0, pretend = 0, frame = 88
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              	.LVL57:
 581 0000 30B5     		push	{r4, r5, lr}
 582              	.LCFI6:
 583              		.cfi_def_cfa_offset 12
 584              		.cfi_offset 4, -12
 585              		.cfi_offset 5, -8
 586              		.cfi_offset 14, -4
 587 0002 97B0     		sub	sp, sp, #92
 588              	.LCFI7:
 589              		.cfi_def_cfa_offset 104
 590              	.LVL58:
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
 591              		.loc 1 258 0
 592 0004 0023     		movs	r3, #0
 593 0006 0093     		str	r3, [sp]
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc == NULL)
 594              		.loc 1 261 0
 595 0008 0446     		mov	r4, r0
 596 000a 0028     		cmp	r0, #0
 597 000c 00F0FE80 		beq	.L71
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 598              		.loc 1 291 0
 599 0010 436C     		ldr	r3, [r0, #68]
 600 0012 13F0100F 		tst	r3, #16
 601 0016 52D1     		bne	.L72
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->State == HAL_ADC_STATE_RESET)
 602              		.loc 1 301 0
 603 0018 436C     		ldr	r3, [r0, #68]
 604 001a 002B     		cmp	r3, #0
 605 001c 37D1     		bne	.L73
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 606              		.loc 1 304 0
 607 001e 8364     		str	r3, [r0, #72]
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = 0U;
 608              		.loc 1 307 0
 609 0020 0365     		str	r3, [r0, #80]
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0U;
 610              		.loc 1 308 0
 611 0022 C364     		str	r3, [r0, #76]
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->Lock = HAL_UNLOCKED;
 612              		.loc 1 311 0
 613 0024 80F84030 		strb	r3, [r0, #64]
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_MspInit(hadc);
 614              		.loc 1 314 0
 615 0028 FFF7FEFF 		bl	HAL_ADC_MspInit
 616              	.LVL59:
 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 617              		.loc 1 317 0
 618 002c 2368     		ldr	r3, [r4]
 619 002e 9B68     		ldr	r3, [r3, #8]
 620 0030 13F0805F 		tst	r3, #268435456
 621 0034 2DD1     		bne	.L74
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
 622              		.loc 1 326 0
 623 0036 2046     		mov	r0, r4
ARM GAS  /tmp/cckiGtEU.s 			page 142


 624 0038 FFF7FEFF 		bl	ADC_Disable
 625              	.LVL60:
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 626              		.loc 1 331 0
 627 003c 636C     		ldr	r3, [r4, #68]
 628 003e 13F0100F 		tst	r3, #16
 629 0042 27D1     		bne	.L52
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 630              		.loc 1 331 0 is_stmt 0 discriminator 1
 631 0044 30BB     		cbnz	r0, .L52
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State,
 632              		.loc 1 335 0 is_stmt 1
 633 0046 636C     		ldr	r3, [r4, #68]
 634 0048 23F48853 		bic	r3, r3, #4352
 635 004c 23F00203 		bic	r3, r3, #2
 636 0050 43F00203 		orr	r3, r3, #2
 637 0054 6364     		str	r3, [r4, #68]
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 638              		.loc 1 341 0
 639 0056 2368     		ldr	r3, [r4]
 640 0058 9A68     		ldr	r2, [r3, #8]
 641 005a 22F04052 		bic	r2, r2, #805306368
 642 005e 9A60     		str	r2, [r3, #8]
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 643              		.loc 1 343 0
 644 0060 2368     		ldr	r3, [r4]
 645 0062 9A68     		ldr	r2, [r3, #8]
 646 0064 42F08052 		orr	r2, r2, #268435456
 647 0068 9A60     		str	r2, [r3, #8]
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 648              		.loc 1 347 0
 649 006a 6A4B     		ldr	r3, .L80
 650 006c 1A68     		ldr	r2, [r3]
 651 006e 6A4B     		ldr	r3, .L80+4
 652 0070 A3FB0213 		umull	r1, r3, r3, r2
 653 0074 9B0C     		lsrs	r3, r3, #18
 654 0076 03EB8303 		add	r3, r3, r3, lsl #2
 655 007a 5B00     		lsls	r3, r3, #1
 656 007c 0093     		str	r3, [sp]
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 657              		.loc 1 348 0
 658 007e 02E0     		b	.L53
 659              	.L54:
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             wait_loop_index--;
 660              		.loc 1 350 0
 661 0080 009B     		ldr	r3, [sp]
 662 0082 013B     		subs	r3, r3, #1
 663 0084 0093     		str	r3, [sp]
 664              	.L53:
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 665              		.loc 1 348 0 discriminator 1
 666 0086 009B     		ldr	r3, [sp]
 667 0088 002B     		cmp	r3, #0
 668 008a F9D1     		bne	.L54
 669 008c 02E0     		b	.L52
 670              	.LVL61:
 671              	.L73:
ARM GAS  /tmp/cckiGtEU.s 			page 143


 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 672              		.loc 1 254 0
 673 008e 0020     		movs	r0, #0
 674              	.LVL62:
 675 0090 00E0     		b	.L52
 676              	.L74:
 677 0092 0020     		movs	r0, #0
 678              	.LVL63:
 679              	.L52:
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 680              		.loc 1 359 0
 681 0094 2368     		ldr	r3, [r4]
 682 0096 9A68     		ldr	r2, [r3, #8]
 683 0098 12F0805F 		tst	r2, #268435456
 684 009c 03D0     		beq	.L55
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 685              		.loc 1 360 0 discriminator 1
 686 009e 9B68     		ldr	r3, [r3, #8]
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 687              		.loc 1 359 0 discriminator 1
 688 00a0 13F0005F 		tst	r3, #536870912
 689 00a4 0CD0     		beq	.L51
 690              	.L55:
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 691              		.loc 1 363 0
 692 00a6 636C     		ldr	r3, [r4, #68]
 693 00a8 23F01203 		bic	r3, r3, #18
 694 00ac 43F01003 		orr	r3, r3, #16
 695 00b0 6364     		str	r3, [r4, #68]
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 696              		.loc 1 368 0
 697 00b2 A36C     		ldr	r3, [r4, #72]
 698 00b4 43F00103 		orr	r3, r3, #1
 699 00b8 A364     		str	r3, [r4, #72]
 700              	.LVL64:
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 701              		.loc 1 370 0
 702 00ba 0120     		movs	r0, #1
 703 00bc 00E0     		b	.L51
 704              	.LVL65:
 705              	.L72:
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 706              		.loc 1 254 0
 707 00be 0020     		movs	r0, #0
 708              	.LVL66:
 709              	.L51:
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 710              		.loc 1 379 0
 711 00c0 636C     		ldr	r3, [r4, #68]
 712 00c2 13F0100F 		tst	r3, #16
 713 00c6 40F09980 		bne	.L56
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 714              		.loc 1 379 0 is_stmt 0 discriminator 1
 715 00ca 0028     		cmp	r0, #0
 716 00cc 40F09680 		bne	.L56
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 717              		.loc 1 381 0 is_stmt 1
ARM GAS  /tmp/cckiGtEU.s 			page 144


 718 00d0 2368     		ldr	r3, [r4]
 719 00d2 9A68     		ldr	r2, [r3, #8]
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (tmp_hal_status == HAL_OK)                                &&
 720              		.loc 1 380 0
 721 00d4 12F0040F 		tst	r2, #4
 722 00d8 40F09080 		bne	.L56
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 723              		.loc 1 384 0
 724 00dc 626C     		ldr	r2, [r4, #68]
 725 00de 22F48172 		bic	r2, r2, #258
 726 00e2 42F00202 		orr	r2, r2, #2
 727 00e6 6264     		str	r2, [r4, #68]
 728              	.LVL67:
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 729              		.loc 1 396 0
 730 00e8 B3F1A04F 		cmp	r3, #1342177280
 731 00ec 02D1     		bne	.L57
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 732              		.loc 1 396 0 is_stmt 0 discriminator 1
 733 00ee 4B4A     		ldr	r2, .L80+8
 734 00f0 0192     		str	r2, [sp, #4]
 735 00f2 02E0     		b	.L58
 736              	.L57:
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 737              		.loc 1 396 0 discriminator 2
 738 00f4 4FF0A042 		mov	r2, #1342177280
 739 00f8 0192     		str	r2, [sp, #4]
 740              	.L58:
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 741              		.loc 1 402 0 is_stmt 1
 742 00fa 9A68     		ldr	r2, [r3, #8]
 743 00fc 02F00302 		and	r2, r2, #3
 744 0100 012A     		cmp	r2, #1
 745 0102 05D1     		bne	.L75
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 746              		.loc 1 402 0 is_stmt 0 discriminator 1
 747 0104 1B68     		ldr	r3, [r3]
 748 0106 13F0010F 		tst	r3, #1
 749 010a 03D1     		bne	.L76
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 750              		.loc 1 402 0
 751 010c 0023     		movs	r3, #0
 752 010e 02E0     		b	.L59
 753              	.L75:
 754 0110 0023     		movs	r3, #0
 755 0112 00E0     		b	.L59
 756              	.L76:
 757 0114 0123     		movs	r3, #1
 758              	.L59:
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 759              		.loc 1 402 0 discriminator 4
 760 0116 BBB9     		cbnz	r3, .L60
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 761              		.loc 1 403 0 is_stmt 1 discriminator 1
 762 0118 019B     		ldr	r3, [sp, #4]
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 763              		.loc 1 402 0 discriminator 1
ARM GAS  /tmp/cckiGtEU.s 			page 145


 764 011a 73B1     		cbz	r3, .L61
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 765              		.loc 1 404 0
 766 011c 9A68     		ldr	r2, [r3, #8]
 767 011e 02F00302 		and	r2, r2, #3
 768 0122 012A     		cmp	r2, #1
 769 0124 05D1     		bne	.L77
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 770              		.loc 1 404 0 is_stmt 0 discriminator 1
 771 0126 1B68     		ldr	r3, [r3]
 772 0128 13F0010F 		tst	r3, #1
 773 012c 03D1     		bne	.L78
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 774              		.loc 1 404 0
 775 012e 0023     		movs	r3, #0
 776 0130 02E0     		b	.L62
 777              	.L77:
 778 0132 0023     		movs	r3, #0
 779 0134 00E0     		b	.L62
 780              	.L78:
 781 0136 0123     		movs	r3, #1
 782              	.L62:
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 783              		.loc 1 403 0 is_stmt 1
 784 0138 33B9     		cbnz	r3, .L60
 785              	.L61:
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR       ,
 786              		.loc 1 419 0
 787 013a 394B     		ldr	r3, .L80+12
 788 013c 9968     		ldr	r1, [r3, #8]
 789 013e 21F44031 		bic	r1, r1, #196608
 790 0142 6268     		ldr	r2, [r4, #4]
 791 0144 0A43     		orrs	r2, r2, r1
 792 0146 9A60     		str	r2, [r3, #8]
 793              	.L60:
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 794              		.loc 1 433 0
 795 0148 E269     		ldr	r2, [r4, #28]
 796 014a 5303     		lsls	r3, r2, #13
 797 014c A16B     		ldr	r1, [r4, #56]
 798 014e 0129     		cmp	r1, #1
 799 0150 02D0     		beq	.L79
 800 0152 4FF48051 		mov	r1, #4096
 801 0156 00E0     		b	.L63
 802              	.L79:
 803 0158 0021     		movs	r1, #0
 804              	.L63:
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 805              		.loc 1 433 0 is_stmt 0 discriminator 3
 806 015a 1943     		orrs	r1, r1, r3
 807 015c E368     		ldr	r3, [r4, #12]
 808 015e 0B43     		orrs	r3, r3, r1
 809 0160 A168     		ldr	r1, [r4, #8]
 810 0162 0B43     		orrs	r3, r3, r1
 811              	.LVL68:
 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 812              		.loc 1 439 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/cckiGtEU.s 			page 146


 813 0164 616A     		ldr	r1, [r4, #36]
 814 0166 0129     		cmp	r1, #1
 815 0168 11D1     		bne	.L64
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 816              		.loc 1 441 0
 817 016a 32B9     		cbnz	r2, .L65
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 818              		.loc 1 445 0
 819 016c A26A     		ldr	r2, [r4, #40]
 820 016e 013A     		subs	r2, r2, #1
 821 0170 43EA4243 		orr	r3, r3, r2, lsl #17
 822              	.LVL69:
 823 0174 43F48033 		orr	r3, r3, #65536
 824              	.LVL70:
 825 0178 09E0     		b	.L64
 826              	.L65:
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 827              		.loc 1 455 0
 828 017a 626C     		ldr	r2, [r4, #68]
 829 017c 22F02202 		bic	r2, r2, #34
 830 0180 42F02002 		orr	r2, r2, #32
 831 0184 6264     		str	r2, [r4, #68]
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 832              		.loc 1 460 0
 833 0186 A26C     		ldr	r2, [r4, #72]
 834 0188 42F00102 		orr	r2, r2, #1
 835 018c A264     		str	r2, [r4, #72]
 836              	.L64:
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 837              		.loc 1 469 0
 838 018e E26A     		ldr	r2, [r4, #44]
 839 0190 012A     		cmp	r2, #1
 840 0192 02D0     		beq	.L66
 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 841              		.loc 1 471 0
 842 0194 216B     		ldr	r1, [r4, #48]
 843 0196 0A43     		orrs	r2, r2, r1
 844 0198 1343     		orrs	r3, r3, r2
 845              	.LVL71:
 846              	.L66:
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 847              		.loc 1 480 0
 848 019a 2268     		ldr	r2, [r4]
 849 019c 9168     		ldr	r1, [r2, #8]
 850 019e 11F00C0F 		tst	r1, #12
 851 01a2 0BD1     		bne	.L67
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 852              		.loc 1 482 0
 853 01a4 D168     		ldr	r1, [r2, #12]
 854 01a6 21F48041 		bic	r1, r1, #16384
 855 01aa 21F00201 		bic	r1, r1, #2
 856 01ae D160     		str	r1, [r2, #12]
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 857              		.loc 1 485 0
 858 01b0 A269     		ldr	r2, [r4, #24]
 859 01b2 616B     		ldr	r1, [r4, #52]
 860 01b4 4900     		lsls	r1, r1, #1
ARM GAS  /tmp/cckiGtEU.s 			page 147


 861 01b6 41EA8232 		orr	r2, r1, r2, lsl #14
 862 01ba 1343     		orrs	r3, r3, r2
 863              	.LVL72:
 864              	.L67:
 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CFGR,
 865              		.loc 1 490 0
 866 01bc 2168     		ldr	r1, [r4]
 867 01be CD68     		ldr	r5, [r1, #12]
 868 01c0 184A     		ldr	r2, .L80+16
 869 01c2 2A40     		ands	r2, r2, r5
 870 01c4 1343     		orrs	r3, r3, r2
 871              	.LVL73:
 872 01c6 CB60     		str	r3, [r1, #12]
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 873              		.loc 1 510 0
 874 01c8 2369     		ldr	r3, [r4, #16]
 875 01ca 012B     		cmp	r3, #1
 876 01cc 08D1     		bne	.L68
 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR1                     ,
 877              		.loc 1 513 0
 878 01ce 2368     		ldr	r3, [r4]
 879 01d0 196B     		ldr	r1, [r3, #48]
 880 01d2 21F00F01 		bic	r1, r1, #15
 881 01d6 226A     		ldr	r2, [r4, #32]
 882 01d8 013A     		subs	r2, r2, #1
 883 01da 0A43     		orrs	r2, r2, r1
 884 01dc 1A63     		str	r2, [r3, #48]
 885 01de 04E0     		b	.L69
 886              	.L68:
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 887              		.loc 1 519 0
 888 01e0 2368     		ldr	r3, [r4]
 889 01e2 1A6B     		ldr	r2, [r3, #48]
 890 01e4 22F00F02 		bic	r2, r2, #15
 891 01e8 1A63     		str	r2, [r3, #48]
 892              	.L69:
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 893              		.loc 1 523 0
 894 01ea 0023     		movs	r3, #0
 895 01ec A364     		str	r3, [r4, #72]
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 896              		.loc 1 526 0
 897 01ee 636C     		ldr	r3, [r4, #68]
 898 01f0 23F00303 		bic	r3, r3, #3
 899 01f4 43F00103 		orr	r3, r3, #1
 900 01f8 6364     		str	r3, [r4, #68]
 901 01fa 08E0     		b	.L50
 902              	.LVL74:
 903              	.L56:
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 904              		.loc 1 533 0
 905 01fc 636C     		ldr	r3, [r4, #68]
 906 01fe 23F01203 		bic	r3, r3, #18
 907 0202 43F01003 		orr	r3, r3, #16
 908 0206 6364     		str	r3, [r4, #68]
 909              	.LVL75:
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR; 
ARM GAS  /tmp/cckiGtEU.s 			page 148


 910              		.loc 1 537 0
 911 0208 0120     		movs	r0, #1
 912              	.LVL76:
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 913              		.loc 1 542 0
 914 020a 00E0     		b	.L50
 915              	.LVL77:
 916              	.L71:
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return HAL_ERROR;
 917              		.loc 1 263 0
 918 020c 0120     		movs	r0, #1
 919              	.LVL78:
 920              	.L50:
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 921              		.loc 1 543 0
 922 020e 17B0     		add	sp, sp, #92
 923              		@ sp needed
 924 0210 30BD     		pop	{r4, r5, pc}
 925              	.LVL79:
 926              	.L81:
 927 0212 00BF     		.align	2
 928              	.L80:
 929 0214 00000000 		.word	SystemCoreClock
 930 0218 83DE1B43 		.word	1125899907
 931 021c 00010050 		.word	1342177536
 932 0220 00030050 		.word	1342178048
 933 0224 07C0F0FF 		.word	-999417
 934              		.cfi_endproc
 935              	.LFE123:
 937              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 938              		.align	2
 939              		.global	HAL_ADC_DeInit
 940              		.thumb
 941              		.thumb_func
 943              	HAL_ADC_DeInit:
 944              	.LFB124:
 792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 945              		.loc 1 792 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 88
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              	.LVL80:
 950 0000 30B5     		push	{r4, r5, lr}
 951              	.LCFI8:
 952              		.cfi_def_cfa_offset 12
 953              		.cfi_offset 4, -12
 954              		.cfi_offset 5, -8
 955              		.cfi_offset 14, -4
 956 0002 97B0     		sub	sp, sp, #92
 957              	.LCFI9:
 958              		.cfi_def_cfa_offset 104
 959              	.LVL81:
 798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(hadc == NULL)
 960              		.loc 1 798 0
 961 0004 0446     		mov	r4, r0
 962 0006 0028     		cmp	r0, #0
 963 0008 00F0CF80 		beq	.L92
ARM GAS  /tmp/cckiGtEU.s 			page 149


 807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 964              		.loc 1 807 0
 965 000c 436C     		ldr	r3, [r0, #68]
 966 000e 43F00203 		orr	r3, r3, #2
 967 0012 4364     		str	r3, [r0, #68]
 810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 968              		.loc 1 810 0
 969 0014 6C21     		movs	r1, #108
 970 0016 FFF7FEFF 		bl	ADC_ConversionStop
 971              	.LVL82:
 813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 972              		.loc 1 813 0
 973 001a 0546     		mov	r5, r0
 974 001c 68B9     		cbnz	r0, .L84
 818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 975              		.loc 1 818 0
 976 001e 2368     		ldr	r3, [r4]
 977 0020 DA68     		ldr	r2, [r3, #12]
 978 0022 42F40012 		orr	r2, r2, #2097152
 979 0026 DA60     		str	r2, [r3, #12]
 821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
 980              		.loc 1 821 0
 981 0028 2046     		mov	r0, r4
 982              	.LVL83:
 983 002a FFF7FEFF 		bl	ADC_Disable
 984              	.LVL84:
 824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 985              		.loc 1 824 0
 986 002e 0546     		mov	r5, r0
 987 0030 10B9     		cbnz	r0, .L93
 827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->State = HAL_ADC_STATE_READY;
 988              		.loc 1 827 0
 989 0032 0123     		movs	r3, #1
 990 0034 6364     		str	r3, [r4, #68]
 991 0036 00E0     		b	.L84
 992              	.L93:
 831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 993              		.loc 1 831 0
 994 0038 0125     		movs	r5, #1
 995              	.L84:
 996              	.LVL85:
 838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 997              		.loc 1 838 0
 998 003a 002D     		cmp	r5, #0
 999 003c 40F0B080 		bne	.L85
 842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 1000              		.loc 1 842 0
 1001 0040 2268     		ldr	r2, [r4]
 1002 0042 5368     		ldr	r3, [r2, #4]
 1003 0044 23F4FF63 		bic	r3, r3, #2040
 1004 0048 23F00703 		bic	r3, r3, #7
 1005 004c 5360     		str	r3, [r2, #4]
 849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 1006              		.loc 1 849 0
 1007 004e 2368     		ldr	r3, [r4]
 1008 0050 40F2FF72 		movw	r2, #2047
 1009 0054 1A60     		str	r2, [r3]
ARM GAS  /tmp/cckiGtEU.s 			page 150


 866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 1010              		.loc 1 866 0
 1011 0056 2368     		ldr	r3, [r4]
 1012 0058 9A68     		ldr	r2, [r3, #8]
 1013 005a 22F0E042 		bic	r2, r2, #1879048192
 1014 005e 9A60     		str	r2, [r3, #8]
 868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 1015              		.loc 1 868 0
 1016 0060 2368     		ldr	r3, [r4]
 1017 0062 9A68     		ldr	r2, [r3, #8]
 1018 0064 42F00052 		orr	r2, r2, #536870912
 1019 0068 9A60     		str	r2, [r3, #8]
 871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 1020              		.loc 1 871 0
 1021 006a 2268     		ldr	r2, [r4]
 1022 006c D168     		ldr	r1, [r2, #12]
 1023 006e 504B     		ldr	r3, .L98
 1024 0070 0B40     		ands	r3, r3, r1
 1025 0072 D360     		str	r3, [r2, #12]
 879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 1026              		.loc 1 879 0
 1027 0074 2368     		ldr	r3, [r4]
 1028 0076 5A69     		ldr	r2, [r3, #20]
 1029 0078 22F07F52 		bic	r2, r2, #1069547520
 1030 007c 22F47F12 		bic	r2, r2, #4177920
 1031 0080 22F47F52 		bic	r2, r2, #16320
 1032 0084 22F03802 		bic	r2, r2, #56
 1033 0088 5A61     		str	r2, [r3, #20]
 884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 1034              		.loc 1 884 0
 1035 008a 2368     		ldr	r3, [r4]
 1036 008c 9A69     		ldr	r2, [r3, #24]
 1037 008e 02F07842 		and	r2, r2, #-134217728
 1038 0092 9A61     		str	r2, [r3, #24]
 889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 1039              		.loc 1 889 0
 1040 0094 2368     		ldr	r3, [r4]
 1041 0096 1A6A     		ldr	r2, [r3, #32]
 1042 0098 02F0F022 		and	r2, r2, #-268374016
 1043 009c 1A62     		str	r2, [r3, #32]
 892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 1044              		.loc 1 892 0
 1045 009e 2368     		ldr	r3, [r4]
 1046 00a0 5A6A     		ldr	r2, [r3, #36]
 1047 00a2 02F0FF22 		and	r2, r2, #-16711936
 1048 00a6 5A62     		str	r2, [r3, #36]
 895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 1049              		.loc 1 895 0
 1050 00a8 2368     		ldr	r3, [r4]
 1051 00aa 9A6A     		ldr	r2, [r3, #40]
 1052 00ac 02F0FF22 		and	r2, r2, #-16711936
 1053 00b0 9A62     		str	r2, [r3, #40]
 898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 1054              		.loc 1 898 0
 1055 00b2 2268     		ldr	r2, [r4]
 1056 00b4 116B     		ldr	r1, [r2, #48]
 1057 00b6 3F4B     		ldr	r3, .L98+4
ARM GAS  /tmp/cckiGtEU.s 			page 151


 1058 00b8 0B40     		ands	r3, r3, r1
 1059 00ba 1363     		str	r3, [r2, #48]
 902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 1060              		.loc 1 902 0
 1061 00bc 2368     		ldr	r3, [r4]
 1062 00be 596B     		ldr	r1, [r3, #52]
 1063 00c0 3D4A     		ldr	r2, .L98+8
 1064 00c2 1140     		ands	r1, r1, r2
 1065 00c4 5963     		str	r1, [r3, #52]
 906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 1066              		.loc 1 906 0
 1067 00c6 2368     		ldr	r3, [r4]
 1068 00c8 996B     		ldr	r1, [r3, #56]
 1069 00ca 0A40     		ands	r2, r2, r1
 1070 00cc 9A63     		str	r2, [r3, #56]
 910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 1071              		.loc 1 910 0
 1072 00ce 2268     		ldr	r2, [r4]
 1073 00d0 D36B     		ldr	r3, [r2, #60]
 1074 00d2 23F4FB63 		bic	r3, r3, #2008
 1075 00d6 23F00703 		bic	r3, r3, #7
 1076 00da D363     		str	r3, [r2, #60]
 916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 1077              		.loc 1 916 0
 1078 00dc 2268     		ldr	r2, [r4]
 1079 00de 116E     		ldr	r1, [r2, #96]
 1080 00e0 364B     		ldr	r3, .L98+12
 1081 00e2 1940     		ands	r1, r1, r3
 1082 00e4 1166     		str	r1, [r2, #96]
 918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 1083              		.loc 1 918 0
 1084 00e6 2268     		ldr	r2, [r4]
 1085 00e8 516E     		ldr	r1, [r2, #100]
 1086 00ea 1940     		ands	r1, r1, r3
 1087 00ec 5166     		str	r1, [r2, #100]
 920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 1088              		.loc 1 920 0
 1089 00ee 2268     		ldr	r2, [r4]
 1090 00f0 916E     		ldr	r1, [r2, #104]
 1091 00f2 1940     		ands	r1, r1, r3
 1092 00f4 9166     		str	r1, [r2, #104]
 922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 1093              		.loc 1 922 0
 1094 00f6 2268     		ldr	r2, [r4]
 1095 00f8 D16E     		ldr	r1, [r2, #108]
 1096 00fa 0B40     		ands	r3, r3, r1
 1097 00fc D366     		str	r3, [r2, #108]
 928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 1098              		.loc 1 928 0
 1099 00fe 2268     		ldr	r2, [r4]
 1100 0100 D2F8A030 		ldr	r3, [r2, #160]
 1101 0104 DB0C     		lsrs	r3, r3, #19
 1102 0106 DB04     		lsls	r3, r3, #19
 1103 0108 C2F8A030 		str	r3, [r2, #160]
 931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 1104              		.loc 1 931 0
 1105 010c 2268     		ldr	r2, [r4]
ARM GAS  /tmp/cckiGtEU.s 			page 152


 1106 010e D2F8A430 		ldr	r3, [r2, #164]
 1107 0112 DB0C     		lsrs	r3, r3, #19
 1108 0114 DB04     		lsls	r3, r3, #19
 1109 0116 C2F8A430 		str	r3, [r2, #164]
 934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 1110              		.loc 1 934 0
 1111 011a 2268     		ldr	r2, [r4]
 1112 011c D2F8B030 		ldr	r3, [r2, #176]
 1113 0120 DB0C     		lsrs	r3, r3, #19
 1114 0122 DB04     		lsls	r3, r3, #19
 1115 0124 C2F8B030 		str	r3, [r2, #176]
 937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 1116              		.loc 1 937 0
 1117 0128 2368     		ldr	r3, [r4]
 1118 012a D3F8B420 		ldr	r2, [r3, #180]
 1119 012e 22F07F12 		bic	r2, r2, #8323199
 1120 0132 C3F8B420 		str	r2, [r3, #180]
 1121              	.LVL86:
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 1122              		.loc 1 952 0
 1123 0136 2368     		ldr	r3, [r4]
 1124 0138 B3F1A04F 		cmp	r3, #1342177280
 1125 013c 02D1     		bne	.L86
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 1126              		.loc 1 952 0 is_stmt 0 discriminator 1
 1127 013e 204A     		ldr	r2, .L98+16
 1128 0140 0192     		str	r2, [sp, #4]
 1129 0142 02E0     		b	.L87
 1130              	.L86:
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 1131              		.loc 1 952 0 discriminator 2
 1132 0144 4FF0A042 		mov	r2, #1342177280
 1133 0148 0192     		str	r2, [sp, #4]
 1134              	.L87:
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 1135              		.loc 1 956 0 is_stmt 1
 1136 014a 9A68     		ldr	r2, [r3, #8]
 1137 014c 02F00302 		and	r2, r2, #3
 1138 0150 012A     		cmp	r2, #1
 1139 0152 05D1     		bne	.L94
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 1140              		.loc 1 956 0 is_stmt 0 discriminator 1
 1141 0154 1B68     		ldr	r3, [r3]
 1142 0156 13F0010F 		tst	r3, #1
 1143 015a 03D1     		bne	.L95
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 1144              		.loc 1 956 0
 1145 015c 0023     		movs	r3, #0
 1146 015e 02E0     		b	.L88
 1147              	.L94:
 1148 0160 0023     		movs	r3, #0
 1149 0162 00E0     		b	.L88
 1150              	.L95:
 1151 0164 0123     		movs	r3, #1
 1152              	.L88:
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 1153              		.loc 1 956 0 discriminator 4
ARM GAS  /tmp/cckiGtEU.s 			page 153


 1154 0166 ABB9     		cbnz	r3, .L89
 957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (tmphadcSharingSameCommonRegister.Instance == NULL) ||
 1155              		.loc 1 957 0 is_stmt 1 discriminator 1
 1156 0168 019B     		ldr	r3, [sp, #4]
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 1157              		.loc 1 956 0 discriminator 1
 1158 016a 73B1     		cbz	r3, .L90
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 1159              		.loc 1 958 0
 1160 016c 9A68     		ldr	r2, [r3, #8]
 1161 016e 02F00302 		and	r2, r2, #3
 1162 0172 012A     		cmp	r2, #1
 1163 0174 05D1     		bne	.L96
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 1164              		.loc 1 958 0 is_stmt 0 discriminator 1
 1165 0176 1B68     		ldr	r3, [r3]
 1166 0178 13F0010F 		tst	r3, #1
 1167 017c 03D1     		bne	.L97
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 1168              		.loc 1 958 0
 1169 017e 0023     		movs	r3, #0
 1170 0180 02E0     		b	.L91
 1171              	.L96:
 1172 0182 0023     		movs	r3, #0
 1173 0184 00E0     		b	.L91
 1174              	.L97:
 1175 0186 0123     		movs	r3, #1
 1176              	.L91:
 957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (tmphadcSharingSameCommonRegister.Instance == NULL) ||
 1177              		.loc 1 957 0 is_stmt 1
 1178 0188 23B9     		cbnz	r3, .L89
 1179              	.L90:
 967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 1180              		.loc 1 967 0
 1181 018a 0E4A     		ldr	r2, .L98+20
 1182 018c 9168     		ldr	r1, [r2, #8]
 1183 018e 0E4B     		ldr	r3, .L98+24
 1184 0190 0B40     		ands	r3, r3, r1
 1185 0192 9360     		str	r3, [r2, #8]
 1186              	.L89:
 989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_MspDeInit(hadc);
 1187              		.loc 1 989 0
 1188 0194 2046     		mov	r0, r4
 1189 0196 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 1190              	.LVL87:
 992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 1191              		.loc 1 992 0
 1192 019a 0023     		movs	r3, #0
 1193 019c A364     		str	r3, [r4, #72]
 995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_RESET;
 1194              		.loc 1 995 0
 1195 019e 6364     		str	r3, [r4, #68]
 1196              	.LVL88:
 1197              	.L85:
 999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1198              		.loc 1 999 0
 1199 01a0 0023     		movs	r3, #0
ARM GAS  /tmp/cckiGtEU.s 			page 154


 1200 01a2 84F84030 		strb	r3, [r4, #64]
1003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 1201              		.loc 1 1003 0
 1202 01a6 2846     		mov	r0, r5
 1203 01a8 00E0     		b	.L83
 1204              	.LVL89:
 1205              	.L92:
 800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      return HAL_ERROR;
 1206              		.loc 1 800 0
 1207 01aa 0120     		movs	r0, #1
 1208              	.LVL90:
 1209              	.L83:
1004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 1210              		.loc 1 1004 0
 1211 01ac 17B0     		add	sp, sp, #92
 1212              		@ sp needed
 1213 01ae 30BD     		pop	{r4, r5, pc}
 1214              	.LVL91:
 1215              	.L99:
 1216              		.align	2
 1217              	.L98:
 1218 01b0 04800080 		.word	-2147450876
 1219 01b4 300882E0 		.word	-528349136
 1220 01b8 200882E0 		.word	-528349152
 1221 01bc 00F0FF03 		.word	67104768
 1222 01c0 00010050 		.word	1342177536
 1223 01c4 00030050 		.word	1342178048
 1224 01c8 E0103CFE 		.word	-29617952
 1225              		.cfi_endproc
 1226              	.LFE124:
 1228              		.section	.text.HAL_ADC_Start,"ax",%progbits
 1229              		.align	2
 1230              		.global	HAL_ADC_Start
 1231              		.thumb
 1232              		.thumb_func
 1234              	HAL_ADC_Start:
 1235              	.LFB125:
1207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 1236              		.loc 1 1207 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              	.LVL92:
 1241 0000 10B5     		push	{r4, lr}
 1242              	.LCFI10:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 14, -4
 1246 0002 0446     		mov	r4, r0
 1247              	.LVL93:
1214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1248              		.loc 1 1214 0
 1249 0004 0368     		ldr	r3, [r0]
 1250 0006 9B68     		ldr	r3, [r3, #8]
 1251 0008 13F0040F 		tst	r3, #4
 1252 000c 72D1     		bne	.L111
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 155


 1253              		.loc 1 1217 0
 1254 000e 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1255 0012 012B     		cmp	r3, #1
 1256 0014 71D0     		beq	.L112
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1257              		.loc 1 1217 0 is_stmt 0 discriminator 2
 1258 0016 0123     		movs	r3, #1
 1259 0018 80F84030 		strb	r3, [r0, #64]
1220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 1260              		.loc 1 1220 0 is_stmt 1 discriminator 2
 1261 001c FFF7FEFF 		bl	ADC_Enable
 1262              	.LVL94:
1223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1263              		.loc 1 1223 0 discriminator 2
 1264 0020 0346     		mov	r3, r0
 1265 0022 0028     		cmp	r0, #0
 1266 0024 62D1     		bne	.L103
1228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1267              		.loc 1 1228 0
 1268 0026 626C     		ldr	r2, [r4, #68]
 1269 0028 22F47062 		bic	r2, r2, #3840
 1270 002c 22F00102 		bic	r2, r2, #1
 1271 0030 42F48072 		orr	r2, r2, #256
 1272 0034 6264     		str	r2, [r4, #68]
1235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1273              		.loc 1 1235 0
 1274 0036 324A     		ldr	r2, .L113
 1275 0038 9268     		ldr	r2, [r2, #8]
 1276 003a 12F01F0F 		tst	r2, #31
 1277 003e 03D0     		beq	.L104
1235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1278              		.loc 1 1235 0 is_stmt 0 discriminator 1
 1279 0040 2268     		ldr	r2, [r4]
 1280 0042 B2F1A04F 		cmp	r2, #1342177280
 1281 0046 0FD1     		bne	.L105
 1282              	.L104:
1238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1283              		.loc 1 1238 0 is_stmt 1
 1284 0048 626C     		ldr	r2, [r4, #68]
 1285 004a 22F48012 		bic	r2, r2, #1048576
 1286 004e 6264     		str	r2, [r4, #68]
1242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 1287              		.loc 1 1242 0
 1288 0050 2268     		ldr	r2, [r4]
 1289 0052 D268     		ldr	r2, [r2, #12]
 1290 0054 12F0007F 		tst	r2, #33554432
 1291 0058 1CD0     		beq	.L106
1244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1292              		.loc 1 1244 0
 1293 005a 626C     		ldr	r2, [r4, #68]
 1294 005c 22F44052 		bic	r2, r2, #12288
 1295 0060 42F48052 		orr	r2, r2, #4096
 1296 0064 6264     		str	r2, [r4, #68]
 1297 0066 15E0     		b	.L106
 1298              	.L105:
1250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1299              		.loc 1 1250 0
ARM GAS  /tmp/cckiGtEU.s 			page 156


 1300 0068 616C     		ldr	r1, [r4, #68]
 1301 006a 41F48011 		orr	r1, r1, #1048576
 1302 006e 6164     		str	r1, [r4, #68]
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1303              		.loc 1 1254 0
 1304 0070 B2F1A04F 		cmp	r2, #1342177280
 1305 0074 02D0     		beq	.L107
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1306              		.loc 1 1254 0 is_stmt 0 discriminator 2
 1307 0076 2349     		ldr	r1, .L113+4
 1308 0078 8A42     		cmp	r2, r1
 1309 007a 0BD1     		bne	.L106
 1310              	.L107:
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1311              		.loc 1 1254 0 discriminator 1
 1312 007c 4FF0A042 		mov	r2, #1342177280
 1313 0080 D268     		ldr	r2, [r2, #12]
 1314 0082 12F0007F 		tst	r2, #33554432
 1315 0086 05D0     		beq	.L106
1256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1316              		.loc 1 1256 0 is_stmt 1
 1317 0088 626C     		ldr	r2, [r4, #68]
 1318 008a 22F44052 		bic	r2, r2, #12288
 1319 008e 42F48052 		orr	r2, r2, #4096
 1320 0092 6264     		str	r2, [r4, #68]
 1321              	.L106:
1261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1322              		.loc 1 1261 0
 1323 0094 626C     		ldr	r2, [r4, #68]
 1324 0096 12F4805F 		tst	r2, #4096
 1325 009a 04D0     		beq	.L108
1264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1326              		.loc 1 1264 0
 1327 009c A26C     		ldr	r2, [r4, #72]
 1328 009e 22F00602 		bic	r2, r2, #6
 1329 00a2 A264     		str	r2, [r4, #72]
 1330 00a4 01E0     		b	.L109
 1331              	.L108:
1269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1332              		.loc 1 1269 0
 1333 00a6 0022     		movs	r2, #0
 1334 00a8 A264     		str	r2, [r4, #72]
 1335              	.L109:
1275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1336              		.loc 1 1275 0
 1337 00aa 0022     		movs	r2, #0
 1338 00ac 84F84020 		strb	r2, [r4, #64]
1280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1339              		.loc 1 1280 0
 1340 00b0 2268     		ldr	r2, [r4]
 1341 00b2 1C21     		movs	r1, #28
 1342 00b4 1160     		str	r1, [r2]
1289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 1343              		.loc 1 1289 0
 1344 00b6 124A     		ldr	r2, .L113
 1345 00b8 9268     		ldr	r2, [r2, #8]
 1346 00ba 12F01F0F 		tst	r2, #31
ARM GAS  /tmp/cckiGtEU.s 			page 157


 1347 00be 0FD0     		beq	.L110
1289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 1348              		.loc 1 1289 0 is_stmt 0 discriminator 1
 1349 00c0 0F4A     		ldr	r2, .L113
 1350 00c2 9268     		ldr	r2, [r2, #8]
 1351 00c4 02F01F02 		and	r2, r2, #31
 1352 00c8 052A     		cmp	r2, #5
 1353 00ca 09D0     		beq	.L110
 1354 00cc 0C4A     		ldr	r2, .L113
 1355 00ce 9268     		ldr	r2, [r2, #8]
 1356 00d0 02F01F02 		and	r2, r2, #31
 1357 00d4 092A     		cmp	r2, #9
 1358 00d6 03D0     		beq	.L110
 1359 00d8 2268     		ldr	r2, [r4]
 1360 00da B2F1A04F 		cmp	r2, #1342177280
 1361 00de 0AD1     		bne	.L101
 1362              	.L110:
1291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 1363              		.loc 1 1291 0 is_stmt 1
 1364 00e0 2268     		ldr	r2, [r4]
 1365 00e2 9168     		ldr	r1, [r2, #8]
 1366 00e4 41F00401 		orr	r1, r1, #4
 1367 00e8 9160     		str	r1, [r2, #8]
 1368 00ea 04E0     		b	.L101
 1369              	.L103:
1297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1370              		.loc 1 1297 0
 1371 00ec 0022     		movs	r2, #0
 1372 00ee 84F84020 		strb	r2, [r4, #64]
 1373 00f2 00E0     		b	.L101
 1374              	.LVL95:
 1375              	.L111:
1302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
 1376              		.loc 1 1302 0
 1377 00f4 0223     		movs	r3, #2
 1378              	.LVL96:
 1379              	.L101:
1306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 1380              		.loc 1 1306 0
 1381 00f6 1846     		mov	r0, r3
 1382 00f8 10BD     		pop	{r4, pc}
 1383              	.LVL97:
 1384              	.L112:
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1385              		.loc 1 1217 0
 1386 00fa 0220     		movs	r0, #2
 1387              	.LVL98:
1307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 1388              		.loc 1 1307 0
 1389 00fc 10BD     		pop	{r4, pc}
 1390              	.LVL99:
 1391              	.L114:
 1392 00fe 00BF     		.align	2
 1393              	.L113:
 1394 0100 00030050 		.word	1342178048
 1395 0104 00010050 		.word	1342177536
 1396              		.cfi_endproc
ARM GAS  /tmp/cckiGtEU.s 			page 158


 1397              	.LFE125:
 1399              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 1400              		.align	2
 1401              		.global	HAL_ADC_Stop
 1402              		.thumb
 1403              		.thumb_func
 1405              	HAL_ADC_Stop:
 1406              	.LFB126:
1413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 1407              		.loc 1 1413 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              	.LVL100:
 1412 0000 10B5     		push	{r4, lr}
 1413              	.LCFI11:
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 4, -8
 1416              		.cfi_offset 14, -4
 1417 0002 0446     		mov	r4, r0
 1418              	.LVL101:
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1419              		.loc 1 1420 0
 1420 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1421 0008 012B     		cmp	r3, #1
 1422 000a 19D0     		beq	.L118
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1423              		.loc 1 1420 0 is_stmt 0 discriminator 2
 1424 000c 0123     		movs	r3, #1
 1425 000e 80F84030 		strb	r3, [r0, #64]
1423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 1426              		.loc 1 1423 0 is_stmt 1 discriminator 2
 1427 0012 6C21     		movs	r1, #108
 1428 0014 FFF7FEFF 		bl	ADC_ConversionStop
 1429              	.LVL102:
1426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1430              		.loc 1 1426 0 discriminator 2
 1431 0018 0346     		mov	r3, r0
 1432 001a 60B9     		cbnz	r0, .L117
1429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
 1433              		.loc 1 1429 0
 1434 001c 2046     		mov	r0, r4
 1435              	.LVL103:
 1436 001e FFF7FEFF 		bl	ADC_Disable
 1437              	.LVL104:
1432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1438              		.loc 1 1432 0
 1439 0022 0346     		mov	r3, r0
 1440 0024 38B9     		cbnz	r0, .L117
1435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1441              		.loc 1 1435 0
 1442 0026 626C     		ldr	r2, [r4, #68]
 1443 0028 22F48852 		bic	r2, r2, #4352
 1444 002c 22F00102 		bic	r2, r2, #1
 1445 0030 42F00102 		orr	r2, r2, #1
 1446 0034 6264     		str	r2, [r4, #68]
 1447              	.L117:
ARM GAS  /tmp/cckiGtEU.s 			page 159


 1448              	.LVL105:
1442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1449              		.loc 1 1442 0
 1450 0036 0022     		movs	r2, #0
 1451 0038 84F84020 		strb	r2, [r4, #64]
1445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 1452              		.loc 1 1445 0
 1453 003c 1846     		mov	r0, r3
 1454 003e 10BD     		pop	{r4, pc}
 1455              	.LVL106:
 1456              	.L118:
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1457              		.loc 1 1420 0
 1458 0040 0220     		movs	r0, #2
 1459              	.LVL107:
1446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 1460              		.loc 1 1446 0
 1461 0042 10BD     		pop	{r4, pc}
 1462              		.cfi_endproc
 1463              	.LFE126:
 1465              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1466              		.align	2
 1467              		.global	HAL_ADC_PollForConversion
 1468              		.thumb
 1469              		.thumb_func
 1471              	HAL_ADC_PollForConversion:
 1472              	.LFB127:
1518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 1473              		.loc 1 1518 0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 0
 1476              		@ frame_needed = 0, uses_anonymous_args = 0
 1477              	.LVL108:
 1478 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1479              	.LCFI12:
 1480              		.cfi_def_cfa_offset 24
 1481              		.cfi_offset 4, -24
 1482              		.cfi_offset 5, -20
 1483              		.cfi_offset 6, -16
 1484              		.cfi_offset 7, -12
 1485              		.cfi_offset 8, -8
 1486              		.cfi_offset 14, -4
 1487 0004 0446     		mov	r4, r0
 1488 0006 0D46     		mov	r5, r1
 1489              	.LVL109:
1528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 1490              		.loc 1 1528 0
 1491 0008 4369     		ldr	r3, [r0, #20]
 1492 000a 082B     		cmp	r3, #8
 1493 000c 22D0     		beq	.L132
 1494              	.LVL110:
1548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 1495              		.loc 1 1548 0
 1496 000e 424B     		ldr	r3, .L137
 1497 0010 9B68     		ldr	r3, [r3, #8]
 1498 0012 13F01F0F 		tst	r3, #31
 1499 0016 0ED1     		bne	.L121
ARM GAS  /tmp/cckiGtEU.s 			page 160


1550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 1500              		.loc 1 1550 0
 1501 0018 0368     		ldr	r3, [r0]
 1502 001a DB68     		ldr	r3, [r3, #12]
 1503 001c 13F0010F 		tst	r3, #1
 1504 0020 1AD0     		beq	.L133
1553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1505              		.loc 1 1553 0
 1506 0022 436C     		ldr	r3, [r0, #68]
 1507 0024 43F02003 		orr	r3, r3, #32
 1508 0028 4364     		str	r3, [r0, #68]
1556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1509              		.loc 1 1556 0
 1510 002a 0023     		movs	r3, #0
 1511 002c 80F84030 		strb	r3, [r0, #64]
1558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 1512              		.loc 1 1558 0
 1513 0030 0120     		movs	r0, #1
 1514              	.LVL111:
 1515 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1516              	.LVL112:
 1517              	.L121:
1564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 1518              		.loc 1 1564 0
 1519 0036 384B     		ldr	r3, .L137
 1520 0038 9B68     		ldr	r3, [r3, #8]
 1521 003a 13F4404F 		tst	r3, #49152
 1522 003e 0DD0     		beq	.L134
1567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1523              		.loc 1 1567 0
 1524 0040 436C     		ldr	r3, [r0, #68]
 1525 0042 43F02003 		orr	r3, r3, #32
 1526 0046 4364     		str	r3, [r0, #68]
1570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1527              		.loc 1 1570 0
 1528 0048 0023     		movs	r3, #0
 1529 004a 80F84030 		strb	r3, [r0, #64]
1572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 1530              		.loc 1 1572 0
 1531 004e 0120     		movs	r0, #1
 1532              	.LVL113:
 1533 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1534              	.LVL114:
 1535              	.L132:
1530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 1536              		.loc 1 1530 0
 1537 0054 0826     		movs	r6, #8
 1538 0056 02E0     		b	.L120
 1539              	.LVL115:
 1540              	.L133:
1576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 1541              		.loc 1 1576 0
 1542 0058 0C26     		movs	r6, #12
 1543 005a 00E0     		b	.L120
 1544              	.L134:
 1545 005c 0C26     		movs	r6, #12
 1546              	.LVL116:
ARM GAS  /tmp/cckiGtEU.s 			page 161


 1547              	.L120:
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1548              		.loc 1 1583 0
 1549 005e 2E4B     		ldr	r3, .L137
 1550 0060 9B68     		ldr	r3, [r3, #8]
 1551 0062 13F01F0F 		tst	r3, #31
 1552 0066 03D0     		beq	.L123
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1553              		.loc 1 1583 0 is_stmt 0 discriminator 1
 1554 0068 2368     		ldr	r3, [r4]
 1555 006a B3F1A04F 		cmp	r3, #1342177280
 1556 006e 02D1     		bne	.L124
 1557              	.L123:
1585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 1558              		.loc 1 1585 0 is_stmt 1
 1559 0070 2368     		ldr	r3, [r4]
 1560 0072 DF68     		ldr	r7, [r3, #12]
 1561              	.LVL117:
 1562 0074 02E0     		b	.L125
 1563              	.LVL118:
 1564              	.L124:
1589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 1565              		.loc 1 1589 0
 1566 0076 4FF0A043 		mov	r3, #1342177280
 1567 007a DF68     		ldr	r7, [r3, #12]
 1568              	.LVL119:
 1569              	.L125:
1593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 1570              		.loc 1 1593 0
 1571 007c FFF7FEFF 		bl	HAL_GetTick
 1572              	.LVL120:
 1573 0080 8046     		mov	r8, r0
 1574              	.LVL121:
1596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1575              		.loc 1 1596 0
 1576 0082 13E0     		b	.L136
 1577              	.LVL122:
 1578              	.L129:
1599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1579              		.loc 1 1599 0
 1580 0084 B5F1FF3F 		cmp	r5, #-1
 1581 0088 10D0     		beq	.L136
1601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 1582              		.loc 1 1601 0
 1583 008a 2DB1     		cbz	r5, .L128
1601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 1584              		.loc 1 1601 0 is_stmt 0 discriminator 1
 1585 008c FFF7FEFF 		bl	HAL_GetTick
 1586              	.LVL123:
 1587 0090 C8EB0000 		rsb	r0, r8, r0
 1588 0094 A842     		cmp	r0, r5
 1589 0096 09D9     		bls	.L136
 1590              	.L128:
1604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1591              		.loc 1 1604 0 is_stmt 1
 1592 0098 636C     		ldr	r3, [r4, #68]
 1593 009a 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/cckiGtEU.s 			page 162


 1594 009e 6364     		str	r3, [r4, #68]
1607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1595              		.loc 1 1607 0
 1596 00a0 0023     		movs	r3, #0
 1597 00a2 84F84030 		strb	r3, [r4, #64]
1609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
 1598              		.loc 1 1609 0
 1599 00a6 0320     		movs	r0, #3
 1600 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1601              	.LVL124:
 1602              	.L136:
1596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1603              		.loc 1 1596 0 discriminator 1
 1604 00ac 2368     		ldr	r3, [r4]
 1605 00ae 1A68     		ldr	r2, [r3]
 1606 00b0 3242     		tst	r2, r6
 1607 00b2 E7D0     		beq	.L129
1615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1608              		.loc 1 1615 0
 1609 00b4 626C     		ldr	r2, [r4, #68]
 1610 00b6 42F40072 		orr	r2, r2, #512
 1611 00ba 6264     		str	r2, [r4, #68]
1619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 1612              		.loc 1 1619 0
 1613 00bc DA68     		ldr	r2, [r3, #12]
 1614 00be 12F4406F 		tst	r2, #3072
 1615 00c2 1FD1     		bne	.L130
1619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 1616              		.loc 1 1619 0 is_stmt 0 discriminator 1
 1617 00c4 17F4005F 		tst	r7, #8192
 1618 00c8 1CD1     		bne	.L130
1623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1619              		.loc 1 1623 0 is_stmt 1
 1620 00ca 1A68     		ldr	r2, [r3]
 1621 00cc 12F0080F 		tst	r2, #8
 1622 00d0 18D0     		beq	.L130
1627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1623              		.loc 1 1627 0
 1624 00d2 9A68     		ldr	r2, [r3, #8]
 1625 00d4 12F0040F 		tst	r2, #4
 1626 00d8 0CD1     		bne	.L131
1630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1627              		.loc 1 1630 0
 1628 00da 626C     		ldr	r2, [r4, #68]
 1629 00dc 22F48072 		bic	r2, r2, #256
 1630 00e0 6264     		str	r2, [r4, #68]
1632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1631              		.loc 1 1632 0
 1632 00e2 626C     		ldr	r2, [r4, #68]
 1633 00e4 12F4805F 		tst	r2, #4096
 1634 00e8 0CD1     		bne	.L130
1634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1635              		.loc 1 1634 0
 1636 00ea 626C     		ldr	r2, [r4, #68]
 1637 00ec 42F00102 		orr	r2, r2, #1
 1638 00f0 6264     		str	r2, [r4, #68]
 1639 00f2 07E0     		b	.L130
ARM GAS  /tmp/cckiGtEU.s 			page 163


 1640              	.L131:
1640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1641              		.loc 1 1640 0
 1642 00f4 626C     		ldr	r2, [r4, #68]
 1643 00f6 42F02002 		orr	r2, r2, #32
 1644 00fa 6264     		str	r2, [r4, #68]
1643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 1645              		.loc 1 1643 0
 1646 00fc A26C     		ldr	r2, [r4, #72]
 1647 00fe 42F00102 		orr	r2, r2, #1
 1648 0102 A264     		str	r2, [r4, #72]
 1649              	.L130:
1651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 1650              		.loc 1 1651 0
 1651 0104 17F4804F 		tst	r7, #16384
 1652 0108 03D1     		bne	.L135
1655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 1653              		.loc 1 1655 0
 1654 010a 1E60     		str	r6, [r3]
1659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 1655              		.loc 1 1659 0
 1656 010c 0020     		movs	r0, #0
 1657 010e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1658              	.LVL125:
 1659              	.L135:
 1660 0112 0020     		movs	r0, #0
1660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 1661              		.loc 1 1660 0
 1662 0114 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1663              	.LVL126:
 1664              	.L138:
 1665              		.align	2
 1666              	.L137:
 1667 0118 00030050 		.word	1342178048
 1668              		.cfi_endproc
 1669              	.LFE127:
 1671              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1672              		.align	2
 1673              		.global	HAL_ADC_PollForEvent
 1674              		.thumb
 1675              		.thumb_func
 1677              	HAL_ADC_PollForEvent:
 1678              	.LFB128:
1821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 1679              		.loc 1 1821 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              	.LVL127:
 1684 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1685              	.LCFI13:
 1686              		.cfi_def_cfa_offset 24
 1687              		.cfi_offset 3, -24
 1688              		.cfi_offset 4, -20
 1689              		.cfi_offset 5, -16
 1690              		.cfi_offset 6, -12
 1691              		.cfi_offset 7, -8
ARM GAS  /tmp/cckiGtEU.s 			page 164


 1692              		.cfi_offset 14, -4
 1693 0002 0546     		mov	r5, r0
 1694 0004 0C46     		mov	r4, r1
 1695 0006 1646     		mov	r6, r2
1829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 1696              		.loc 1 1829 0
 1697 0008 FFF7FEFF 		bl	HAL_GetTick
 1698              	.LVL128:
 1699 000c 0746     		mov	r7, r0
 1700              	.LVL129:
1832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1701              		.loc 1 1832 0
 1702 000e 11E0     		b	.L152
 1703              	.LVL130:
 1704              	.L144:
1835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1705              		.loc 1 1835 0
 1706 0010 B6F1FF3F 		cmp	r6, #-1
 1707 0014 0ED0     		beq	.L152
1837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1708              		.loc 1 1837 0
 1709 0016 26B1     		cbz	r6, .L142
1837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1710              		.loc 1 1837 0 is_stmt 0 discriminator 1
 1711 0018 FFF7FEFF 		bl	HAL_GetTick
 1712              	.LVL131:
 1713 001c C01B     		subs	r0, r0, r7
 1714 001e B042     		cmp	r0, r6
 1715 0020 08D9     		bls	.L152
 1716              	.L142:
1840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1717              		.loc 1 1840 0 is_stmt 1
 1718 0022 6B6C     		ldr	r3, [r5, #68]
 1719 0024 43F00403 		orr	r3, r3, #4
 1720 0028 6B64     		str	r3, [r5, #68]
1843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1721              		.loc 1 1843 0
 1722 002a 0023     		movs	r3, #0
 1723 002c 85F84030 		strb	r3, [r5, #64]
1845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
 1724              		.loc 1 1845 0
 1725 0030 0320     		movs	r0, #3
 1726 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1727              	.LVL132:
 1728              	.L152:
1832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1729              		.loc 1 1832 0 discriminator 1
 1730 0034 2B68     		ldr	r3, [r5]
 1731 0036 1968     		ldr	r1, [r3]
 1732 0038 2140     		ands	r1, r1, r4
 1733 003a A142     		cmp	r1, r4
 1734 003c E8D1     		bne	.L144
1851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   switch(EventType)
 1735              		.loc 1 1851 0
 1736 003e B4F5807F 		cmp	r4, #256
 1737 0042 12D0     		beq	.L146
 1738 0044 02D8     		bhi	.L147
ARM GAS  /tmp/cckiGtEU.s 			page 165


 1739 0046 802C     		cmp	r4, #128
 1740 0048 07D0     		beq	.L148
 1741 004a 2DE0     		b	.L145
 1742              	.L147:
 1743 004c B4F5007F 		cmp	r4, #512
 1744 0050 14D0     		beq	.L149
 1745 0052 B4F5806F 		cmp	r4, #1024
 1746 0056 1AD0     		beq	.L150
 1747 0058 26E0     		b	.L145
 1748              	.L148:
1864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1749              		.loc 1 1864 0
 1750 005a 6A6C     		ldr	r2, [r5, #68]
 1751 005c 42F48032 		orr	r2, r2, #65536
 1752 0060 6A64     		str	r2, [r5, #68]
1867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 1753              		.loc 1 1867 0
 1754 0062 8022     		movs	r2, #128
 1755 0064 1A60     		str	r2, [r3]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 1756              		.loc 1 1921 0
 1757 0066 0020     		movs	r0, #0
1868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
 1758              		.loc 1 1868 0
 1759 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1760              	.LVL133:
 1761              	.L146:
1873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 1762              		.loc 1 1873 0
 1763 006a 6A6C     		ldr	r2, [r5, #68]
 1764 006c 42F40032 		orr	r2, r2, #131072
 1765 0070 6A64     		str	r2, [r5, #68]
1876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 1766              		.loc 1 1876 0
 1767 0072 4FF48072 		mov	r2, #256
 1768 0076 1A60     		str	r2, [r3]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 1769              		.loc 1 1921 0
 1770 0078 0020     		movs	r0, #0
1877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
 1771              		.loc 1 1877 0
 1772 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1773              	.LVL134:
 1774              	.L149:
1882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 1775              		.loc 1 1882 0
 1776 007c 6A6C     		ldr	r2, [r5, #68]
 1777 007e 42F48022 		orr	r2, r2, #262144
 1778 0082 6A64     		str	r2, [r5, #68]
1885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 1779              		.loc 1 1885 0
 1780 0084 4FF40072 		mov	r2, #512
 1781 0088 1A60     		str	r2, [r3]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 1782              		.loc 1 1921 0
 1783 008a 0020     		movs	r0, #0
1886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
ARM GAS  /tmp/cckiGtEU.s 			page 166


 1784              		.loc 1 1886 0
 1785 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1786              	.LVL135:
 1787              	.L150:
1891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 1788              		.loc 1 1891 0
 1789 008e 6A6C     		ldr	r2, [r5, #68]
 1790 0090 42F48042 		orr	r2, r2, #16384
 1791 0094 6A64     		str	r2, [r5, #68]
1894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 1792              		.loc 1 1894 0
 1793 0096 AA6C     		ldr	r2, [r5, #72]
 1794 0098 42F00802 		orr	r2, r2, #8
 1795 009c AA64     		str	r2, [r5, #72]
1897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 1796              		.loc 1 1897 0
 1797 009e 4FF48062 		mov	r2, #1024
 1798 00a2 1A60     		str	r2, [r3]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 1799              		.loc 1 1921 0
 1800 00a4 0020     		movs	r0, #0
1898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     break;
 1801              		.loc 1 1898 0
 1802 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1803              	.LVL136:
 1804              	.L145:
1906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 1805              		.loc 1 1906 0
 1806 00a8 AA6B     		ldr	r2, [r5, #56]
 1807 00aa 012A     		cmp	r2, #1
 1808 00ac 07D1     		bne	.L151
1909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 1809              		.loc 1 1909 0
 1810 00ae 6A6C     		ldr	r2, [r5, #68]
 1811 00b0 42F48062 		orr	r2, r2, #1024
 1812 00b4 6A64     		str	r2, [r5, #68]
1912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 1813              		.loc 1 1912 0
 1814 00b6 AA6C     		ldr	r2, [r5, #72]
 1815 00b8 42F00202 		orr	r2, r2, #2
 1816 00bc AA64     		str	r2, [r5, #72]
 1817              	.L151:
1916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 1818              		.loc 1 1916 0
 1819 00be 1022     		movs	r2, #16
 1820 00c0 1A60     		str	r2, [r3]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 1821              		.loc 1 1921 0
 1822 00c2 0020     		movs	r0, #0
1922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 1823              		.loc 1 1922 0
 1824 00c4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1825              		.cfi_endproc
 1826              	.LFE128:
 1828 00c6 00BF     		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1829              		.align	2
 1830              		.global	HAL_ADC_Start_IT
ARM GAS  /tmp/cckiGtEU.s 			page 167


 1831              		.thumb
 1832              		.thumb_func
 1834              	HAL_ADC_Start_IT:
 1835              	.LFB129:
1999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 1836              		.loc 1 1999 0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              	.LVL137:
 1841 0000 10B5     		push	{r4, lr}
 1842              	.LCFI14:
 1843              		.cfi_def_cfa_offset 8
 1844              		.cfi_offset 4, -8
 1845              		.cfi_offset 14, -4
 1846 0002 0446     		mov	r4, r0
 1847              	.LVL138:
2006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1848              		.loc 1 2006 0
 1849 0004 0368     		ldr	r3, [r0]
 1850 0006 9B68     		ldr	r3, [r3, #8]
 1851 0008 13F0040F 		tst	r3, #4
 1852 000c 40F08F80 		bne	.L168
2009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1853              		.loc 1 2009 0
 1854 0010 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 1855 0014 012B     		cmp	r3, #1
 1856 0016 00F08D80 		beq	.L169
2009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1857              		.loc 1 2009 0 is_stmt 0 discriminator 2
 1858 001a 0123     		movs	r3, #1
 1859 001c 80F84030 		strb	r3, [r0, #64]
2012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 1860              		.loc 1 2012 0 is_stmt 1 discriminator 2
 1861 0020 FFF7FEFF 		bl	ADC_Enable
 1862              	.LVL139:
2015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1863              		.loc 1 2015 0 discriminator 2
 1864 0024 0346     		mov	r3, r0
 1865 0026 0028     		cmp	r0, #0
 1866 0028 7DD1     		bne	.L156
2020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1867              		.loc 1 2020 0
 1868 002a 626C     		ldr	r2, [r4, #68]
 1869 002c 22F47062 		bic	r2, r2, #3840
 1870 0030 22F00102 		bic	r2, r2, #1
 1871 0034 42F48072 		orr	r2, r2, #256
 1872 0038 6264     		str	r2, [r4, #68]
2027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1873              		.loc 1 2027 0
 1874 003a 3F4A     		ldr	r2, .L171
 1875 003c 9268     		ldr	r2, [r2, #8]
 1876 003e 12F01F0F 		tst	r2, #31
 1877 0042 03D0     		beq	.L157
2027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1878              		.loc 1 2027 0 is_stmt 0 discriminator 1
 1879 0044 2268     		ldr	r2, [r4]
ARM GAS  /tmp/cckiGtEU.s 			page 168


 1880 0046 B2F1A04F 		cmp	r2, #1342177280
 1881 004a 0FD1     		bne	.L158
 1882              	.L157:
2030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1883              		.loc 1 2030 0 is_stmt 1
 1884 004c 626C     		ldr	r2, [r4, #68]
 1885 004e 22F48012 		bic	r2, r2, #1048576
 1886 0052 6264     		str	r2, [r4, #68]
2034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 1887              		.loc 1 2034 0
 1888 0054 2268     		ldr	r2, [r4]
 1889 0056 D268     		ldr	r2, [r2, #12]
 1890 0058 12F0007F 		tst	r2, #33554432
 1891 005c 1CD0     		beq	.L159
2036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1892              		.loc 1 2036 0
 1893 005e 626C     		ldr	r2, [r4, #68]
 1894 0060 22F44052 		bic	r2, r2, #12288
 1895 0064 42F48052 		orr	r2, r2, #4096
 1896 0068 6264     		str	r2, [r4, #68]
 1897 006a 15E0     		b	.L159
 1898              	.L158:
2042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1899              		.loc 1 2042 0
 1900 006c 616C     		ldr	r1, [r4, #68]
 1901 006e 41F48011 		orr	r1, r1, #1048576
 1902 0072 6164     		str	r1, [r4, #68]
2046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1903              		.loc 1 2046 0
 1904 0074 B2F1A04F 		cmp	r2, #1342177280
 1905 0078 02D0     		beq	.L160
2046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1906              		.loc 1 2046 0 is_stmt 0 discriminator 2
 1907 007a 3049     		ldr	r1, .L171+4
 1908 007c 8A42     		cmp	r2, r1
 1909 007e 0BD1     		bne	.L159
 1910              	.L160:
2046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1911              		.loc 1 2046 0 discriminator 1
 1912 0080 4FF0A042 		mov	r2, #1342177280
 1913 0084 D268     		ldr	r2, [r2, #12]
 1914 0086 12F0007F 		tst	r2, #33554432
 1915 008a 05D0     		beq	.L159
2048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1916              		.loc 1 2048 0 is_stmt 1
 1917 008c 626C     		ldr	r2, [r4, #68]
 1918 008e 22F44052 		bic	r2, r2, #12288
 1919 0092 42F48052 		orr	r2, r2, #4096
 1920 0096 6264     		str	r2, [r4, #68]
 1921              	.L159:
2053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1922              		.loc 1 2053 0
 1923 0098 626C     		ldr	r2, [r4, #68]
 1924 009a 12F4805F 		tst	r2, #4096
 1925 009e 04D0     		beq	.L161
2056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1926              		.loc 1 2056 0
ARM GAS  /tmp/cckiGtEU.s 			page 169


 1927 00a0 A26C     		ldr	r2, [r4, #72]
 1928 00a2 22F00602 		bic	r2, r2, #6
 1929 00a6 A264     		str	r2, [r4, #72]
 1930 00a8 01E0     		b	.L162
 1931              	.L161:
2061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1932              		.loc 1 2061 0
 1933 00aa 0022     		movs	r2, #0
 1934 00ac A264     		str	r2, [r4, #72]
 1935              	.L162:
2067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1936              		.loc 1 2067 0
 1937 00ae 0022     		movs	r2, #0
 1938 00b0 84F84020 		strb	r2, [r4, #64]
2072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1939              		.loc 1 2072 0
 1940 00b4 2268     		ldr	r2, [r4]
 1941 00b6 1C21     		movs	r1, #28
 1942 00b8 1160     		str	r1, [r2]
2076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       switch(hadc->Init.EOCSelection)
 1943              		.loc 1 2076 0
 1944 00ba 6269     		ldr	r2, [r4, #20]
 1945 00bc 082A     		cmp	r2, #8
 1946 00be 0AD1     		bne	.L170
2079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1947              		.loc 1 2079 0
 1948 00c0 2268     		ldr	r2, [r4]
 1949 00c2 5168     		ldr	r1, [r2, #4]
 1950 00c4 21F00401 		bic	r1, r1, #4
 1951 00c8 5160     		str	r1, [r2, #4]
2080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 1952              		.loc 1 2080 0
 1953 00ca 2268     		ldr	r2, [r4]
 1954 00cc 5168     		ldr	r1, [r2, #4]
 1955 00ce 41F00801 		orr	r1, r1, #8
 1956 00d2 5160     		str	r1, [r2, #4]
2081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           break;
 1957              		.loc 1 2081 0
 1958 00d4 04E0     		b	.L165
 1959              	.L170:
2084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 1960              		.loc 1 2084 0
 1961 00d6 2268     		ldr	r2, [r4]
 1962 00d8 5168     		ldr	r1, [r2, #4]
 1963 00da 41F00C01 		orr	r1, r1, #12
 1964 00de 5160     		str	r1, [r2, #4]
 1965              	.L165:
2093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 1966              		.loc 1 2093 0
 1967 00e0 A26B     		ldr	r2, [r4, #56]
 1968 00e2 012A     		cmp	r2, #1
 1969 00e4 04D1     		bne	.L166
2095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 1970              		.loc 1 2095 0
 1971 00e6 2268     		ldr	r2, [r4]
 1972 00e8 5168     		ldr	r1, [r2, #4]
 1973 00ea 21F01001 		bic	r1, r1, #16
ARM GAS  /tmp/cckiGtEU.s 			page 170


 1974 00ee 5160     		str	r1, [r2, #4]
 1975              	.L166:
2105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 1976              		.loc 1 2105 0
 1977 00f0 114A     		ldr	r2, .L171
 1978 00f2 9268     		ldr	r2, [r2, #8]
 1979 00f4 12F01F0F 		tst	r2, #31
 1980 00f8 0FD0     		beq	.L167
2105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 1981              		.loc 1 2105 0 is_stmt 0 discriminator 1
 1982 00fa 0F4A     		ldr	r2, .L171
 1983 00fc 9268     		ldr	r2, [r2, #8]
 1984 00fe 02F01F02 		and	r2, r2, #31
 1985 0102 052A     		cmp	r2, #5
 1986 0104 09D0     		beq	.L167
 1987 0106 0C4A     		ldr	r2, .L171
 1988 0108 9268     		ldr	r2, [r2, #8]
 1989 010a 02F01F02 		and	r2, r2, #31
 1990 010e 092A     		cmp	r2, #9
 1991 0110 03D0     		beq	.L167
 1992 0112 2268     		ldr	r2, [r4]
 1993 0114 B2F1A04F 		cmp	r2, #1342177280
 1994 0118 0AD1     		bne	.L154
 1995              	.L167:
2107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 1996              		.loc 1 2107 0 is_stmt 1
 1997 011a 2268     		ldr	r2, [r4]
 1998 011c 9168     		ldr	r1, [r2, #8]
 1999 011e 41F00401 		orr	r1, r1, #4
 2000 0122 9160     		str	r1, [r2, #8]
 2001 0124 04E0     		b	.L154
 2002              	.L156:
2113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2003              		.loc 1 2113 0
 2004 0126 0022     		movs	r2, #0
 2005 0128 84F84020 		strb	r2, [r4, #64]
 2006 012c 00E0     		b	.L154
 2007              	.LVL140:
 2008              	.L168:
2118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
 2009              		.loc 1 2118 0
 2010 012e 0223     		movs	r3, #2
 2011              	.LVL141:
 2012              	.L154:
2122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2013              		.loc 1 2122 0
 2014 0130 1846     		mov	r0, r3
 2015 0132 10BD     		pop	{r4, pc}
 2016              	.LVL142:
 2017              	.L169:
2009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2018              		.loc 1 2009 0
 2019 0134 0220     		movs	r0, #2
 2020              	.LVL143:
2123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2021              		.loc 1 2123 0
 2022 0136 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cckiGtEU.s 			page 171


 2023              	.LVL144:
 2024              	.L172:
 2025              		.align	2
 2026              	.L171:
 2027 0138 00030050 		.word	1342178048
 2028 013c 00010050 		.word	1342177536
 2029              		.cfi_endproc
 2030              	.LFE129:
 2032              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 2033              		.align	2
 2034              		.global	HAL_ADC_Stop_IT
 2035              		.thumb
 2036              		.thumb_func
 2038              	HAL_ADC_Stop_IT:
 2039              	.LFB130:
2236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2040              		.loc 1 2236 0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 0
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
 2044              	.LVL145:
 2045 0000 10B5     		push	{r4, lr}
 2046              	.LCFI15:
 2047              		.cfi_def_cfa_offset 8
 2048              		.cfi_offset 4, -8
 2049              		.cfi_offset 14, -4
 2050 0002 0446     		mov	r4, r0
 2051              	.LVL146:
2243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2052              		.loc 1 2243 0
 2053 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2054 0008 012B     		cmp	r3, #1
 2055 000a 1ED0     		beq	.L176
2243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2056              		.loc 1 2243 0 is_stmt 0 discriminator 2
 2057 000c 0123     		movs	r3, #1
 2058 000e 80F84030 		strb	r3, [r0, #64]
2246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 2059              		.loc 1 2246 0 is_stmt 1 discriminator 2
 2060 0012 6C21     		movs	r1, #108
 2061 0014 FFF7FEFF 		bl	ADC_ConversionStop
 2062              	.LVL147:
2249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2063              		.loc 1 2249 0 discriminator 2
 2064 0018 0346     		mov	r3, r0
 2065 001a 88B9     		cbnz	r0, .L175
2253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 2066              		.loc 1 2253 0
 2067 001c 2368     		ldr	r3, [r4]
 2068 001e 5A68     		ldr	r2, [r3, #4]
 2069 0020 22F01C02 		bic	r2, r2, #28
 2070 0024 5A60     		str	r2, [r3, #4]
2256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
 2071              		.loc 1 2256 0
 2072 0026 2046     		mov	r0, r4
 2073              	.LVL148:
 2074 0028 FFF7FEFF 		bl	ADC_Disable
ARM GAS  /tmp/cckiGtEU.s 			page 172


 2075              	.LVL149:
2259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2076              		.loc 1 2259 0
 2077 002c 0346     		mov	r3, r0
 2078 002e 38B9     		cbnz	r0, .L175
2262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 2079              		.loc 1 2262 0
 2080 0030 626C     		ldr	r2, [r4, #68]
 2081 0032 22F48852 		bic	r2, r2, #4352
 2082 0036 22F00102 		bic	r2, r2, #1
 2083 003a 42F00102 		orr	r2, r2, #1
 2084 003e 6264     		str	r2, [r4, #68]
 2085              	.L175:
 2086              	.LVL150:
2269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2087              		.loc 1 2269 0
 2088 0040 0022     		movs	r2, #0
 2089 0042 84F84020 		strb	r2, [r4, #64]
2272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2090              		.loc 1 2272 0
 2091 0046 1846     		mov	r0, r3
 2092 0048 10BD     		pop	{r4, pc}
 2093              	.LVL151:
 2094              	.L176:
2243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2095              		.loc 1 2243 0
 2096 004a 0220     		movs	r0, #2
 2097              	.LVL152:
2273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2098              		.loc 1 2273 0
 2099 004c 10BD     		pop	{r4, pc}
 2100              		.cfi_endproc
 2101              	.LFE130:
 2103 004e 00BF     		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 2104              		.align	2
 2105              		.global	HAL_ADC_Start_DMA
 2106              		.thumb
 2107              		.thumb_func
 2109              	HAL_ADC_Start_DMA:
 2110              	.LFB131:
2342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2111              		.loc 1 2342 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 0
 2114              		@ frame_needed = 0, uses_anonymous_args = 0
 2115              	.LVL153:
 2116 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2117              	.LCFI16:
 2118              		.cfi_def_cfa_offset 24
 2119              		.cfi_offset 3, -24
 2120              		.cfi_offset 4, -20
 2121              		.cfi_offset 5, -16
 2122              		.cfi_offset 6, -12
 2123              		.cfi_offset 7, -8
 2124              		.cfi_offset 14, -4
 2125 0002 0446     		mov	r4, r0
 2126 0004 0F46     		mov	r7, r1
ARM GAS  /tmp/cckiGtEU.s 			page 173


 2127 0006 1646     		mov	r6, r2
 2128              	.LVL154:
2349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2129              		.loc 1 2349 0
 2130 0008 0068     		ldr	r0, [r0]
 2131              	.LVL155:
 2132 000a 8068     		ldr	r0, [r0, #8]
 2133 000c 10F0040F 		tst	r0, #4
 2134 0010 40F08480 		bne	.L188
2352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2135              		.loc 1 2352 0
 2136 0014 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 2137 0018 012B     		cmp	r3, #1
 2138 001a 00F08280 		beq	.L189
2352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2139              		.loc 1 2352 0 is_stmt 0 discriminator 2
 2140 001e 0123     		movs	r3, #1
 2141 0020 84F84030 		strb	r3, [r4, #64]
2357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 2142              		.loc 1 2357 0 is_stmt 1 discriminator 2
 2143 0024 404B     		ldr	r3, .L190
 2144 0026 9B68     		ldr	r3, [r3, #8]
 2145 0028 13F01F0F 		tst	r3, #31
 2146 002c 71D1     		bne	.L180
2360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(hadc);
 2147              		.loc 1 2360 0
 2148 002e 2046     		mov	r0, r4
 2149 0030 FFF7FEFF 		bl	ADC_Enable
 2150              	.LVL156:
2363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 2151              		.loc 1 2363 0
 2152 0034 0546     		mov	r5, r0
 2153 0036 0028     		cmp	r0, #0
 2154 0038 67D1     		bne	.L181
2368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 2155              		.loc 1 2368 0
 2156 003a 636C     		ldr	r3, [r4, #68]
 2157 003c 23F47063 		bic	r3, r3, #3840
 2158 0040 23F00103 		bic	r3, r3, #1
 2159 0044 43F48073 		orr	r3, r3, #256
 2160 0048 6364     		str	r3, [r4, #68]
2375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 2161              		.loc 1 2375 0
 2162 004a 374B     		ldr	r3, .L190
 2163 004c 9B68     		ldr	r3, [r3, #8]
 2164 004e 13F01F0F 		tst	r3, #31
 2165 0052 03D0     		beq	.L182
2375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 2166              		.loc 1 2375 0 is_stmt 0 discriminator 1
 2167 0054 2368     		ldr	r3, [r4]
 2168 0056 B3F1A04F 		cmp	r3, #1342177280
 2169 005a 0FD1     		bne	.L183
 2170              	.L182:
2378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 2171              		.loc 1 2378 0 is_stmt 1
 2172 005c 636C     		ldr	r3, [r4, #68]
 2173 005e 23F48013 		bic	r3, r3, #1048576
ARM GAS  /tmp/cckiGtEU.s 			page 174


 2174 0062 6364     		str	r3, [r4, #68]
2382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 2175              		.loc 1 2382 0
 2176 0064 2368     		ldr	r3, [r4]
 2177 0066 DB68     		ldr	r3, [r3, #12]
 2178 0068 13F0007F 		tst	r3, #33554432
 2179 006c 1CD0     		beq	.L184
2384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 2180              		.loc 1 2384 0
 2181 006e 636C     		ldr	r3, [r4, #68]
 2182 0070 23F44053 		bic	r3, r3, #12288
 2183 0074 43F48053 		orr	r3, r3, #4096
 2184 0078 6364     		str	r3, [r4, #68]
 2185 007a 15E0     		b	.L184
 2186              	.L183:
2390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 2187              		.loc 1 2390 0
 2188 007c 626C     		ldr	r2, [r4, #68]
 2189 007e 42F48012 		orr	r2, r2, #1048576
 2190 0082 6264     		str	r2, [r4, #68]
2394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 2191              		.loc 1 2394 0
 2192 0084 B3F1A04F 		cmp	r3, #1342177280
 2193 0088 02D0     		beq	.L185
2394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 2194              		.loc 1 2394 0 is_stmt 0 discriminator 2
 2195 008a 284A     		ldr	r2, .L190+4
 2196 008c 9342     		cmp	r3, r2
 2197 008e 0BD1     		bne	.L184
 2198              	.L185:
2394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 2199              		.loc 1 2394 0 discriminator 1
 2200 0090 4FF0A043 		mov	r3, #1342177280
 2201 0094 DB68     		ldr	r3, [r3, #12]
 2202 0096 13F0007F 		tst	r3, #33554432
 2203 009a 05D0     		beq	.L184
2396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 2204              		.loc 1 2396 0 is_stmt 1
 2205 009c 636C     		ldr	r3, [r4, #68]
 2206 009e 23F44053 		bic	r3, r3, #12288
 2207 00a2 43F48053 		orr	r3, r3, #4096
 2208 00a6 6364     		str	r3, [r4, #68]
 2209              	.L184:
2401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 2210              		.loc 1 2401 0
 2211 00a8 636C     		ldr	r3, [r4, #68]
 2212 00aa 13F4805F 		tst	r3, #4096
 2213 00ae 04D0     		beq	.L186
2404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 2214              		.loc 1 2404 0
 2215 00b0 A36C     		ldr	r3, [r4, #72]
 2216 00b2 23F00603 		bic	r3, r3, #6
 2217 00b6 A364     		str	r3, [r4, #72]
 2218 00b8 01E0     		b	.L187
 2219              	.L186:
2409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_CLEAR_ERRORCODE(hadc);
 2220              		.loc 1 2409 0
ARM GAS  /tmp/cckiGtEU.s 			page 175


 2221 00ba 0023     		movs	r3, #0
 2222 00bc A364     		str	r3, [r4, #72]
 2223              	.L187:
2415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 2224              		.loc 1 2415 0 discriminator 1
 2225 00be 0023     		movs	r3, #0
 2226 00c0 84F84030 		strb	r3, [r4, #64]
2419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 2227              		.loc 1 2419 0 discriminator 1
 2228 00c4 E36B     		ldr	r3, [r4, #60]
 2229 00c6 1A4A     		ldr	r2, .L190+8
 2230 00c8 9A62     		str	r2, [r3, #40]
2422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 2231              		.loc 1 2422 0 discriminator 1
 2232 00ca E36B     		ldr	r3, [r4, #60]
 2233 00cc 194A     		ldr	r2, .L190+12
 2234 00ce DA62     		str	r2, [r3, #44]
2425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 2235              		.loc 1 2425 0 discriminator 1
 2236 00d0 E36B     		ldr	r3, [r4, #60]
 2237 00d2 194A     		ldr	r2, .L190+16
 2238 00d4 1A63     		str	r2, [r3, #48]
2434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 2239              		.loc 1 2434 0 discriminator 1
 2240 00d6 2368     		ldr	r3, [r4]
 2241 00d8 1C22     		movs	r2, #28
 2242 00da 1A60     		str	r2, [r3]
2437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 2243              		.loc 1 2437 0 discriminator 1
 2244 00dc 2368     		ldr	r3, [r4]
 2245 00de 5A68     		ldr	r2, [r3, #4]
 2246 00e0 42F01002 		orr	r2, r2, #16
 2247 00e4 5A60     		str	r2, [r3, #4]
2440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 2248              		.loc 1 2440 0 discriminator 1
 2249 00e6 2368     		ldr	r3, [r4]
 2250 00e8 DA68     		ldr	r2, [r3, #12]
 2251 00ea 42F00102 		orr	r2, r2, #1
 2252 00ee DA60     		str	r2, [r3, #12]
2443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 2253              		.loc 1 2443 0 discriminator 1
 2254 00f0 2168     		ldr	r1, [r4]
 2255 00f2 E06B     		ldr	r0, [r4, #60]
 2256              	.LVL157:
 2257 00f4 4031     		adds	r1, r1, #64
 2258 00f6 3A46     		mov	r2, r7
 2259 00f8 3346     		mov	r3, r6
 2260 00fa FFF7FEFF 		bl	HAL_DMA_Start_IT
 2261              	.LVL158:
2449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 2262              		.loc 1 2449 0 discriminator 1
 2263 00fe 2368     		ldr	r3, [r4]
 2264 0100 9A68     		ldr	r2, [r3, #8]
 2265 0102 42F00402 		orr	r2, r2, #4
 2266 0106 9A60     		str	r2, [r3, #8]
 2267 0108 09E0     		b	.L178
 2268              	.LVL159:
ARM GAS  /tmp/cckiGtEU.s 			page 176


 2269              	.L181:
2455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 2270              		.loc 1 2455 0
 2271 010a 0023     		movs	r3, #0
 2272 010c 84F84030 		strb	r3, [r4, #64]
 2273 0110 05E0     		b	.L178
 2274              	.LVL160:
 2275              	.L180:
2463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2276              		.loc 1 2463 0
 2277 0112 0023     		movs	r3, #0
 2278 0114 84F84030 		strb	r3, [r4, #64]
2460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 2279              		.loc 1 2460 0
 2280 0118 0125     		movs	r5, #1
 2281 011a 00E0     		b	.L178
 2282              	.LVL161:
 2283              	.L188:
2468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
 2284              		.loc 1 2468 0
 2285 011c 0225     		movs	r5, #2
 2286              	.LVL162:
 2287              	.L178:
2472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2288              		.loc 1 2472 0
 2289 011e 2846     		mov	r0, r5
 2290 0120 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2291              	.LVL163:
 2292              	.L189:
2352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2293              		.loc 1 2352 0
 2294 0122 0220     		movs	r0, #2
2473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2295              		.loc 1 2473 0
 2296 0124 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2297              	.LVL164:
 2298              	.L191:
 2299 0126 00BF     		.align	2
 2300              	.L190:
 2301 0128 00030050 		.word	1342178048
 2302 012c 00010050 		.word	1342177536
 2303 0130 00000000 		.word	ADC_DMAConvCplt
 2304 0134 00000000 		.word	ADC_DMAHalfConvCplt
 2305 0138 00000000 		.word	ADC_DMAError
 2306              		.cfi_endproc
 2307              	.LFE131:
 2309              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2310              		.align	2
 2311              		.global	HAL_ADC_Stop_DMA
 2312              		.thumb
 2313              		.thumb_func
 2315              	HAL_ADC_Stop_DMA:
 2316              	.LFB132:
2613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {  
 2317              		.loc 1 2613 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cckiGtEU.s 			page 177


 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              	.LVL165:
 2322 0000 38B5     		push	{r3, r4, r5, lr}
 2323              	.LCFI17:
 2324              		.cfi_def_cfa_offset 16
 2325              		.cfi_offset 3, -16
 2326              		.cfi_offset 4, -12
 2327              		.cfi_offset 5, -8
 2328              		.cfi_offset 14, -4
 2329 0002 0446     		mov	r4, r0
 2330              	.LVL166:
2620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2331              		.loc 1 2620 0
 2332 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2333 0008 012B     		cmp	r3, #1
 2334 000a 31D0     		beq	.L198
2620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2335              		.loc 1 2620 0 is_stmt 0 discriminator 2
 2336 000c 0123     		movs	r3, #1
 2337 000e 80F84030 		strb	r3, [r0, #64]
2623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 2338              		.loc 1 2623 0 is_stmt 1 discriminator 2
 2339 0012 6C21     		movs	r1, #108
 2340 0014 FFF7FEFF 		bl	ADC_ConversionStop
 2341              	.LVL167:
2626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2342              		.loc 1 2626 0 discriminator 2
 2343 0018 0546     		mov	r5, r0
 2344 001a 20BB     		cbnz	r0, .L194
2629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 2345              		.loc 1 2629 0
 2346 001c 2368     		ldr	r3, [r4]
 2347 001e DA68     		ldr	r2, [r3, #12]
 2348 0020 22F00102 		bic	r2, r2, #1
 2349 0024 DA60     		str	r2, [r3, #12]
2633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 2350              		.loc 1 2633 0
 2351 0026 E06B     		ldr	r0, [r4, #60]
 2352              	.LVL168:
 2353 0028 FFF7FEFF 		bl	HAL_DMA_Abort
 2354              	.LVL169:
2636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 2355              		.loc 1 2636 0
 2356 002c 0546     		mov	r5, r0
 2357 002e 18B1     		cbz	r0, .L195
2639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 2358              		.loc 1 2639 0
 2359 0030 636C     		ldr	r3, [r4, #68]
 2360 0032 43F04003 		orr	r3, r3, #64
 2361 0036 6364     		str	r3, [r4, #68]
 2362              	.L195:
2643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 2363              		.loc 1 2643 0
 2364 0038 2368     		ldr	r3, [r4]
 2365 003a 5A68     		ldr	r2, [r3, #4]
 2366 003c 22F01002 		bic	r2, r2, #16
 2367 0040 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cckiGtEU.s 			page 178


2648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2368              		.loc 1 2648 0
 2369 0042 25B9     		cbnz	r5, .L196
2650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 2370              		.loc 1 2650 0
 2371 0044 2046     		mov	r0, r4
 2372              	.LVL170:
 2373 0046 FFF7FEFF 		bl	ADC_Disable
 2374              	.LVL171:
 2375 004a 0546     		mov	r5, r0
 2376              	.LVL172:
 2377 004c 02E0     		b	.L197
 2378              	.L196:
2654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
 2379              		.loc 1 2654 0
 2380 004e 2046     		mov	r0, r4
 2381              	.LVL173:
 2382 0050 FFF7FEFF 		bl	ADC_Disable
 2383              	.LVL174:
 2384              	.L197:
2658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2385              		.loc 1 2658 0
 2386 0054 3DB9     		cbnz	r5, .L194
2661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 2387              		.loc 1 2661 0
 2388 0056 636C     		ldr	r3, [r4, #68]
 2389 0058 23F48853 		bic	r3, r3, #4352
 2390 005c 23F00103 		bic	r3, r3, #1
 2391 0060 43F00103 		orr	r3, r3, #1
 2392 0064 6364     		str	r3, [r4, #68]
 2393              	.LVL175:
 2394              	.L194:
2669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2395              		.loc 1 2669 0
 2396 0066 0023     		movs	r3, #0
 2397 0068 84F84030 		strb	r3, [r4, #64]
2672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2398              		.loc 1 2672 0
 2399 006c 2846     		mov	r0, r5
 2400 006e 38BD     		pop	{r3, r4, r5, pc}
 2401              	.LVL176:
 2402              	.L198:
2620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2403              		.loc 1 2620 0
 2404 0070 0220     		movs	r0, #2
 2405              	.LVL177:
2673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2406              		.loc 1 2673 0
 2407 0072 38BD     		pop	{r3, r4, r5, pc}
 2408              		.cfi_endproc
 2409              	.LFE132:
 2411              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2412              		.align	2
 2413              		.global	HAL_ADC_GetValue
 2414              		.thumb
 2415              		.thumb_func
 2417              	HAL_ADC_GetValue:
ARM GAS  /tmp/cckiGtEU.s 			page 179


 2418              	.LFB133:
2763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2419              		.loc 1 2763 0
 2420              		.cfi_startproc
 2421              		@ args = 0, pretend = 0, frame = 0
 2422              		@ frame_needed = 0, uses_anonymous_args = 0
 2423              		@ link register save eliminated.
 2424              	.LVL178:
2771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return hadc->Instance->DR;
 2425              		.loc 1 2771 0
 2426 0000 0368     		ldr	r3, [r0]
 2427 0002 186C     		ldr	r0, [r3, #64]
 2428              	.LVL179:
2772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2429              		.loc 1 2772 0
 2430 0004 7047     		bx	lr
 2431              		.cfi_endproc
 2432              	.LFE133:
 2434 0006 00BF     		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
 2435              		.align	2
 2436              		.global	HAL_ADCEx_Calibration_Start
 2437              		.thumb
 2438              		.thumb_func
 2440              	HAL_ADCEx_Calibration_Start:
 2441              	.LFB135:
3248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2442              		.loc 1 3248 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 2446              	.LVL180:
 2447 0000 70B5     		push	{r4, r5, r6, lr}
 2448              	.LCFI18:
 2449              		.cfi_def_cfa_offset 16
 2450              		.cfi_offset 4, -16
 2451              		.cfi_offset 5, -12
 2452              		.cfi_offset 6, -8
 2453              		.cfi_offset 14, -4
 2454 0002 0446     		mov	r4, r0
 2455 0004 0D46     		mov	r5, r1
 2456              	.LVL181:
3257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2457              		.loc 1 3257 0
 2458 0006 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2459 000a 012B     		cmp	r3, #1
 2460 000c 3FD0     		beq	.L206
3257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2461              		.loc 1 3257 0 is_stmt 0 discriminator 2
 2462 000e 0123     		movs	r3, #1
 2463 0010 80F84030 		strb	r3, [r0, #64]
3262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Disable(hadc);
 2464              		.loc 1 3262 0 is_stmt 1 discriminator 2
 2465 0014 FFF7FEFF 		bl	ADC_Disable
 2466              	.LVL182:
3265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2467              		.loc 1 3265 0 discriminator 2
 2468 0018 0646     		mov	r6, r0
ARM GAS  /tmp/cckiGtEU.s 			page 180


 2469 001a 0028     		cmp	r0, #0
 2470 001c 31D1     		bne	.L207
3268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_READY;
 2471              		.loc 1 3268 0
 2472 001e 0123     		movs	r3, #1
 2473 0020 6364     		str	r3, [r4, #68]
3271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 2474              		.loc 1 3271 0
 2475 0022 2368     		ldr	r3, [r4]
 2476 0024 9A68     		ldr	r2, [r3, #8]
 2477 0026 22F08042 		bic	r2, r2, #1073741824
 2478 002a 9A60     		str	r2, [r3, #8]
3272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 2479              		.loc 1 3272 0
 2480 002c 012D     		cmp	r5, #1
 2481 002e 04D1     		bne	.L203
3274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->Instance->CR |= ADC_CR_ADCALDIF;
 2482              		.loc 1 3274 0
 2483 0030 2368     		ldr	r3, [r4]
 2484 0032 9A68     		ldr	r2, [r3, #8]
 2485 0034 42F08042 		orr	r2, r2, #1073741824
 2486 0038 9A60     		str	r2, [r3, #8]
 2487              	.L203:
3278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     hadc->Instance->CR |= ADC_CR_ADCAL;
 2488              		.loc 1 3278 0
 2489 003a 2368     		ldr	r3, [r4]
 2490 003c 9A68     		ldr	r2, [r3, #8]
 2491 003e 42F00042 		orr	r2, r2, #-2147483648
 2492 0042 9A60     		str	r2, [r3, #8]
3280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 2493              		.loc 1 3280 0
 2494 0044 FFF7FEFF 		bl	HAL_GetTick
 2495              	.LVL183:
 2496 0048 0546     		mov	r5, r0
 2497              	.LVL184:
3283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 2498              		.loc 1 3283 0
 2499 004a 0FE0     		b	.L204
 2500              	.LVL185:
 2501              	.L205:
3285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 2502              		.loc 1 3285 0
 2503 004c FFF7FEFF 		bl	HAL_GetTick
 2504              	.LVL186:
 2505 0050 401B     		subs	r0, r0, r5
 2506 0052 0A28     		cmp	r0, #10
 2507 0054 0AD9     		bls	.L204
3288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 2508              		.loc 1 3288 0
 2509 0056 636C     		ldr	r3, [r4, #68]
 2510 0058 23F01203 		bic	r3, r3, #18
 2511 005c 43F01003 		orr	r3, r3, #16
 2512 0060 6364     		str	r3, [r4, #68]
3293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 2513              		.loc 1 3293 0
 2514 0062 0023     		movs	r3, #0
 2515 0064 84F84030 		strb	r3, [r4, #64]
ARM GAS  /tmp/cckiGtEU.s 			page 181


3295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 2516              		.loc 1 3295 0
 2517 0068 0120     		movs	r0, #1
 2518 006a 70BD     		pop	{r4, r5, r6, pc}
 2519              	.LVL187:
 2520              	.L204:
3283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 2521              		.loc 1 3283 0 discriminator 1
 2522 006c 2368     		ldr	r3, [r4]
 2523 006e 9B68     		ldr	r3, [r3, #8]
 2524 0070 002B     		cmp	r3, #0
 2525 0072 EBDB     		blt	.L205
3300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 2526              		.loc 1 3300 0
 2527 0074 636C     		ldr	r3, [r4, #68]
 2528 0076 23F00303 		bic	r3, r3, #3
 2529 007a 43F00103 		orr	r3, r3, #1
 2530 007e 6364     		str	r3, [r4, #68]
 2531 0080 00E0     		b	.L202
 2532              	.LVL188:
 2533              	.L207:
3307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 2534              		.loc 1 3307 0
 2535 0082 0126     		movs	r6, #1
 2536              	.LVL189:
 2537              	.L202:
3311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2538              		.loc 1 3311 0
 2539 0084 0023     		movs	r3, #0
 2540 0086 84F84030 		strb	r3, [r4, #64]
3314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2541              		.loc 1 3314 0
 2542 008a 3046     		mov	r0, r6
 2543 008c 70BD     		pop	{r4, r5, r6, pc}
 2544              	.LVL190:
 2545              	.L206:
3257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2546              		.loc 1 3257 0
 2547 008e 0220     		movs	r0, #2
 2548              	.LVL191:
3315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2549              		.loc 1 3315 0
 2550 0090 70BD     		pop	{r4, r5, r6, pc}
 2551              		.cfi_endproc
 2552              	.LFE135:
 2554 0092 00BF     		.section	.text.HAL_ADCEx_Calibration_GetValue,"ax",%progbits
 2555              		.align	2
 2556              		.global	HAL_ADCEx_Calibration_GetValue
 2557              		.thumb
 2558              		.thumb_func
 2560              	HAL_ADCEx_Calibration_GetValue:
 2561              	.LFB136:
3442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2562              		.loc 1 3442 0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 0
 2565              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cckiGtEU.s 			page 182


 2566              		@ link register save eliminated.
 2567              	.LVL192:
3448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 2568              		.loc 1 3448 0
 2569 0000 0129     		cmp	r1, #1
 2570 0002 04D1     		bne	.L210
3450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return ADC_CALFACT_DIFF_GET(hadc->Instance->CALFACT);
 2571              		.loc 1 3450 0
 2572 0004 0368     		ldr	r3, [r0]
 2573 0006 D3F8B400 		ldr	r0, [r3, #180]
 2574              	.LVL193:
 2575 000a 000C     		lsrs	r0, r0, #16
 2576 000c 7047     		bx	lr
 2577              	.LVL194:
 2578              	.L210:
3454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     return ((hadc->Instance->CALFACT) & ADC_CALFACT_CALFACT_S);
 2579              		.loc 1 3454 0
 2580 000e 0368     		ldr	r3, [r0]
 2581 0010 D3F8B400 		ldr	r0, [r3, #180]
 2582              	.LVL195:
 2583 0014 00F07F00 		and	r0, r0, #127
3456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2584              		.loc 1 3456 0
 2585 0018 7047     		bx	lr
 2586              		.cfi_endproc
 2587              	.LFE136:
 2589 001a 00BF     		.section	.text.HAL_ADCEx_Calibration_SetValue,"ax",%progbits
 2590              		.align	2
 2591              		.global	HAL_ADCEx_Calibration_SetValue
 2592              		.thumb
 2593              		.thumb_func
 2595              	HAL_ADCEx_Calibration_SetValue:
 2596              	.LFB137:
3477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2597              		.loc 1 3477 0
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 0
 2600              		@ frame_needed = 0, uses_anonymous_args = 0
 2601              		@ link register save eliminated.
 2602              	.LVL196:
 2603 0000 10B4     		push	{r4}
 2604              	.LCFI19:
 2605              		.cfi_def_cfa_offset 4
 2606              		.cfi_offset 4, -4
 2607              	.LVL197:
3486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2608              		.loc 1 3486 0
 2609 0002 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2610 0006 012B     		cmp	r3, #1
 2611 0008 36D0     		beq	.L218
3486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2612              		.loc 1 3486 0 is_stmt 0 discriminator 2
 2613 000a 0123     		movs	r3, #1
 2614 000c 80F84030 		strb	r3, [r0, #64]
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_ENABLE(hadc) != RESET)                              &&
 2615              		.loc 1 3490 0 is_stmt 1 discriminator 2
 2616 0010 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cckiGtEU.s 			page 183


 2617 0012 9C68     		ldr	r4, [r3, #8]
 2618 0014 04F00304 		and	r4, r4, #3
 2619 0018 012C     		cmp	r4, #1
 2620 001a 05D1     		bne	.L219
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_ENABLE(hadc) != RESET)                              &&
 2621              		.loc 1 3490 0 is_stmt 0 discriminator 1
 2622 001c 1C68     		ldr	r4, [r3]
 2623 001e 14F0010F 		tst	r4, #1
 2624 0022 03D1     		bne	.L220
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_ENABLE(hadc) != RESET)                              &&
 2625              		.loc 1 3490 0
 2626 0024 0024     		movs	r4, #0
 2627 0026 02E0     		b	.L214
 2628              	.L219:
 2629 0028 0024     		movs	r4, #0
 2630 002a 00E0     		b	.L214
 2631              	.L220:
 2632 002c 0124     		movs	r4, #1
 2633              	.L214:
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_ENABLE(hadc) != RESET)                              &&
 2634              		.loc 1 3490 0 discriminator 4
 2635 002e B4B1     		cbz	r4, .L215
3491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)   )
 2636              		.loc 1 3491 0 is_stmt 1 discriminator 1
 2637 0030 9C68     		ldr	r4, [r3, #8]
3490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_ENABLE(hadc) != RESET)                              &&
 2638              		.loc 1 3490 0 discriminator 1
 2639 0032 14F00C0F 		tst	r4, #12
 2640 0036 12D1     		bne	.L215
3494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 2641              		.loc 1 3494 0
 2642 0038 0129     		cmp	r1, #1
 2643 003a 08D1     		bne	.L216
3496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CALFACT                ,
 2644              		.loc 1 3496 0
 2645 003c D3F8B410 		ldr	r1, [r3, #180]
 2646              	.LVL198:
 2647 0040 21F4FE01 		bic	r1, r1, #8323072
 2648 0044 41EA0242 		orr	r2, r1, r2, lsl #16
 2649              	.LVL199:
 2650 0048 C3F8B420 		str	r2, [r3, #180]
 2651 004c 0FE0     		b	.L217
 2652              	.LVL200:
 2653              	.L216:
3502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CALFACT,
 2654              		.loc 1 3502 0
 2655 004e D3F8B410 		ldr	r1, [r3, #180]
 2656              	.LVL201:
 2657 0052 21F07F01 		bic	r1, r1, #127
 2658 0056 0A43     		orrs	r2, r2, r1
 2659              	.LVL202:
 2660 0058 C3F8B420 		str	r2, [r3, #180]
 2661 005c 07E0     		b	.L217
 2662              	.LVL203:
 2663              	.L215:
3510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2664              		.loc 1 3510 0
ARM GAS  /tmp/cckiGtEU.s 			page 184


 2665 005e 436C     		ldr	r3, [r0, #68]
 2666 0060 43F02003 		orr	r3, r3, #32
 2667 0064 4364     		str	r3, [r0, #68]
3513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2668              		.loc 1 3513 0
 2669 0066 836C     		ldr	r3, [r0, #72]
 2670 0068 43F00103 		orr	r3, r3, #1
 2671 006c 8364     		str	r3, [r0, #72]
 2672              	.LVL204:
 2673              	.L217:
3517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2674              		.loc 1 3517 0
 2675 006e 0023     		movs	r3, #0
 2676 0070 80F84030 		strb	r3, [r0, #64]
3520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2677              		.loc 1 3520 0
 2678 0074 1846     		mov	r0, r3
 2679              	.LVL205:
 2680 0076 00E0     		b	.L213
 2681              	.LVL206:
 2682              	.L218:
3486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2683              		.loc 1 3486 0
 2684 0078 0220     		movs	r0, #2
 2685              	.LVL207:
 2686              	.L213:
3521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2687              		.loc 1 3521 0
 2688 007a 5DF8044B 		ldr	r4, [sp], #4
 2689 007e 7047     		bx	lr
 2690              		.cfi_endproc
 2691              	.LFE137:
 2693              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 2694              		.align	2
 2695              		.global	HAL_ADCEx_InjectedStart
 2696              		.thumb
 2697              		.thumb_func
 2699              	HAL_ADCEx_InjectedStart:
 2700              	.LFB138:
3542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2701              		.loc 1 3542 0
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 2705              	.LVL208:
 2706 0000 10B5     		push	{r4, lr}
 2707              	.LCFI20:
 2708              		.cfi_def_cfa_offset 8
 2709              		.cfi_offset 4, -8
 2710              		.cfi_offset 14, -4
 2711 0002 0446     		mov	r4, r0
 2712              	.LVL209:
3549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 2713              		.loc 1 3549 0
 2714 0004 0368     		ldr	r3, [r0]
 2715 0006 9B68     		ldr	r3, [r3, #8]
 2716 0008 13F0080F 		tst	r3, #8
ARM GAS  /tmp/cckiGtEU.s 			page 185


 2717 000c 53D1     		bne	.L230
3552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2718              		.loc 1 3552 0
 2719 000e 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2720 0012 012B     		cmp	r3, #1
 2721 0014 52D0     		beq	.L231
3552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2722              		.loc 1 3552 0 is_stmt 0 discriminator 2
 2723 0016 0123     		movs	r3, #1
 2724 0018 80F84030 		strb	r3, [r0, #64]
3555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 2725              		.loc 1 3555 0 is_stmt 1 discriminator 2
 2726 001c FFF7FEFF 		bl	ADC_Enable
 2727              	.LVL210:
3558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2728              		.loc 1 3558 0 discriminator 2
 2729 0020 0346     		mov	r3, r0
 2730 0022 0028     		cmp	r0, #0
 2731 0024 43D1     		bne	.L224
3563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 2732              		.loc 1 3563 0
 2733 0026 626C     		ldr	r2, [r4, #68]
 2734 0028 22F44052 		bic	r2, r2, #12288
 2735 002c 22F00102 		bic	r2, r2, #1
 2736 0030 42F48052 		orr	r2, r2, #4096
 2737 0034 6264     		str	r2, [r4, #68]
3569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 2738              		.loc 1 3569 0
 2739 0036 224A     		ldr	r2, .L232
 2740 0038 9268     		ldr	r2, [r2, #8]
 2741 003a 12F01F0F 		tst	r2, #31
 2742 003e 03D0     		beq	.L225
3569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 2743              		.loc 1 3569 0 is_stmt 0 discriminator 1
 2744 0040 2268     		ldr	r2, [r4]
 2745 0042 B2F1A04F 		cmp	r2, #1342177280
 2746 0046 04D1     		bne	.L226
 2747              	.L225:
3571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 2748              		.loc 1 3571 0 is_stmt 1
 2749 0048 626C     		ldr	r2, [r4, #68]
 2750 004a 22F48012 		bic	r2, r2, #1048576
 2751 004e 6264     		str	r2, [r4, #68]
 2752 0050 03E0     		b	.L227
 2753              	.L226:
3575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 2754              		.loc 1 3575 0
 2755 0052 626C     		ldr	r2, [r4, #68]
 2756 0054 42F48012 		orr	r2, r2, #1048576
 2757 0058 6264     		str	r2, [r4, #68]
 2758              	.L227:
3582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2759              		.loc 1 3582 0
 2760 005a 626C     		ldr	r2, [r4, #68]
 2761 005c 12F4807F 		tst	r2, #256
 2762 0060 01D1     		bne	.L228
3585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 186


 2763              		.loc 1 3585 0
 2764 0062 0022     		movs	r2, #0
 2765 0064 A264     		str	r2, [r4, #72]
 2766              	.L228:
3591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2767              		.loc 1 3591 0
 2768 0066 0022     		movs	r2, #0
 2769 0068 84F84020 		strb	r2, [r4, #64]
3596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 2770              		.loc 1 3596 0
 2771 006c 2268     		ldr	r2, [r4]
 2772 006e 6021     		movs	r1, #96
 2773 0070 1160     		str	r1, [r2]
3606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 2774              		.loc 1 3606 0
 2775 0072 2268     		ldr	r2, [r4]
 2776 0074 D168     		ldr	r1, [r2, #12]
 2777 0076 11F0007F 		tst	r1, #33554432
 2778 007a 1DD1     		bne	.L222
3607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 2779              		.loc 1 3607 0 discriminator 1
 2780 007c 1049     		ldr	r1, .L232
 2781 007e 8968     		ldr	r1, [r1, #8]
3606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 2782              		.loc 1 3606 0 discriminator 1
 2783 0080 11F01F0F 		tst	r1, #31
 2784 0084 0ED0     		beq	.L229
3607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 2785              		.loc 1 3607 0
 2786 0086 0E49     		ldr	r1, .L232
 2787 0088 8968     		ldr	r1, [r1, #8]
 2788 008a 01F01F01 		and	r1, r1, #31
 2789 008e 0629     		cmp	r1, #6
 2790 0090 08D0     		beq	.L229
3607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 2791              		.loc 1 3607 0 is_stmt 0 discriminator 1
 2792 0092 0B49     		ldr	r1, .L232
 2793 0094 8968     		ldr	r1, [r1, #8]
 2794 0096 01F01F01 		and	r1, r1, #31
 2795 009a 0729     		cmp	r1, #7
 2796 009c 02D0     		beq	.L229
 2797 009e B2F1A04F 		cmp	r2, #1342177280
 2798 00a2 09D1     		bne	.L222
 2799              	.L229:
3609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 2800              		.loc 1 3609 0 is_stmt 1
 2801 00a4 9168     		ldr	r1, [r2, #8]
 2802 00a6 41F00801 		orr	r1, r1, #8
 2803 00aa 9160     		str	r1, [r2, #8]
 2804 00ac 04E0     		b	.L222
 2805              	.L224:
3615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2806              		.loc 1 3615 0
 2807 00ae 0022     		movs	r2, #0
 2808 00b0 84F84020 		strb	r2, [r4, #64]
 2809 00b4 00E0     		b	.L222
 2810              	.LVL211:
ARM GAS  /tmp/cckiGtEU.s 			page 187


 2811              	.L230:
3620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
 2812              		.loc 1 3620 0
 2813 00b6 0223     		movs	r3, #2
 2814              	.LVL212:
 2815              	.L222:
3624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2816              		.loc 1 3624 0
 2817 00b8 1846     		mov	r0, r3
 2818 00ba 10BD     		pop	{r4, pc}
 2819              	.LVL213:
 2820              	.L231:
3552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2821              		.loc 1 3552 0
 2822 00bc 0220     		movs	r0, #2
 2823              	.LVL214:
3625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2824              		.loc 1 3625 0
 2825 00be 10BD     		pop	{r4, pc}
 2826              	.LVL215:
 2827              	.L233:
 2828              		.align	2
 2829              	.L232:
 2830 00c0 00030050 		.word	1342178048
 2831              		.cfi_endproc
 2832              	.LFE138:
 2834              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 2835              		.align	2
 2836              		.global	HAL_ADCEx_InjectedStop
 2837              		.thumb
 2838              		.thumb_func
 2840              	HAL_ADCEx_InjectedStop:
 2841              	.LFB139:
3730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2842              		.loc 1 3730 0
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 0
 2845              		@ frame_needed = 0, uses_anonymous_args = 0
 2846              	.LVL216:
 2847 0000 10B5     		push	{r4, lr}
 2848              	.LCFI21:
 2849              		.cfi_def_cfa_offset 8
 2850              		.cfi_offset 4, -8
 2851              		.cfi_offset 14, -4
 2852 0002 0446     		mov	r4, r0
 2853              	.LVL217:
3737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2854              		.loc 1 3737 0
 2855 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 2856 0008 012B     		cmp	r3, #1
 2857 000a 32D0     		beq	.L239
3737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2858              		.loc 1 3737 0 is_stmt 0 discriminator 2
 2859 000c 0123     		movs	r3, #1
 2860 000e 80F84030 		strb	r3, [r0, #64]
3750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO))
 2861              		.loc 1 3750 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/cckiGtEU.s 			page 188


 2862 0012 0368     		ldr	r3, [r0]
 2863 0014 DB68     		ldr	r3, [r3, #12]
 2864 0016 13F0007F 		tst	r3, #33554432
 2865 001a 20D1     		bne	.L236
3753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 2866              		.loc 1 3753 0
 2867 001c 6021     		movs	r1, #96
 2868 001e FFF7FEFF 		bl	ADC_ConversionStop
 2869              	.LVL218:
3758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2870              		.loc 1 3758 0
 2871 0022 0346     		mov	r3, r0
 2872 0024 00BB     		cbnz	r0, .L237
3760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
 2873              		.loc 1 3760 0
 2874 0026 2268     		ldr	r2, [r4]
 2875 0028 9268     		ldr	r2, [r2, #8]
 2876 002a 12F0040F 		tst	r2, #4
 2877 002e 11D1     		bne	.L238
3761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          ((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)    )
 2878              		.loc 1 3761 0 discriminator 1
 2879 0030 626C     		ldr	r2, [r4, #68]
3760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
 2880              		.loc 1 3760 0 discriminator 1
 2881 0032 12F4807F 		tst	r2, #256
 2882 0036 0DD1     		bne	.L238
3764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
 2883              		.loc 1 3764 0
 2884 0038 2046     		mov	r0, r4
 2885              	.LVL219:
 2886 003a FFF7FEFF 		bl	ADC_Disable
 2887              	.LVL220:
3767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
 2888              		.loc 1 3767 0
 2889 003e 0346     		mov	r3, r0
 2890 0040 90B9     		cbnz	r0, .L237
3770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State,
 2891              		.loc 1 3770 0
 2892 0042 626C     		ldr	r2, [r4, #68]
 2893 0044 22F48852 		bic	r2, r2, #4352
 2894 0048 22F00102 		bic	r2, r2, #1
 2895 004c 42F00102 		orr	r2, r2, #1
 2896 0050 6264     		str	r2, [r4, #68]
 2897 0052 09E0     		b	.L237
 2898              	.L238:
3780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2899              		.loc 1 3780 0
 2900 0054 626C     		ldr	r2, [r4, #68]
 2901 0056 22F48052 		bic	r2, r2, #4096
 2902 005a 6264     		str	r2, [r4, #68]
 2903 005c 04E0     		b	.L237
 2904              	.LVL221:
 2905              	.L236:
3787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2906              		.loc 1 3787 0
 2907 005e 436C     		ldr	r3, [r0, #68]
 2908 0060 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/cckiGtEU.s 			page 189


 2909 0064 4364     		str	r3, [r0, #68]
 2910              	.LVL222:
3789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 2911              		.loc 1 3789 0
 2912 0066 0123     		movs	r3, #1
 2913              	.LVL223:
 2914              	.L237:
3793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2915              		.loc 1 3793 0
 2916 0068 0022     		movs	r2, #0
 2917 006a 84F84020 		strb	r2, [r4, #64]
3796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 2918              		.loc 1 3796 0
 2919 006e 1846     		mov	r0, r3
 2920 0070 10BD     		pop	{r4, pc}
 2921              	.LVL224:
 2922              	.L239:
3737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2923              		.loc 1 3737 0
 2924 0072 0220     		movs	r0, #2
 2925              	.LVL225:
3797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 2926              		.loc 1 3797 0
 2927 0074 10BD     		pop	{r4, pc}
 2928              		.cfi_endproc
 2929              	.LFE139:
 2931 0076 00BF     		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 2932              		.align	2
 2933              		.global	HAL_ADCEx_InjectedPollForConversion
 2934              		.thumb
 2935              		.thumb_func
 2937              	HAL_ADCEx_InjectedPollForConversion:
 2938              	.LFB140:
3873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 2939              		.loc 1 3873 0
 2940              		.cfi_startproc
 2941              		@ args = 0, pretend = 0, frame = 0
 2942              		@ frame_needed = 0, uses_anonymous_args = 0
 2943              	.LVL226:
 2944 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2945              	.LCFI22:
 2946              		.cfi_def_cfa_offset 24
 2947              		.cfi_offset 4, -24
 2948              		.cfi_offset 5, -20
 2949              		.cfi_offset 6, -16
 2950              		.cfi_offset 7, -12
 2951              		.cfi_offset 8, -8
 2952              		.cfi_offset 14, -4
 2953 0004 0446     		mov	r4, r0
 2954 0006 0D46     		mov	r5, r1
 2955              	.LVL227:
3882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 2956              		.loc 1 3882 0
 2957 0008 4369     		ldr	r3, [r0, #20]
 2958 000a 082B     		cmp	r3, #8
 2959 000c 01D1     		bne	.L252
3884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = ADC_FLAG_JEOS;
ARM GAS  /tmp/cckiGtEU.s 			page 190


 2960              		.loc 1 3884 0
 2961 000e 4026     		movs	r6, #64
 2962 0010 00E0     		b	.L241
 2963              	.L252:
3889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_Flag_EOC = (ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 2964              		.loc 1 3889 0
 2965 0012 6026     		movs	r6, #96
 2966              	.L241:
 2967              	.LVL228:
3895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 2968              		.loc 1 3895 0
 2969 0014 294B     		ldr	r3, .L255
 2970 0016 9B68     		ldr	r3, [r3, #8]
 2971 0018 13F01F0F 		tst	r3, #31
 2972 001c 03D0     		beq	.L242
3895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 2973              		.loc 1 3895 0 is_stmt 0 discriminator 1
 2974 001e 2368     		ldr	r3, [r4]
 2975 0020 B3F1A04F 		cmp	r3, #1342177280
 2976 0024 02D1     		bne	.L243
 2977              	.L242:
3897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 2978              		.loc 1 3897 0 is_stmt 1
 2979 0026 2368     		ldr	r3, [r4]
 2980 0028 DF68     		ldr	r7, [r3, #12]
 2981              	.LVL229:
 2982 002a 02E0     		b	.L244
 2983              	.LVL230:
 2984              	.L243:
3901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 2985              		.loc 1 3901 0
 2986 002c 4FF0A043 		mov	r3, #1342177280
 2987 0030 DF68     		ldr	r7, [r3, #12]
 2988              	.LVL231:
 2989              	.L244:
3905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 2990              		.loc 1 3905 0
 2991 0032 FFF7FEFF 		bl	HAL_GetTick
 2992              	.LVL232:
 2993 0036 8046     		mov	r8, r0
 2994              	.LVL233:
3908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 2995              		.loc 1 3908 0
 2996 0038 13E0     		b	.L254
 2997              	.LVL234:
 2998              	.L249:
3911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 2999              		.loc 1 3911 0
 3000 003a B5F1FF3F 		cmp	r5, #-1
 3001 003e 10D0     		beq	.L254
3913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 3002              		.loc 1 3913 0
 3003 0040 2DB1     		cbz	r5, .L247
3913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 3004              		.loc 1 3913 0 is_stmt 0 discriminator 1
 3005 0042 FFF7FEFF 		bl	HAL_GetTick
 3006              	.LVL235:
ARM GAS  /tmp/cckiGtEU.s 			page 191


 3007 0046 C8EB0000 		rsb	r0, r8, r0
 3008 004a A842     		cmp	r0, r5
 3009 004c 09D9     		bls	.L254
 3010              	.L247:
3916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 3011              		.loc 1 3916 0 is_stmt 1
 3012 004e 636C     		ldr	r3, [r4, #68]
 3013 0050 43F00403 		orr	r3, r3, #4
 3014 0054 6364     		str	r3, [r4, #68]
3919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 3015              		.loc 1 3919 0
 3016 0056 0023     		movs	r3, #0
 3017 0058 84F84030 		strb	r3, [r4, #64]
3921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
 3018              		.loc 1 3921 0
 3019 005c 0320     		movs	r0, #3
 3020 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3021              	.LVL236:
 3022              	.L254:
3908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 3023              		.loc 1 3908 0 discriminator 1
 3024 0062 2368     		ldr	r3, [r4]
 3025 0064 1A68     		ldr	r2, [r3]
 3026 0066 3242     		tst	r2, r6
 3027 0068 E7D0     		beq	.L249
3927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 3028              		.loc 1 3927 0
 3029 006a 626C     		ldr	r2, [r4, #68]
 3030 006c 42F40052 		orr	r2, r2, #8192
 3031 0070 6264     		str	r2, [r4, #68]
3932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 3032              		.loc 1 3932 0
 3033 0072 DA6C     		ldr	r2, [r3, #76]
 3034 0074 12F0C00F 		tst	r2, #192
 3035 0078 09D0     		beq	.L250
3932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 3036              		.loc 1 3932 0 is_stmt 0 discriminator 1
 3037 007a 17F0007F 		tst	r7, #33554432
 3038 007e 12D1     		bne	.L251
3934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 3039              		.loc 1 3934 0 is_stmt 1
 3040 0080 DA68     		ldr	r2, [r3, #12]
3933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 3041              		.loc 1 3933 0
 3042 0082 12F4406F 		tst	r2, #3072
 3043 0086 0ED1     		bne	.L251
3934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 3044              		.loc 1 3934 0
 3045 0088 17F4005F 		tst	r7, #8192
 3046 008c 0BD1     		bne	.L251
 3047              	.L250:
3938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 3048              		.loc 1 3938 0
 3049 008e 626C     		ldr	r2, [r4, #68]
 3050 0090 22F48052 		bic	r2, r2, #4096
 3051 0094 6264     		str	r2, [r4, #68]
3940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
ARM GAS  /tmp/cckiGtEU.s 			page 192


 3052              		.loc 1 3940 0
 3053 0096 626C     		ldr	r2, [r4, #68]
 3054 0098 12F4807F 		tst	r2, #256
 3055 009c 03D1     		bne	.L251
3942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3056              		.loc 1 3942 0
 3057 009e 626C     		ldr	r2, [r4, #68]
 3058 00a0 42F00102 		orr	r2, r2, #1
 3059 00a4 6264     		str	r2, [r4, #68]
 3060              	.L251:
3949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 3061              		.loc 1 3949 0
 3062 00a6 17F4804F 		tst	r7, #16384
 3063 00aa 03D1     		bne	.L253
3953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 3064              		.loc 1 3953 0
 3065 00ac 1E60     		str	r6, [r3]
3957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return HAL_OK;
 3066              		.loc 1 3957 0
 3067 00ae 0020     		movs	r0, #0
 3068 00b0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3069              	.LVL237:
 3070              	.L253:
 3071 00b4 0020     		movs	r0, #0
3958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3072              		.loc 1 3958 0
 3073 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3074              	.LVL238:
 3075              	.L256:
 3076 00ba 00BF     		.align	2
 3077              	.L255:
 3078 00bc 00030050 		.word	1342178048
 3079              		.cfi_endproc
 3080              	.LFE140:
 3082              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 3083              		.align	2
 3084              		.global	HAL_ADCEx_InjectedStart_IT
 3085              		.thumb
 3086              		.thumb_func
 3088              	HAL_ADCEx_InjectedStart_IT:
 3089              	.LFB141:
4100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3090              		.loc 1 4100 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094              	.LVL239:
 3095 0000 10B5     		push	{r4, lr}
 3096              	.LCFI23:
 3097              		.cfi_def_cfa_offset 8
 3098              		.cfi_offset 4, -8
 3099              		.cfi_offset 14, -4
 3100 0002 0446     		mov	r4, r0
 3101              	.LVL240:
4107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 3102              		.loc 1 4107 0
 3103 0004 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cckiGtEU.s 			page 193


 3104 0006 9B68     		ldr	r3, [r3, #8]
 3105 0008 13F0080F 		tst	r3, #8
 3106 000c 6FD1     		bne	.L270
4110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 3107              		.loc 1 4110 0
 3108 000e 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3109 0012 012B     		cmp	r3, #1
 3110 0014 6ED0     		beq	.L271
4110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 3111              		.loc 1 4110 0 is_stmt 0 discriminator 2
 3112 0016 0123     		movs	r3, #1
 3113 0018 80F84030 		strb	r3, [r0, #64]
4113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 3114              		.loc 1 4113 0 is_stmt 1 discriminator 2
 3115 001c FFF7FEFF 		bl	ADC_Enable
 3116              	.LVL241:
4117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3117              		.loc 1 4117 0 discriminator 2
 3118 0020 0346     		mov	r3, r0
 3119 0022 0028     		cmp	r0, #0
 3120 0024 5FD1     		bne	.L260
4122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 3121              		.loc 1 4122 0
 3122 0026 626C     		ldr	r2, [r4, #68]
 3123 0028 22F44052 		bic	r2, r2, #12288
 3124 002c 22F00102 		bic	r2, r2, #1
 3125 0030 42F48052 		orr	r2, r2, #4096
 3126 0034 6264     		str	r2, [r4, #68]
4128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 3127              		.loc 1 4128 0
 3128 0036 304A     		ldr	r2, .L273
 3129 0038 9268     		ldr	r2, [r2, #8]
 3130 003a 12F01F0F 		tst	r2, #31
 3131 003e 03D0     		beq	.L261
4128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 3132              		.loc 1 4128 0 is_stmt 0 discriminator 1
 3133 0040 2268     		ldr	r2, [r4]
 3134 0042 B2F1A04F 		cmp	r2, #1342177280
 3135 0046 04D1     		bne	.L262
 3136              	.L261:
4130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3137              		.loc 1 4130 0 is_stmt 1
 3138 0048 626C     		ldr	r2, [r4, #68]
 3139 004a 22F48012 		bic	r2, r2, #1048576
 3140 004e 6264     		str	r2, [r4, #68]
 3141 0050 03E0     		b	.L263
 3142              	.L262:
4134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3143              		.loc 1 4134 0
 3144 0052 626C     		ldr	r2, [r4, #68]
 3145 0054 42F48012 		orr	r2, r2, #1048576
 3146 0058 6264     		str	r2, [r4, #68]
 3147              	.L263:
4141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 3148              		.loc 1 4141 0
 3149 005a 626C     		ldr	r2, [r4, #68]
 3150 005c 12F4807F 		tst	r2, #256
ARM GAS  /tmp/cckiGtEU.s 			page 194


 3151 0060 01D1     		bne	.L264
4144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 3152              		.loc 1 4144 0
 3153 0062 0022     		movs	r2, #0
 3154 0064 A264     		str	r2, [r4, #72]
 3155              	.L264:
4150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3156              		.loc 1 4150 0
 3157 0066 0022     		movs	r2, #0
 3158 0068 84F84020 		strb	r2, [r4, #64]
4155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 3159              		.loc 1 4155 0
 3160 006c 2268     		ldr	r2, [r4]
 3161 006e 6021     		movs	r1, #96
 3162 0070 1160     		str	r1, [r2]
4159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 3163              		.loc 1 4159 0
 3164 0072 2268     		ldr	r2, [r4]
 3165 0074 D168     		ldr	r1, [r2, #12]
 3166 0076 11F4001F 		tst	r1, #2097152
 3167 007a 03D0     		beq	.L265
4161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 3168              		.loc 1 4161 0
 3169 007c 5168     		ldr	r1, [r2, #4]
 3170 007e 41F48061 		orr	r1, r1, #1024
 3171 0082 5160     		str	r1, [r2, #4]
 3172              	.L265:
4165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       switch(hadc->Init.EOCSelection)
 3173              		.loc 1 4165 0
 3174 0084 6269     		ldr	r2, [r4, #20]
 3175 0086 082A     		cmp	r2, #8
 3176 0088 0AD1     		bne	.L272
4168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 3177              		.loc 1 4168 0
 3178 008a 2268     		ldr	r2, [r4]
 3179 008c 5168     		ldr	r1, [r2, #4]
 3180 008e 21F02001 		bic	r1, r1, #32
 3181 0092 5160     		str	r1, [r2, #4]
4169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 3182              		.loc 1 4169 0
 3183 0094 2268     		ldr	r2, [r4]
 3184 0096 5168     		ldr	r1, [r2, #4]
 3185 0098 41F04001 		orr	r1, r1, #64
 3186 009c 5160     		str	r1, [r2, #4]
4170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           break;
 3187              		.loc 1 4170 0
 3188 009e 04E0     		b	.L268
 3189              	.L272:
4173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 3190              		.loc 1 4173 0
 3191 00a0 2268     		ldr	r2, [r4]
 3192 00a2 5168     		ldr	r1, [r2, #4]
 3193 00a4 41F06001 		orr	r1, r1, #96
 3194 00a8 5160     		str	r1, [r2, #4]
 3195              	.L268:
4185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 3196              		.loc 1 4185 0
ARM GAS  /tmp/cckiGtEU.s 			page 195


 3197 00aa 2268     		ldr	r2, [r4]
 3198 00ac D168     		ldr	r1, [r2, #12]
 3199 00ae 11F0007F 		tst	r1, #33554432
 3200 00b2 1DD1     		bne	.L258
4186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 3201              		.loc 1 4186 0 discriminator 1
 3202 00b4 1049     		ldr	r1, .L273
 3203 00b6 8968     		ldr	r1, [r1, #8]
4185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 3204              		.loc 1 4185 0 discriminator 1
 3205 00b8 11F01F0F 		tst	r1, #31
 3206 00bc 0ED0     		beq	.L269
4186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 3207              		.loc 1 4186 0
 3208 00be 0E49     		ldr	r1, .L273
 3209 00c0 8968     		ldr	r1, [r1, #8]
 3210 00c2 01F01F01 		and	r1, r1, #31
 3211 00c6 0629     		cmp	r1, #6
 3212 00c8 08D0     		beq	.L269
4186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 3213              		.loc 1 4186 0 is_stmt 0 discriminator 1
 3214 00ca 0B49     		ldr	r1, .L273
 3215 00cc 8968     		ldr	r1, [r1, #8]
 3216 00ce 01F01F01 		and	r1, r1, #31
 3217 00d2 0729     		cmp	r1, #7
 3218 00d4 02D0     		beq	.L269
 3219 00d6 B2F1A04F 		cmp	r2, #1342177280
 3220 00da 09D1     		bne	.L258
 3221              	.L269:
4188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 3222              		.loc 1 4188 0 is_stmt 1
 3223 00dc 9168     		ldr	r1, [r2, #8]
 3224 00de 41F00801 		orr	r1, r1, #8
 3225 00e2 9160     		str	r1, [r2, #8]
 3226 00e4 04E0     		b	.L258
 3227              	.L260:
4194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3228              		.loc 1 4194 0
 3229 00e6 0022     		movs	r2, #0
 3230 00e8 84F84020 		strb	r2, [r4, #64]
 3231 00ec 00E0     		b	.L258
 3232              	.LVL242:
 3233              	.L270:
4199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
 3234              		.loc 1 4199 0
 3235 00ee 0223     		movs	r3, #2
 3236              	.LVL243:
 3237              	.L258:
4203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 3238              		.loc 1 4203 0
 3239 00f0 1846     		mov	r0, r3
 3240 00f2 10BD     		pop	{r4, pc}
 3241              	.LVL244:
 3242              	.L271:
4110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 3243              		.loc 1 4110 0
 3244 00f4 0220     		movs	r0, #2
ARM GAS  /tmp/cckiGtEU.s 			page 196


 3245              	.LVL245:
4204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3246              		.loc 1 4204 0
 3247 00f6 10BD     		pop	{r4, pc}
 3248              	.LVL246:
 3249              	.L274:
 3250              		.align	2
 3251              	.L273:
 3252 00f8 00030050 		.word	1342178048
 3253              		.cfi_endproc
 3254              	.LFE141:
 3256              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 3257              		.align	2
 3258              		.global	HAL_ADCEx_InjectedStop_IT
 3259              		.thumb
 3260              		.thumb_func
 3262              	HAL_ADCEx_InjectedStop_IT:
 3263              	.LFB142:
4320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** { 
 3264              		.loc 1 4320 0
 3265              		.cfi_startproc
 3266              		@ args = 0, pretend = 0, frame = 0
 3267              		@ frame_needed = 0, uses_anonymous_args = 0
 3268              	.LVL247:
 3269 0000 10B5     		push	{r4, lr}
 3270              	.LCFI24:
 3271              		.cfi_def_cfa_offset 8
 3272              		.cfi_offset 4, -8
 3273              		.cfi_offset 14, -4
 3274 0002 0446     		mov	r4, r0
 3275              	.LVL248:
4327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3276              		.loc 1 4327 0
 3277 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3278 0008 012B     		cmp	r3, #1
 3279 000a 37D0     		beq	.L280
4327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3280              		.loc 1 4327 0 is_stmt 0 discriminator 2
 3281 000c 0123     		movs	r3, #1
 3282 000e 80F84030 		strb	r3, [r0, #64]
4340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO))
 3283              		.loc 1 4340 0 is_stmt 1 discriminator 2
 3284 0012 0368     		ldr	r3, [r0]
 3285 0014 DB68     		ldr	r3, [r3, #12]
 3286 0016 13F0007F 		tst	r3, #33554432
 3287 001a 25D1     		bne	.L277
4343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 3288              		.loc 1 4343 0
 3289 001c 6021     		movs	r1, #96
 3290 001e FFF7FEFF 		bl	ADC_ConversionStop
 3291              	.LVL249:
4348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3292              		.loc 1 4348 0
 3293 0022 0346     		mov	r3, r0
 3294 0024 28BB     		cbnz	r0, .L278
4351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_IT_JQOVF));
 3295              		.loc 1 4351 0
ARM GAS  /tmp/cckiGtEU.s 			page 197


 3296 0026 2268     		ldr	r2, [r4]
 3297 0028 5168     		ldr	r1, [r2, #4]
 3298 002a 21F48C61 		bic	r1, r1, #1120
 3299 002e 5160     		str	r1, [r2, #4]
4353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
 3300              		.loc 1 4353 0
 3301 0030 2268     		ldr	r2, [r4]
 3302 0032 9268     		ldr	r2, [r2, #8]
 3303 0034 12F0040F 		tst	r2, #4
 3304 0038 11D1     		bne	.L279
4354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****          ((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)    )
 3305              		.loc 1 4354 0 discriminator 1
 3306 003a 626C     		ldr	r2, [r4, #68]
4353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
 3307              		.loc 1 4353 0 discriminator 1
 3308 003c 12F4807F 		tst	r2, #256
 3309 0040 0DD1     		bne	.L279
4357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
 3310              		.loc 1 4357 0
 3311 0042 2046     		mov	r0, r4
 3312              	.LVL250:
 3313 0044 FFF7FEFF 		bl	ADC_Disable
 3314              	.LVL251:
4360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
 3315              		.loc 1 4360 0
 3316 0048 0346     		mov	r3, r0
 3317 004a 90B9     		cbnz	r0, .L278
4363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_STATE_CLR_SET(hadc->State,
 3318              		.loc 1 4363 0
 3319 004c 626C     		ldr	r2, [r4, #68]
 3320 004e 22F48852 		bic	r2, r2, #4352
 3321 0052 22F00102 		bic	r2, r2, #1
 3322 0056 42F00102 		orr	r2, r2, #1
 3323 005a 6264     		str	r2, [r4, #68]
 3324 005c 09E0     		b	.L278
 3325              	.L279:
4373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 3326              		.loc 1 4373 0
 3327 005e 626C     		ldr	r2, [r4, #68]
 3328 0060 22F48052 		bic	r2, r2, #4096
 3329 0064 6264     		str	r2, [r4, #68]
 3330 0066 04E0     		b	.L278
 3331              	.LVL252:
 3332              	.L277:
4380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3333              		.loc 1 4380 0
 3334 0068 436C     		ldr	r3, [r0, #68]
 3335 006a 43F02003 		orr	r3, r3, #32
 3336 006e 4364     		str	r3, [r0, #68]
 3337              	.LVL253:
4382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 3338              		.loc 1 4382 0
 3339 0070 0123     		movs	r3, #1
 3340              	.LVL254:
 3341              	.L278:
4386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3342              		.loc 1 4386 0
ARM GAS  /tmp/cckiGtEU.s 			page 198


 3343 0072 0022     		movs	r2, #0
 3344 0074 84F84020 		strb	r2, [r4, #64]
4389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 3345              		.loc 1 4389 0
 3346 0078 1846     		mov	r0, r3
 3347 007a 10BD     		pop	{r4, pc}
 3348              	.LVL255:
 3349              	.L280:
4327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3350              		.loc 1 4327 0
 3351 007c 0220     		movs	r0, #2
 3352              	.LVL256:
4390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3353              		.loc 1 4390 0
 3354 007e 10BD     		pop	{r4, pc}
 3355              		.cfi_endproc
 3356              	.LFE142:
 3358              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 3359              		.align	2
 3360              		.global	HAL_ADCEx_MultiModeStart_DMA
 3361              		.thumb
 3362              		.thumb_func
 3364              	HAL_ADCEx_MultiModeStart_DMA:
 3365              	.LFB143:
4480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3366              		.loc 1 4480 0
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 88
 3369              		@ frame_needed = 0, uses_anonymous_args = 0
 3370              	.LVL257:
 3371 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3372              	.LCFI25:
 3373              		.cfi_def_cfa_offset 20
 3374              		.cfi_offset 4, -20
 3375              		.cfi_offset 5, -16
 3376              		.cfi_offset 6, -12
 3377              		.cfi_offset 7, -8
 3378              		.cfi_offset 14, -4
 3379 0002 97B0     		sub	sp, sp, #92
 3380              	.LCFI26:
 3381              		.cfi_def_cfa_offset 112
 3382 0004 0446     		mov	r4, r0
 3383 0006 0F46     		mov	r7, r1
 3384 0008 1646     		mov	r6, r2
 3385              	.LVL258:
4492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3386              		.loc 1 4492 0
 3387 000a 90F84000 		ldrb	r0, [r0, #64]	@ zero_extendqisi2
 3388              	.LVL259:
 3389 000e 0128     		cmp	r0, #1
 3390 0010 5BD0     		beq	.L289
4492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3391              		.loc 1 4492 0 is_stmt 0 discriminator 2
 3392 0012 0120     		movs	r0, #1
 3393 0014 84F84000 		strb	r0, [r4, #64]
4496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 3394              		.loc 1 4496 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/cckiGtEU.s 			page 199


 3395 0018 2068     		ldr	r0, [r4]
 3396 001a 8568     		ldr	r5, [r0, #8]
 3397 001c 15F0040F 		tst	r5, #4
 3398 0020 50D1     		bne	.L290
4500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3399              		.loc 1 4500 0
 3400 0022 B0F1A04F 		cmp	r0, #1342177280
 3401 0026 01D1     		bne	.L284
4500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3402              		.loc 1 4500 0 is_stmt 0 discriminator 1
 3403 0028 294B     		ldr	r3, .L291
 3404 002a 0193     		str	r3, [sp, #4]
 3405              	.L284:
4502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 3406              		.loc 1 4502 0 is_stmt 1
 3407 002c 019B     		ldr	r3, [sp, #4]
 3408 002e 43B9     		cbnz	r3, .L285
4505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3409              		.loc 1 4505 0
 3410 0030 636C     		ldr	r3, [r4, #68]
 3411 0032 43F02003 		orr	r3, r3, #32
 3412 0036 6364     		str	r3, [r4, #68]
4508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3413              		.loc 1 4508 0
 3414 0038 0023     		movs	r3, #0
 3415 003a 84F84030 		strb	r3, [r4, #64]
4510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
 3416              		.loc 1 4510 0
 3417 003e 0120     		movs	r0, #1
 3418 0040 44E0     		b	.L282
 3419              	.L285:
4516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 3420              		.loc 1 4516 0
 3421 0042 2046     		mov	r0, r4
 3422 0044 FFF7FEFF 		bl	ADC_Enable
 3423              	.LVL260:
4517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3424              		.loc 1 4517 0
 3425 0048 0546     		mov	r5, r0
 3426 004a 18B9     		cbnz	r0, .L286
4519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(&tmphadcSlave);
 3427              		.loc 1 4519 0
 3428 004c 01A8     		add	r0, sp, #4
 3429              	.LVL261:
 3430 004e FFF7FEFF 		bl	ADC_Enable
 3431              	.LVL262:
 3432 0052 0546     		mov	r5, r0
 3433              	.LVL263:
 3434              	.L286:
4523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3435              		.loc 1 4523 0
 3436 0054 002D     		cmp	r5, #0
 3437 0056 31D1     		bne	.L287
4528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 3438              		.loc 1 4528 0
 3439 0058 626C     		ldr	r2, [r4, #68]
 3440 005a 1E4B     		ldr	r3, .L291+4
ARM GAS  /tmp/cckiGtEU.s 			page 200


 3441 005c 1340     		ands	r3, r3, r2
 3442 005e 43F48073 		orr	r3, r3, #256
 3443 0062 6364     		str	r3, [r4, #68]
4534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 3444              		.loc 1 4534 0
 3445 0064 2368     		ldr	r3, [r4]
 3446 0066 DB68     		ldr	r3, [r3, #12]
 3447 0068 13F0007F 		tst	r3, #33554432
 3448 006c 05D0     		beq	.L288
4536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 3449              		.loc 1 4536 0
 3450 006e 636C     		ldr	r3, [r4, #68]
 3451 0070 23F44053 		bic	r3, r3, #12288
 3452 0074 43F48053 		orr	r3, r3, #4096
 3453 0078 6364     		str	r3, [r4, #68]
 3454              	.L288:
4542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3455              		.loc 1 4542 0
 3456 007a 0023     		movs	r3, #0
 3457 007c 84F84030 		strb	r3, [r4, #64]
4545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 3458              		.loc 1 4545 0
 3459 0080 A364     		str	r3, [r4, #72]
4549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 3460              		.loc 1 4549 0
 3461 0082 E36B     		ldr	r3, [r4, #60]
 3462 0084 144A     		ldr	r2, .L291+8
 3463 0086 9A62     		str	r2, [r3, #40]
4552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 3464              		.loc 1 4552 0
 3465 0088 E36B     		ldr	r3, [r4, #60]
 3466 008a 144A     		ldr	r2, .L291+12
 3467 008c DA62     		str	r2, [r3, #44]
4555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 3468              		.loc 1 4555 0
 3469 008e E36B     		ldr	r3, [r4, #60]
 3470 0090 134A     		ldr	r2, .L291+16
 3471 0092 1A63     		str	r2, [r3, #48]
 3472              	.LVL264:
4568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 3473              		.loc 1 4568 0
 3474 0094 2368     		ldr	r3, [r4]
 3475 0096 1C22     		movs	r2, #28
 3476 0098 1A60     		str	r2, [r3]
4571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 3477              		.loc 1 4571 0
 3478 009a 2368     		ldr	r3, [r4]
 3479 009c 5A68     		ldr	r2, [r3, #4]
 3480 009e 42F01002 		orr	r2, r2, #16
 3481 00a2 5A60     		str	r2, [r3, #4]
4574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 3482              		.loc 1 4574 0
 3483 00a4 E06B     		ldr	r0, [r4, #60]
 3484 00a6 0F49     		ldr	r1, .L291+20
 3485 00a8 3A46     		mov	r2, r7
 3486 00aa 3346     		mov	r3, r6
 3487 00ac FFF7FEFF 		bl	HAL_DMA_Start_IT
ARM GAS  /tmp/cckiGtEU.s 			page 201


 3488              	.LVL265:
4580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 3489              		.loc 1 4580 0
 3490 00b0 2368     		ldr	r3, [r4]
 3491 00b2 9A68     		ldr	r2, [r3, #8]
 3492 00b4 42F00402 		orr	r2, r2, #4
 3493 00b8 9A60     		str	r2, [r3, #8]
 3494 00ba 04E0     		b	.L283
 3495              	.LVL266:
 3496              	.L287:
4586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3497              		.loc 1 4586 0
 3498 00bc 0023     		movs	r3, #0
 3499 00be 84F84030 		strb	r3, [r4, #64]
 3500 00c2 00E0     		b	.L283
 3501              	.LVL267:
 3502              	.L290:
4591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_BUSY;
 3503              		.loc 1 4591 0
 3504 00c4 0225     		movs	r5, #2
 3505              	.LVL268:
 3506              	.L283:
4595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 3507              		.loc 1 4595 0
 3508 00c6 2846     		mov	r0, r5
 3509 00c8 00E0     		b	.L282
 3510              	.LVL269:
 3511              	.L289:
4492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3512              		.loc 1 4492 0
 3513 00ca 0220     		movs	r0, #2
 3514              	.LVL270:
 3515              	.L282:
4596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3516              		.loc 1 4596 0
 3517 00cc 17B0     		add	sp, sp, #92
 3518              		@ sp needed
 3519 00ce F0BD     		pop	{r4, r5, r6, r7, pc}
 3520              	.LVL271:
 3521              	.L292:
 3522              		.align	2
 3523              	.L291:
 3524 00d0 00010050 		.word	1342177536
 3525 00d4 FEF0EFFF 		.word	-1052418
 3526 00d8 00000000 		.word	ADC_DMAConvCplt
 3527 00dc 00000000 		.word	ADC_DMAHalfConvCplt
 3528 00e0 00000000 		.word	ADC_DMAError
 3529 00e4 0C030050 		.word	1342178060
 3530              		.cfi_endproc
 3531              	.LFE143:
 3533              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 3534              		.align	2
 3535              		.global	HAL_ADCEx_MultiModeStop_DMA
 3536              		.thumb
 3537              		.thumb_func
 3539              	HAL_ADCEx_MultiModeStop_DMA:
 3540              	.LFB144:
ARM GAS  /tmp/cckiGtEU.s 			page 202


4620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3541              		.loc 1 4620 0
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 88
 3544              		@ frame_needed = 0, uses_anonymous_args = 0
 3545              	.LVL272:
 3546 0000 30B5     		push	{r4, r5, lr}
 3547              	.LCFI27:
 3548              		.cfi_def_cfa_offset 12
 3549              		.cfi_offset 4, -12
 3550              		.cfi_offset 5, -8
 3551              		.cfi_offset 14, -4
 3552 0002 97B0     		sub	sp, sp, #92
 3553              	.LCFI28:
 3554              		.cfi_def_cfa_offset 104
 3555 0004 0446     		mov	r4, r0
 3556              	.LVL273:
4629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3557              		.loc 1 4629 0
 3558 0006 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3559 000a 012B     		cmp	r3, #1
 3560 000c 67D0     		beq	.L302
4629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3561              		.loc 1 4629 0 is_stmt 0 discriminator 2
 3562 000e 0123     		movs	r3, #1
 3563 0010 80F84030 		strb	r3, [r0, #64]
4633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 3564              		.loc 1 4633 0 is_stmt 1 discriminator 2
 3565 0014 6C21     		movs	r1, #108
 3566 0016 FFF7FEFF 		bl	ADC_ConversionStop
 3567              	.LVL274:
4636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 3568              		.loc 1 4636 0 discriminator 2
 3569 001a 0546     		mov	r5, r0
 3570 001c 0028     		cmp	r0, #0
 3571 001e 59D1     		bne	.L295
4640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3572              		.loc 1 4640 0
 3573 0020 2368     		ldr	r3, [r4]
 3574 0022 B3F1A04F 		cmp	r3, #1342177280
 3575 0026 02D1     		bne	.L296
4640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3576              		.loc 1 4640 0 is_stmt 0 discriminator 1
 3577 0028 03F58073 		add	r3, r3, #256
 3578 002c 0193     		str	r3, [sp, #4]
 3579              	.L296:
4642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 3580              		.loc 1 4642 0 is_stmt 1
 3581 002e 019B     		ldr	r3, [sp, #4]
 3582 0030 43B9     		cbnz	r3, .L297
4645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3583              		.loc 1 4645 0
 3584 0032 636C     		ldr	r3, [r4, #68]
 3585 0034 43F04003 		orr	r3, r3, #64
 3586 0038 6364     		str	r3, [r4, #68]
4648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3587              		.loc 1 4648 0
ARM GAS  /tmp/cckiGtEU.s 			page 203


 3588 003a 0023     		movs	r3, #0
 3589 003c 84F84030 		strb	r3, [r4, #64]
4650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
 3590              		.loc 1 4650 0
 3591 0040 0120     		movs	r0, #1
 3592              	.LVL275:
 3593 0042 4DE0     		b	.L294
 3594              	.LVL276:
 3595              	.L297:
4657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 3596              		.loc 1 4657 0
 3597 0044 FFF7FEFF 		bl	HAL_GetTick
 3598              	.LVL277:
 3599 0048 0546     		mov	r5, r0
 3600              	.LVL278:
4659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 3601              		.loc 1 4659 0
 3602 004a 0DE0     		b	.L298
 3603              	.LVL279:
 3604              	.L299:
4662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 3605              		.loc 1 4662 0
 3606 004c FFF7FEFF 		bl	HAL_GetTick
 3607              	.LVL280:
 3608 0050 401B     		subs	r0, r0, r5
 3609 0052 0B28     		cmp	r0, #11
 3610 0054 08D9     		bls	.L298
4665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3611              		.loc 1 4665 0
 3612 0056 636C     		ldr	r3, [r4, #68]
 3613 0058 43F01003 		orr	r3, r3, #16
 3614 005c 6364     		str	r3, [r4, #68]
4668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 3615              		.loc 1 4668 0
 3616 005e 0023     		movs	r3, #0
 3617 0060 84F84030 		strb	r3, [r4, #64]
4670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 3618              		.loc 1 4670 0
 3619 0064 0120     		movs	r0, #1
 3620 0066 3BE0     		b	.L294
 3621              	.L298:
4659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 3622              		.loc 1 4659 0 discriminator 1
 3623 0068 2368     		ldr	r3, [r4]
 3624 006a 9B68     		ldr	r3, [r3, #8]
 3625 006c 13F0040F 		tst	r3, #4
 3626 0070 ECD1     		bne	.L299
4660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave)   )
 3627              		.loc 1 4660 0 discriminator 2
 3628 0072 019B     		ldr	r3, [sp, #4]
 3629 0074 9B68     		ldr	r3, [r3, #8]
4659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 3630              		.loc 1 4659 0 discriminator 2
 3631 0076 13F0040F 		tst	r3, #4
 3632 007a E7D1     		bne	.L299
4680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 3633              		.loc 1 4680 0
ARM GAS  /tmp/cckiGtEU.s 			page 204


 3634 007c E06B     		ldr	r0, [r4, #60]
 3635 007e FFF7FEFF 		bl	HAL_DMA_Abort
 3636              	.LVL281:
4683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 3637              		.loc 1 4683 0
 3638 0082 0546     		mov	r5, r0
 3639              	.LVL282:
 3640 0084 18B1     		cbz	r0, .L300
4686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3641              		.loc 1 4686 0
 3642 0086 636C     		ldr	r3, [r4, #68]
 3643 0088 43F04003 		orr	r3, r3, #64
 3644 008c 6364     		str	r3, [r4, #68]
 3645              	.L300:
4690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 3646              		.loc 1 4690 0
 3647 008e 2368     		ldr	r3, [r4]
 3648 0090 5A68     		ldr	r2, [r3, #4]
 3649 0092 22F01002 		bic	r2, r2, #16
 3650 0096 5A60     		str	r2, [r3, #4]
4697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3651              		.loc 1 4697 0
 3652 0098 95B9     		cbnz	r5, .L301
4700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) != HAL_ERROR)          &&
 3653              		.loc 1 4700 0
 3654 009a 2046     		mov	r0, r4
 3655              	.LVL283:
 3656 009c FFF7FEFF 		bl	ADC_Disable
 3657              	.LVL284:
 3658 00a0 0128     		cmp	r0, #1
 3659 00a2 17D0     		beq	.L295
4701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_Disable(&tmphadcSlave) != HAL_ERROR)   )
 3660              		.loc 1 4701 0 discriminator 1
 3661 00a4 01A8     		add	r0, sp, #4
 3662 00a6 FFF7FEFF 		bl	ADC_Disable
 3663              	.LVL285:
4700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) != HAL_ERROR)          &&
 3664              		.loc 1 4700 0 discriminator 1
 3665 00aa 0128     		cmp	r0, #1
 3666 00ac 12D0     		beq	.L295
 3667              	.LVL286:
4706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 3668              		.loc 1 4706 0
 3669 00ae 636C     		ldr	r3, [r4, #68]
 3670 00b0 23F48853 		bic	r3, r3, #4352
 3671 00b4 23F00103 		bic	r3, r3, #1
 3672 00b8 43F00103 		orr	r3, r3, #1
 3673 00bc 6364     		str	r3, [r4, #68]
 3674 00be 09E0     		b	.L295
 3675              	.LVL287:
 3676              	.L301:
4714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
 3677              		.loc 1 4714 0
 3678 00c0 2046     		mov	r0, r4
 3679              	.LVL288:
 3680 00c2 FFF7FEFF 		bl	ADC_Disable
 3681              	.LVL289:
ARM GAS  /tmp/cckiGtEU.s 			page 205


4715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(&tmphadcSlave);
 3682              		.loc 1 4715 0
 3683 00c6 01A8     		add	r0, sp, #4
 3684 00c8 FFF7FEFF 		bl	ADC_Disable
 3685              	.LVL290:
4718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3686              		.loc 1 4718 0
 3687 00cc 636C     		ldr	r3, [r4, #68]
 3688 00ce 43F01003 		orr	r3, r3, #16
 3689 00d2 6364     		str	r3, [r4, #68]
 3690              	.L295:
 3691              	.LVL291:
4724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3692              		.loc 1 4724 0
 3693 00d4 0023     		movs	r3, #0
 3694 00d6 84F84030 		strb	r3, [r4, #64]
4727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 3695              		.loc 1 4727 0
 3696 00da 2846     		mov	r0, r5
 3697 00dc 00E0     		b	.L294
 3698              	.LVL292:
 3699              	.L302:
4629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3700              		.loc 1 4629 0
 3701 00de 0220     		movs	r0, #2
 3702              	.LVL293:
 3703              	.L294:
4728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3704              		.loc 1 4728 0
 3705 00e0 17B0     		add	sp, sp, #92
 3706              		@ sp needed
 3707 00e2 30BD     		pop	{r4, r5, pc}
 3708              		.cfi_endproc
 3709              	.LFE144:
 3711              		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 3712              		.align	2
 3713              		.global	HAL_ADCEx_MultiModeGetValue
 3714              		.thumb
 3715              		.thumb_func
 3717              	HAL_ADCEx_MultiModeGetValue:
 3718              	.LFB145:
4740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3719              		.loc 1 4740 0
 3720              		.cfi_startproc
 3721              		@ args = 0, pretend = 0, frame = 0
 3722              		@ frame_needed = 0, uses_anonymous_args = 0
 3723              		@ link register save eliminated.
 3724              	.LVL294:
4752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmpADC_Common->CDR;
 3725              		.loc 1 4752 0
 3726 0000 014B     		ldr	r3, .L305
 3727 0002 D868     		ldr	r0, [r3, #12]
 3728              	.LVL295:
4753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3729              		.loc 1 4753 0
 3730 0004 7047     		bx	lr
 3731              	.L306:
ARM GAS  /tmp/cckiGtEU.s 			page 206


 3732 0006 00BF     		.align	2
 3733              	.L305:
 3734 0008 00030050 		.word	1342178048
 3735              		.cfi_endproc
 3736              	.LFE145:
 3738              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 3739              		.align	2
 3740              		.global	HAL_ADCEx_InjectedGetValue
 3741              		.thumb
 3742              		.thumb_func
 3744              	HAL_ADCEx_InjectedGetValue:
 3745              	.LFB146:
4791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3746              		.loc 1 4791 0
 3747              		.cfi_startproc
 3748              		@ args = 0, pretend = 0, frame = 0
 3749              		@ frame_needed = 0, uses_anonymous_args = 0
 3750              		@ link register save eliminated.
 3751              	.LVL296:
4802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   switch(InjectedRank)
 3752              		.loc 1 4802 0
 3753 0000 0329     		cmp	r1, #3
 3754 0002 08D0     		beq	.L309
 3755 0004 0429     		cmp	r1, #4
 3756 0006 02D0     		beq	.L310
 3757 0008 0229     		cmp	r1, #2
 3758 000a 0CD1     		bne	.L313
 3759 000c 07E0     		b	.L311
 3760              	.L310:
4805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 3761              		.loc 1 4805 0
 3762 000e 0368     		ldr	r3, [r0]
 3763 0010 D3F88C00 		ldr	r0, [r3, #140]
 3764              	.LVL297:
4806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 3765              		.loc 1 4806 0
 3766 0014 7047     		bx	lr
 3767              	.LVL298:
 3768              	.L309:
4808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 3769              		.loc 1 4808 0
 3770 0016 0368     		ldr	r3, [r0]
 3771 0018 D3F88800 		ldr	r0, [r3, #136]
 3772              	.LVL299:
4809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 3773              		.loc 1 4809 0
 3774 001c 7047     		bx	lr
 3775              	.LVL300:
 3776              	.L311:
4811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 3777              		.loc 1 4811 0
 3778 001e 0368     		ldr	r3, [r0]
 3779 0020 D3F88400 		ldr	r0, [r3, #132]
 3780              	.LVL301:
4812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 3781              		.loc 1 4812 0
 3782 0024 7047     		bx	lr
ARM GAS  /tmp/cckiGtEU.s 			page 207


 3783              	.LVL302:
 3784              	.L313:
4815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 3785              		.loc 1 4815 0
 3786 0026 0368     		ldr	r3, [r0]
 3787 0028 D3F88000 		ldr	r0, [r3, #128]
 3788              	.LVL303:
4821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3789              		.loc 1 4821 0
 3790 002c 7047     		bx	lr
 3791              		.cfi_endproc
 3792              	.LFE146:
 3794 002e 00BF     		.section	.text.HAL_ADCEx_RegularStop,"ax",%progbits
 3795              		.align	2
 3796              		.global	HAL_ADCEx_RegularStop
 3797              		.thumb
 3798              		.thumb_func
 3800              	HAL_ADCEx_RegularStop:
 3801              	.LFB147:
4905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3802              		.loc 1 4905 0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 0
 3805              		@ frame_needed = 0, uses_anonymous_args = 0
 3806              	.LVL304:
 3807 0000 10B5     		push	{r4, lr}
 3808              	.LCFI29:
 3809              		.cfi_def_cfa_offset 8
 3810              		.cfi_offset 4, -8
 3811              		.cfi_offset 14, -4
 3812 0002 0446     		mov	r4, r0
 3813              	.LVL305:
4912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3814              		.loc 1 4912 0
 3815 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3816 0008 012B     		cmp	r3, #1
 3817 000a 26D0     		beq	.L318
4912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3818              		.loc 1 4912 0 is_stmt 0 discriminator 2
 3819 000c 0123     		movs	r3, #1
 3820 000e 80F84030 		strb	r3, [r0, #64]
4926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 3821              		.loc 1 4926 0 is_stmt 1 discriminator 2
 3822 0012 0C21     		movs	r1, #12
 3823 0014 FFF7FEFF 		bl	ADC_ConversionStop
 3824              	.LVL306:
 3825 0018 0346     		mov	r3, r0
 3826              	.LVL307:
4931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 3827              		.loc 1 4931 0 discriminator 2
 3828 001a 2268     		ldr	r2, [r4]
 3829 001c 9268     		ldr	r2, [r2, #8]
 3830 001e 12F0080F 		tst	r2, #8
 3831 0022 11D1     		bne	.L316
4932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
 3832              		.loc 1 4932 0 discriminator 1
 3833 0024 626C     		ldr	r2, [r4, #68]
ARM GAS  /tmp/cckiGtEU.s 			page 208


4931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 3834              		.loc 1 4931 0 discriminator 1
 3835 0026 12F4805F 		tst	r2, #4096
 3836 002a 0DD1     		bne	.L316
4935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
 3837              		.loc 1 4935 0
 3838 002c 2046     		mov	r0, r4
 3839              	.LVL308:
 3840 002e FFF7FEFF 		bl	ADC_Disable
 3841              	.LVL309:
4938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3842              		.loc 1 4938 0
 3843 0032 0346     		mov	r3, r0
 3844 0034 60B9     		cbnz	r0, .L317
4941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 3845              		.loc 1 4941 0
 3846 0036 626C     		ldr	r2, [r4, #68]
 3847 0038 22F48852 		bic	r2, r2, #4352
 3848 003c 22F00102 		bic	r2, r2, #1
 3849 0040 42F00102 		orr	r2, r2, #1
 3850 0044 6264     		str	r2, [r4, #68]
 3851 0046 03E0     		b	.L317
 3852              	.L316:
4951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 3853              		.loc 1 4951 0
 3854 0048 626C     		ldr	r2, [r4, #68]
 3855 004a 22F48072 		bic	r2, r2, #256
 3856 004e 6264     		str	r2, [r4, #68]
 3857              	.LVL310:
 3858              	.L317:
4955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3859              		.loc 1 4955 0
 3860 0050 0022     		movs	r2, #0
 3861 0052 84F84020 		strb	r2, [r4, #64]
4958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 3862              		.loc 1 4958 0
 3863 0056 1846     		mov	r0, r3
 3864 0058 10BD     		pop	{r4, pc}
 3865              	.LVL311:
 3866              	.L318:
4912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3867              		.loc 1 4912 0
 3868 005a 0220     		movs	r0, #2
 3869              	.LVL312:
4959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3870              		.loc 1 4959 0
 3871 005c 10BD     		pop	{r4, pc}
 3872              		.cfi_endproc
 3873              	.LFE147:
 3875 005e 00BF     		.section	.text.HAL_ADCEx_RegularStop_IT,"ax",%progbits
 3876              		.align	2
 3877              		.global	HAL_ADCEx_RegularStop_IT
 3878              		.thumb
 3879              		.thumb_func
 3881              	HAL_ADCEx_RegularStop_IT:
 3882              	.LFB148:
4979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
ARM GAS  /tmp/cckiGtEU.s 			page 209


 3883              		.loc 1 4979 0
 3884              		.cfi_startproc
 3885              		@ args = 0, pretend = 0, frame = 0
 3886              		@ frame_needed = 0, uses_anonymous_args = 0
 3887              	.LVL313:
 3888 0000 10B5     		push	{r4, lr}
 3889              	.LCFI30:
 3890              		.cfi_def_cfa_offset 8
 3891              		.cfi_offset 4, -8
 3892              		.cfi_offset 14, -4
 3893 0002 0446     		mov	r4, r0
 3894              	.LVL314:
4986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3895              		.loc 1 4986 0
 3896 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3897 0008 012B     		cmp	r3, #1
 3898 000a 2AD0     		beq	.L323
4986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3899              		.loc 1 4986 0 is_stmt 0 discriminator 2
 3900 000c 0123     		movs	r3, #1
 3901 000e 80F84030 		strb	r3, [r0, #64]
5000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 3902              		.loc 1 5000 0 is_stmt 1 discriminator 2
 3903 0012 0C21     		movs	r1, #12
 3904 0014 FFF7FEFF 		bl	ADC_ConversionStop
 3905              	.LVL315:
 3906 0018 0246     		mov	r2, r0
 3907              	.LVL316:
5005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 3908              		.loc 1 5005 0 discriminator 2
 3909 001a 2368     		ldr	r3, [r4]
 3910 001c 9968     		ldr	r1, [r3, #8]
 3911 001e 11F0080F 		tst	r1, #8
 3912 0022 15D1     		bne	.L321
5006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
 3913              		.loc 1 5006 0 discriminator 1
 3914 0024 616C     		ldr	r1, [r4, #68]
5005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 3915              		.loc 1 5005 0 discriminator 1
 3916 0026 11F4805F 		tst	r1, #4096
 3917 002a 11D1     		bne	.L321
5010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 3918              		.loc 1 5010 0
 3919 002c 5A68     		ldr	r2, [r3, #4]
 3920 002e 22F01C02 		bic	r2, r2, #28
 3921 0032 5A60     		str	r2, [r3, #4]
5013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Disable(hadc);
 3922              		.loc 1 5013 0
 3923 0034 2046     		mov	r0, r4
 3924              	.LVL317:
 3925 0036 FFF7FEFF 		bl	ADC_Disable
 3926              	.LVL318:
5016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3927              		.loc 1 5016 0
 3928 003a 0246     		mov	r2, r0
 3929 003c 60B9     		cbnz	r0, .L322
5019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cckiGtEU.s 			page 210


 3930              		.loc 1 5019 0
 3931 003e 636C     		ldr	r3, [r4, #68]
 3932 0040 23F48853 		bic	r3, r3, #4352
 3933 0044 23F00103 		bic	r3, r3, #1
 3934 0048 43F00103 		orr	r3, r3, #1
 3935 004c 6364     		str	r3, [r4, #68]
 3936 004e 03E0     		b	.L322
 3937              	.L321:
5029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 3938              		.loc 1 5029 0
 3939 0050 636C     		ldr	r3, [r4, #68]
 3940 0052 23F48073 		bic	r3, r3, #256
 3941 0056 6364     		str	r3, [r4, #68]
 3942              	.LVL319:
 3943              	.L322:
5033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3944              		.loc 1 5033 0
 3945 0058 0023     		movs	r3, #0
 3946 005a 84F84030 		strb	r3, [r4, #64]
5036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 3947              		.loc 1 5036 0
 3948 005e 1046     		mov	r0, r2
 3949 0060 10BD     		pop	{r4, pc}
 3950              	.LVL320:
 3951              	.L323:
4986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3952              		.loc 1 4986 0
 3953 0062 0220     		movs	r0, #2
 3954              	.LVL321:
5037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 3955              		.loc 1 5037 0
 3956 0064 10BD     		pop	{r4, pc}
 3957              		.cfi_endproc
 3958              	.LFE148:
 3960 0066 00BF     		.section	.text.HAL_ADCEx_RegularStop_DMA,"ax",%progbits
 3961              		.align	2
 3962              		.global	HAL_ADCEx_RegularStop_DMA
 3963              		.thumb
 3964              		.thumb_func
 3966              	HAL_ADCEx_RegularStop_DMA:
 3967              	.LFB149:
5059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 3968              		.loc 1 5059 0
 3969              		.cfi_startproc
 3970              		@ args = 0, pretend = 0, frame = 0
 3971              		@ frame_needed = 0, uses_anonymous_args = 0
 3972              	.LVL322:
 3973 0000 38B5     		push	{r3, r4, r5, lr}
 3974              	.LCFI31:
 3975              		.cfi_def_cfa_offset 16
 3976              		.cfi_offset 3, -16
 3977              		.cfi_offset 4, -12
 3978              		.cfi_offset 5, -8
 3979              		.cfi_offset 14, -4
 3980 0002 0446     		mov	r4, r0
 3981              	.LVL323:
5066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
ARM GAS  /tmp/cckiGtEU.s 			page 211


 3982              		.loc 1 5066 0
 3983 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 3984 0008 012B     		cmp	r3, #1
 3985 000a 3DD0     		beq	.L331
5066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3986              		.loc 1 5066 0 is_stmt 0 discriminator 2
 3987 000c 0123     		movs	r3, #1
 3988 000e 80F84030 		strb	r3, [r0, #64]
5080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 3989              		.loc 1 5080 0 is_stmt 1 discriminator 2
 3990 0012 0C21     		movs	r1, #12
 3991 0014 FFF7FEFF 		bl	ADC_ConversionStop
 3992              	.LVL324:
 3993 0018 0546     		mov	r5, r0
 3994              	.LVL325:
5085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 3995              		.loc 1 5085 0 discriminator 2
 3996 001a 2368     		ldr	r3, [r4]
 3997 001c 9A68     		ldr	r2, [r3, #8]
 3998 001e 12F0080F 		tst	r2, #8
 3999 0022 28D1     		bne	.L326
5086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
 4000              		.loc 1 5086 0 discriminator 1
 4001 0024 626C     		ldr	r2, [r4, #68]
5085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 4002              		.loc 1 5085 0 discriminator 1
 4003 0026 12F4805F 		tst	r2, #4096
 4004 002a 24D1     		bne	.L326
5089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 4005              		.loc 1 5089 0
 4006 002c DA68     		ldr	r2, [r3, #12]
 4007 002e 22F00102 		bic	r2, r2, #1
 4008 0032 DA60     		str	r2, [r3, #12]
5093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 4009              		.loc 1 5093 0
 4010 0034 E06B     		ldr	r0, [r4, #60]
 4011              	.LVL326:
 4012 0036 FFF7FEFF 		bl	HAL_DMA_Abort
 4013              	.LVL327:
5096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 4014              		.loc 1 5096 0
 4015 003a 0546     		mov	r5, r0
 4016 003c 18B1     		cbz	r0, .L327
5099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 4017              		.loc 1 5099 0
 4018 003e 636C     		ldr	r3, [r4, #68]
 4019 0040 43F04003 		orr	r3, r3, #64
 4020 0044 6364     		str	r3, [r4, #68]
 4021              	.L327:
5103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 4022              		.loc 1 5103 0
 4023 0046 2368     		ldr	r3, [r4]
 4024 0048 5A68     		ldr	r2, [r3, #4]
 4025 004a 22F01002 		bic	r2, r2, #16
 4026 004e 5A60     		str	r2, [r3, #4]
5108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 4027              		.loc 1 5108 0
ARM GAS  /tmp/cckiGtEU.s 			page 212


 4028 0050 25B9     		cbnz	r5, .L328
5110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 4029              		.loc 1 5110 0
 4030 0052 2046     		mov	r0, r4
 4031              	.LVL328:
 4032 0054 FFF7FEFF 		bl	ADC_Disable
 4033              	.LVL329:
 4034 0058 0546     		mov	r5, r0
 4035              	.LVL330:
 4036 005a 02E0     		b	.L329
 4037              	.L328:
5114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
 4038              		.loc 1 5114 0
 4039 005c 2046     		mov	r0, r4
 4040              	.LVL331:
 4041 005e FFF7FEFF 		bl	ADC_Disable
 4042              	.LVL332:
 4043              	.L329:
5118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 4044              		.loc 1 5118 0
 4045 0062 65B9     		cbnz	r5, .L330
5121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 4046              		.loc 1 5121 0
 4047 0064 636C     		ldr	r3, [r4, #68]
 4048 0066 23F48853 		bic	r3, r3, #4352
 4049 006a 23F00103 		bic	r3, r3, #1
 4050 006e 43F00103 		orr	r3, r3, #1
 4051 0072 6364     		str	r3, [r4, #68]
 4052 0074 03E0     		b	.L330
 4053              	.LVL333:
 4054              	.L326:
5131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 4055              		.loc 1 5131 0
 4056 0076 636C     		ldr	r3, [r4, #68]
 4057 0078 23F48073 		bic	r3, r3, #256
 4058 007c 6364     		str	r3, [r4, #68]
 4059              	.LVL334:
 4060              	.L330:
5135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 4061              		.loc 1 5135 0
 4062 007e 0023     		movs	r3, #0
 4063 0080 84F84030 		strb	r3, [r4, #64]
5138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 4064              		.loc 1 5138 0
 4065 0084 2846     		mov	r0, r5
 4066 0086 38BD     		pop	{r3, r4, r5, pc}
 4067              	.LVL335:
 4068              	.L331:
5066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4069              		.loc 1 5066 0
 4070 0088 0220     		movs	r0, #2
 4071              	.LVL336:
5139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 4072              		.loc 1 5139 0
 4073 008a 38BD     		pop	{r3, r4, r5, pc}
 4074              		.cfi_endproc
 4075              	.LFE149:
ARM GAS  /tmp/cckiGtEU.s 			page 213


 4077              		.section	.text.HAL_ADCEx_RegularMultiModeStop_DMA,"ax",%progbits
 4078              		.align	2
 4079              		.global	HAL_ADCEx_RegularMultiModeStop_DMA
 4080              		.thumb
 4081              		.thumb_func
 4083              	HAL_ADCEx_RegularMultiModeStop_DMA:
 4084              	.LFB150:
5171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4085              		.loc 1 5171 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 88
 4088              		@ frame_needed = 0, uses_anonymous_args = 0
 4089              	.LVL337:
 4090 0000 30B5     		push	{r4, r5, lr}
 4091              	.LCFI32:
 4092              		.cfi_def_cfa_offset 12
 4093              		.cfi_offset 4, -12
 4094              		.cfi_offset 5, -8
 4095              		.cfi_offset 14, -4
 4096 0002 97B0     		sub	sp, sp, #92
 4097              	.LCFI33:
 4098              		.cfi_def_cfa_offset 104
 4099 0004 0446     		mov	r4, r0
 4100              	.LVL338:
5180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4101              		.loc 1 5180 0
 4102 0006 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 4103 000a 012B     		cmp	r3, #1
 4104 000c 72D0     		beq	.L342
5180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4105              		.loc 1 5180 0 is_stmt 0 discriminator 2
 4106 000e 0123     		movs	r3, #1
 4107 0010 80F84030 		strb	r3, [r0, #64]
5194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 4108              		.loc 1 5194 0 is_stmt 1 discriminator 2
 4109 0014 0C21     		movs	r1, #12
 4110 0016 FFF7FEFF 		bl	ADC_ConversionStop
 4111              	.LVL339:
 4112 001a 0546     		mov	r5, r0
 4113              	.LVL340:
5199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 4114              		.loc 1 5199 0 discriminator 2
 4115 001c 2368     		ldr	r3, [r4]
 4116 001e 9A68     		ldr	r2, [r3, #8]
 4117 0020 12F0080F 		tst	r2, #8
 4118 0024 5DD1     		bne	.L334
5200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****      ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == RESET)     )
 4119              		.loc 1 5200 0 discriminator 1
 4120 0026 626C     		ldr	r2, [r4, #68]
5199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if((ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET) &&
 4121              		.loc 1 5199 0 discriminator 1
 4122 0028 12F4805F 		tst	r2, #4096
 4123 002c 59D1     		bne	.L334
5204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 4124              		.loc 1 5204 0
 4125 002e B3F1A04F 		cmp	r3, #1342177280
 4126 0032 02D1     		bne	.L335
ARM GAS  /tmp/cckiGtEU.s 			page 214


5204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 4127              		.loc 1 5204 0 is_stmt 0 discriminator 1
 4128 0034 03F58073 		add	r3, r3, #256
 4129 0038 0193     		str	r3, [sp, #4]
 4130              	.L335:
5206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 4131              		.loc 1 5206 0 is_stmt 1
 4132 003a 019B     		ldr	r3, [sp, #4]
 4133 003c 43B9     		cbnz	r3, .L336
5209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 4134              		.loc 1 5209 0
 4135 003e 636C     		ldr	r3, [r4, #68]
 4136 0040 43F04003 		orr	r3, r3, #64
 4137 0044 6364     		str	r3, [r4, #68]
5212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 4138              		.loc 1 5212 0
 4139 0046 0023     		movs	r3, #0
 4140 0048 84F84030 		strb	r3, [r4, #64]
5214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       return HAL_ERROR;
 4141              		.loc 1 5214 0
 4142 004c 0120     		movs	r0, #1
 4143              	.LVL341:
 4144 004e 52E0     		b	.L333
 4145              	.LVL342:
 4146              	.L336:
5221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 4147              		.loc 1 5221 0
 4148 0050 FFF7FEFF 		bl	HAL_GetTick
 4149              	.LVL343:
 4150 0054 0546     		mov	r5, r0
 4151              	.LVL344:
5223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 4152              		.loc 1 5223 0
 4153 0056 0DE0     		b	.L337
 4154              	.LVL345:
 4155              	.L338:
5226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 4156              		.loc 1 5226 0
 4157 0058 FFF7FEFF 		bl	HAL_GetTick
 4158              	.LVL346:
 4159 005c 401B     		subs	r0, r0, r5
 4160 005e 0B28     		cmp	r0, #11
 4161 0060 08D9     		bls	.L337
5229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 4162              		.loc 1 5229 0
 4163 0062 636C     		ldr	r3, [r4, #68]
 4164 0064 43F01003 		orr	r3, r3, #16
 4165 0068 6364     		str	r3, [r4, #68]
5232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 4166              		.loc 1 5232 0
 4167 006a 0023     		movs	r3, #0
 4168 006c 84F84030 		strb	r3, [r4, #64]
5234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         return HAL_ERROR;
 4169              		.loc 1 5234 0
 4170 0070 0120     		movs	r0, #1
 4171 0072 40E0     		b	.L333
 4172              	.L337:
ARM GAS  /tmp/cckiGtEU.s 			page 215


5223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 4173              		.loc 1 5223 0 discriminator 1
 4174 0074 2368     		ldr	r3, [r4]
 4175 0076 9B68     		ldr	r3, [r3, #8]
 4176 0078 13F0040F 		tst	r3, #4
 4177 007c ECD1     		bne	.L338
5224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave)   )
 4178              		.loc 1 5224 0 discriminator 2
 4179 007e 019B     		ldr	r3, [sp, #4]
 4180 0080 9B68     		ldr	r3, [r3, #8]
5223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 4181              		.loc 1 5223 0 discriminator 2
 4182 0082 13F0040F 		tst	r3, #4
 4183 0086 E7D1     		bne	.L338
5244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 4184              		.loc 1 5244 0
 4185 0088 E06B     		ldr	r0, [r4, #60]
 4186 008a FFF7FEFF 		bl	HAL_DMA_Abort
 4187              	.LVL347:
5247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 4188              		.loc 1 5247 0
 4189 008e 0546     		mov	r5, r0
 4190              	.LVL348:
 4191 0090 18B1     		cbz	r0, .L339
5250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 4192              		.loc 1 5250 0
 4193 0092 636C     		ldr	r3, [r4, #68]
 4194 0094 43F04003 		orr	r3, r3, #64
 4195 0098 6364     		str	r3, [r4, #68]
 4196              	.L339:
5254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 4197              		.loc 1 5254 0
 4198 009a 2368     		ldr	r3, [r4]
 4199 009c 5A68     		ldr	r2, [r3, #4]
 4200 009e 22F01002 		bic	r2, r2, #16
 4201 00a2 5A60     		str	r2, [r3, #4]
5261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 4202              		.loc 1 5261 0
 4203 00a4 95B9     		cbnz	r5, .L340
5264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) != HAL_ERROR)          &&
 4204              		.loc 1 5264 0
 4205 00a6 2046     		mov	r0, r4
 4206              	.LVL349:
 4207 00a8 FFF7FEFF 		bl	ADC_Disable
 4208              	.LVL350:
 4209 00ac 0128     		cmp	r0, #1
 4210 00ae 1CD0     		beq	.L341
5265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_Disable(&tmphadcSlave) != HAL_ERROR)   )
 4211              		.loc 1 5265 0 discriminator 1
 4212 00b0 01A8     		add	r0, sp, #4
 4213 00b2 FFF7FEFF 		bl	ADC_Disable
 4214              	.LVL351:
5264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) != HAL_ERROR)          &&
 4215              		.loc 1 5264 0 discriminator 1
 4216 00b6 0128     		cmp	r0, #1
 4217 00b8 17D0     		beq	.L341
 4218              	.LVL352:
ARM GAS  /tmp/cckiGtEU.s 			page 216


5270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 4219              		.loc 1 5270 0
 4220 00ba 636C     		ldr	r3, [r4, #68]
 4221 00bc 23F48853 		bic	r3, r3, #4352
 4222 00c0 23F00103 		bic	r3, r3, #1
 4223 00c4 43F00103 		orr	r3, r3, #1
 4224 00c8 6364     		str	r3, [r4, #68]
 4225 00ca 0EE0     		b	.L341
 4226              	.LVL353:
 4227              	.L340:
5278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(hadc);
 4228              		.loc 1 5278 0
 4229 00cc 2046     		mov	r0, r4
 4230              	.LVL354:
 4231 00ce FFF7FEFF 		bl	ADC_Disable
 4232              	.LVL355:
5279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_Disable(&tmphadcSlave);
 4233              		.loc 1 5279 0
 4234 00d2 01A8     		add	r0, sp, #4
 4235 00d4 FFF7FEFF 		bl	ADC_Disable
 4236              	.LVL356:
5282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 4237              		.loc 1 5282 0
 4238 00d8 636C     		ldr	r3, [r4, #68]
 4239 00da 43F01003 		orr	r3, r3, #16
 4240 00de 6364     		str	r3, [r4, #68]
 4241 00e0 03E0     		b	.L341
 4242              	.LVL357:
 4243              	.L334:
5291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 4244              		.loc 1 5291 0
 4245 00e2 636C     		ldr	r3, [r4, #68]
 4246 00e4 23F48073 		bic	r3, r3, #256
 4247 00e8 6364     		str	r3, [r4, #68]
 4248              	.LVL358:
 4249              	.L341:
5295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 4250              		.loc 1 5295 0
 4251 00ea 0023     		movs	r3, #0
 4252 00ec 84F84030 		strb	r3, [r4, #64]
5298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 4253              		.loc 1 5298 0
 4254 00f0 2846     		mov	r0, r5
 4255 00f2 00E0     		b	.L333
 4256              	.LVL359:
 4257              	.L342:
5180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4258              		.loc 1 5180 0
 4259 00f4 0220     		movs	r0, #2
 4260              	.LVL360:
 4261              	.L333:
5299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 4262              		.loc 1 5299 0
 4263 00f6 17B0     		add	sp, sp, #92
 4264              		@ sp needed
 4265 00f8 30BD     		pop	{r4, r5, pc}
 4266              		.cfi_endproc
ARM GAS  /tmp/cckiGtEU.s 			page 217


 4267              	.LFE150:
 4269 00fa 00BF     		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 4270              		.align	2
 4271              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 4272              		.thumb
 4273              		.thumb_func
 4275              	HAL_ADCEx_InjectedConvCpltCallback:
 4276              	.LFB151:
5316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4277              		.loc 1 5316 0
 4278              		.cfi_startproc
 4279              		@ args = 0, pretend = 0, frame = 0
 4280              		@ frame_needed = 0, uses_anonymous_args = 0
 4281              		@ link register save eliminated.
 4282              	.LVL361:
 4283 0000 7047     		bx	lr
 4284              		.cfi_endproc
 4285              	.LFE151:
 4287 0002 00BF     		.section	.text.HAL_ADCEx_InjectedQueueOverflowCallback,"ax",%progbits
 4288              		.align	2
 4289              		.weak	HAL_ADCEx_InjectedQueueOverflowCallback
 4290              		.thumb
 4291              		.thumb_func
 4293              	HAL_ADCEx_InjectedQueueOverflowCallback:
 4294              	.LFB152:
5339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4295              		.loc 1 5339 0
 4296              		.cfi_startproc
 4297              		@ args = 0, pretend = 0, frame = 0
 4298              		@ frame_needed = 0, uses_anonymous_args = 0
 4299              		@ link register save eliminated.
 4300              	.LVL362:
 4301 0000 7047     		bx	lr
 4302              		.cfi_endproc
 4303              	.LFE152:
 4305 0002 00BF     		.section	.text.HAL_ADCEx_LevelOutOfWindow2Callback,"ax",%progbits
 4306              		.align	2
 4307              		.weak	HAL_ADCEx_LevelOutOfWindow2Callback
 4308              		.thumb
 4309              		.thumb_func
 4311              	HAL_ADCEx_LevelOutOfWindow2Callback:
 4312              	.LFB153:
5355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4313              		.loc 1 5355 0
 4314              		.cfi_startproc
 4315              		@ args = 0, pretend = 0, frame = 0
 4316              		@ frame_needed = 0, uses_anonymous_args = 0
 4317              		@ link register save eliminated.
 4318              	.LVL363:
 4319 0000 7047     		bx	lr
 4320              		.cfi_endproc
 4321              	.LFE153:
 4323 0002 00BF     		.section	.text.HAL_ADCEx_LevelOutOfWindow3Callback,"ax",%progbits
 4324              		.align	2
 4325              		.weak	HAL_ADCEx_LevelOutOfWindow3Callback
 4326              		.thumb
 4327              		.thumb_func
ARM GAS  /tmp/cckiGtEU.s 			page 218


 4329              	HAL_ADCEx_LevelOutOfWindow3Callback:
 4330              	.LFB154:
5370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4331              		.loc 1 5370 0
 4332              		.cfi_startproc
 4333              		@ args = 0, pretend = 0, frame = 0
 4334              		@ frame_needed = 0, uses_anonymous_args = 0
 4335              		@ link register save eliminated.
 4336              	.LVL364:
 4337 0000 7047     		bx	lr
 4338              		.cfi_endproc
 4339              	.LFE154:
 4341 0002 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 4342              		.align	2
 4343              		.global	HAL_ADC_IRQHandler
 4344              		.thumb
 4345              		.thumb_func
 4347              	HAL_ADC_IRQHandler:
 4348              	.LFB134:
2821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4349              		.loc 1 2821 0
 4350              		.cfi_startproc
 4351              		@ args = 0, pretend = 0, frame = 0
 4352              		@ frame_needed = 0, uses_anonymous_args = 0
 4353              	.LVL365:
2821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4354              		.loc 1 2821 0
 4355 0000 10B5     		push	{r4, lr}
 4356              	.LCFI34:
 4357              		.cfi_def_cfa_offset 8
 4358              		.cfi_offset 4, -8
 4359              		.cfi_offset 14, -4
 4360 0002 0446     		mov	r4, r0
 4361              	.LVL366:
2833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 4362              		.loc 1 2833 0
 4363 0004 0368     		ldr	r3, [r0]
 4364 0006 1A68     		ldr	r2, [r3]
 4365 0008 12F0040F 		tst	r2, #4
 4366 000c 03D0     		beq	.L349
2833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 4367              		.loc 1 2833 0 is_stmt 0 discriminator 1
 4368 000e 5A68     		ldr	r2, [r3, #4]
 4369 0010 12F0040F 		tst	r2, #4
 4370 0014 07D1     		bne	.L350
 4371              	.L349:
2834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 4372              		.loc 1 2834 0 is_stmt 1 discriminator 2
 4373 0016 1A68     		ldr	r2, [r3]
2833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 4374              		.loc 1 2833 0 discriminator 2
 4375 0018 12F0080F 		tst	r2, #8
 4376 001c 52D0     		beq	.L351
2834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 4377              		.loc 1 2834 0
 4378 001e 5A68     		ldr	r2, [r3, #4]
 4379 0020 12F0080F 		tst	r2, #8
ARM GAS  /tmp/cckiGtEU.s 			page 219


 4380 0024 4ED0     		beq	.L351
 4381              	.L350:
2837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 4382              		.loc 1 2837 0
 4383 0026 626C     		ldr	r2, [r4, #68]
 4384 0028 12F0100F 		tst	r2, #16
 4385 002c 03D1     		bne	.L352
2840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 4386              		.loc 1 2840 0
 4387 002e 626C     		ldr	r2, [r4, #68]
 4388 0030 42F40072 		orr	r2, r2, #512
 4389 0034 6264     		str	r2, [r4, #68]
 4390              	.L352:
2846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 4391              		.loc 1 2846 0
 4392 0036 A54A     		ldr	r2, .L381
 4393 0038 9268     		ldr	r2, [r2, #8]
 4394 003a 12F01F0F 		tst	r2, #31
 4395 003e 0ED0     		beq	.L353
2846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 4396              		.loc 1 2846 0 is_stmt 0 discriminator 1
 4397 0040 A24A     		ldr	r2, .L381
 4398 0042 9268     		ldr	r2, [r2, #8]
 4399 0044 02F01F02 		and	r2, r2, #31
 4400 0048 052A     		cmp	r2, #5
 4401 004a 08D0     		beq	.L353
 4402 004c 9F4A     		ldr	r2, .L381
 4403 004e 9268     		ldr	r2, [r2, #8]
 4404 0050 02F01F02 		and	r2, r2, #31
 4405 0054 092A     		cmp	r2, #9
 4406 0056 02D0     		beq	.L353
 4407 0058 B3F1A04F 		cmp	r3, #1342177280
 4408 005c 01D1     		bne	.L354
 4409              	.L353:
2848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 4410              		.loc 1 2848 0 is_stmt 1
 4411 005e D968     		ldr	r1, [r3, #12]
 4412              	.LVL367:
 4413 0060 02E0     		b	.L355
 4414              	.LVL368:
 4415              	.L354:
2852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 4416              		.loc 1 2852 0
 4417 0062 4FF0A042 		mov	r2, #1342177280
 4418 0066 D168     		ldr	r1, [r2, #12]
 4419              	.LVL369:
 4420              	.L355:
2858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 4421              		.loc 1 2858 0
 4422 0068 DA68     		ldr	r2, [r3, #12]
 4423 006a 12F4406F 		tst	r2, #3072
 4424 006e 23D1     		bne	.L356
2858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 4425              		.loc 1 2858 0 is_stmt 0 discriminator 1
 4426 0070 11F4005F 		tst	r1, #8192
 4427 0074 20D1     		bne	.L356
2862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
ARM GAS  /tmp/cckiGtEU.s 			page 220


 4428              		.loc 1 2862 0 is_stmt 1
 4429 0076 1A68     		ldr	r2, [r3]
 4430 0078 12F0080F 		tst	r2, #8
 4431 007c 1CD0     		beq	.L356
2866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 4432              		.loc 1 2866 0
 4433 007e 9A68     		ldr	r2, [r3, #8]
 4434 0080 12F0040F 		tst	r2, #4
 4435 0084 10D1     		bne	.L357
2872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 4436              		.loc 1 2872 0
 4437 0086 5A68     		ldr	r2, [r3, #4]
 4438 0088 22F00C02 		bic	r2, r2, #12
 4439 008c 5A60     		str	r2, [r3, #4]
2875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 4440              		.loc 1 2875 0
 4441 008e 636C     		ldr	r3, [r4, #68]
 4442 0090 23F48073 		bic	r3, r3, #256
 4443 0094 6364     		str	r3, [r4, #68]
2877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 4444              		.loc 1 2877 0
 4445 0096 636C     		ldr	r3, [r4, #68]
 4446 0098 13F4805F 		tst	r3, #4096
 4447 009c 0CD1     		bne	.L356
2879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 4448              		.loc 1 2879 0
 4449 009e 636C     		ldr	r3, [r4, #68]
 4450 00a0 43F00103 		orr	r3, r3, #1
 4451 00a4 6364     		str	r3, [r4, #68]
 4452 00a6 07E0     		b	.L356
 4453              	.L357:
2885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 4454              		.loc 1 2885 0
 4455 00a8 636C     		ldr	r3, [r4, #68]
 4456 00aa 43F01003 		orr	r3, r3, #16
 4457 00ae 6364     		str	r3, [r4, #68]
2888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 4458              		.loc 1 2888 0
 4459 00b0 A36C     		ldr	r3, [r4, #72]
 4460 00b2 43F00103 		orr	r3, r3, #1
 4461 00b6 A364     		str	r3, [r4, #72]
 4462              	.L356:
2897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_ConvCpltCallback(hadc);
 4463              		.loc 1 2897 0
 4464 00b8 2046     		mov	r0, r4
 4465              	.LVL370:
 4466 00ba FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 4467              	.LVL371:
2906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 4468              		.loc 1 2906 0
 4469 00be 2368     		ldr	r3, [r4]
 4470 00c0 0C22     		movs	r2, #12
 4471 00c2 1A60     		str	r2, [r3]
 4472              	.L351:
2911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 4473              		.loc 1 2911 0
 4474 00c4 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cckiGtEU.s 			page 221


 4475 00c6 1A68     		ldr	r2, [r3]
 4476 00c8 12F0200F 		tst	r2, #32
 4477 00cc 03D0     		beq	.L358
2911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 4478              		.loc 1 2911 0 is_stmt 0 discriminator 1
 4479 00ce 5A68     		ldr	r2, [r3, #4]
 4480 00d0 12F0200F 		tst	r2, #32
 4481 00d4 07D1     		bne	.L359
 4482              	.L358:
2912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 4483              		.loc 1 2912 0 is_stmt 1 discriminator 2
 4484 00d6 1A68     		ldr	r2, [r3]
2911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 4485              		.loc 1 2911 0 discriminator 2
 4486 00d8 12F0400F 		tst	r2, #64
 4487 00dc 71D0     		beq	.L360
2912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 4488              		.loc 1 2912 0
 4489 00de 5A68     		ldr	r2, [r3, #4]
 4490 00e0 12F0400F 		tst	r2, #64
 4491 00e4 6DD0     		beq	.L360
 4492              	.L359:
2915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 4493              		.loc 1 2915 0
 4494 00e6 626C     		ldr	r2, [r4, #68]
 4495 00e8 42F40052 		orr	r2, r2, #8192
 4496 00ec 6264     		str	r2, [r4, #68]
2920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 4497              		.loc 1 2920 0
 4498 00ee 774A     		ldr	r2, .L381
 4499 00f0 9268     		ldr	r2, [r2, #8]
 4500 00f2 12F01F0F 		tst	r2, #31
 4501 00f6 0ED0     		beq	.L361
2920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 4502              		.loc 1 2920 0 is_stmt 0 discriminator 1
 4503 00f8 744A     		ldr	r2, .L381
 4504 00fa 9268     		ldr	r2, [r2, #8]
 4505 00fc 02F01F02 		and	r2, r2, #31
 4506 0100 052A     		cmp	r2, #5
 4507 0102 08D0     		beq	.L361
 4508 0104 714A     		ldr	r2, .L381
 4509 0106 9268     		ldr	r2, [r2, #8]
 4510 0108 02F01F02 		and	r2, r2, #31
 4511 010c 092A     		cmp	r2, #9
 4512 010e 02D0     		beq	.L361
 4513 0110 B3F1A04F 		cmp	r3, #1342177280
 4514 0114 01D1     		bne	.L362
 4515              	.L361:
2922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 4516              		.loc 1 2922 0 is_stmt 1
 4517 0116 D968     		ldr	r1, [r3, #12]
 4518              	.LVL372:
 4519 0118 02E0     		b	.L363
 4520              	.LVL373:
 4521              	.L362:
2926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 4522              		.loc 1 2926 0
ARM GAS  /tmp/cckiGtEU.s 			page 222


 4523 011a 4FF0A042 		mov	r2, #1342177280
 4524 011e D168     		ldr	r1, [r2, #12]
 4525              	.LVL374:
 4526              	.L363:
2934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 4527              		.loc 1 2934 0
 4528 0120 DA6C     		ldr	r2, [r3, #76]
 4529 0122 12F0C00F 		tst	r2, #192
 4530 0126 09D0     		beq	.L364
2934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 4531              		.loc 1 2934 0 is_stmt 0 discriminator 1
 4532 0128 11F0007F 		tst	r1, #33554432
 4533 012c 43D1     		bne	.L365
2936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 4534              		.loc 1 2936 0 is_stmt 1
 4535 012e DA68     		ldr	r2, [r3, #12]
2935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****        ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 4536              		.loc 1 2935 0
 4537 0130 12F4406F 		tst	r2, #3072
 4538 0134 3FD1     		bne	.L365
2936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 4539              		.loc 1 2936 0
 4540 0136 11F4005F 		tst	r1, #8192
 4541 013a 3CD1     		bne	.L365
 4542              	.L364:
2940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 4543              		.loc 1 2940 0
 4544 013c 1A68     		ldr	r2, [r3]
 4545 013e 12F0400F 		tst	r2, #64
 4546 0142 38D0     		beq	.L365
2946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 4547              		.loc 1 2946 0
 4548 0144 614A     		ldr	r2, .L381
 4549 0146 9268     		ldr	r2, [r2, #8]
 4550 0148 12F01F0F 		tst	r2, #31
 4551 014c 0ED0     		beq	.L366
2946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 4552              		.loc 1 2946 0 is_stmt 0 discriminator 1
 4553 014e 5F4A     		ldr	r2, .L381
 4554 0150 9268     		ldr	r2, [r2, #8]
 4555 0152 02F01F02 		and	r2, r2, #31
 4556 0156 062A     		cmp	r2, #6
 4557 0158 08D0     		beq	.L366
 4558 015a 5C4A     		ldr	r2, .L381
 4559 015c 9268     		ldr	r2, [r2, #8]
 4560 015e 02F01F02 		and	r2, r2, #31
 4561 0162 072A     		cmp	r2, #7
 4562 0164 02D0     		beq	.L366
 4563 0166 B3F1A04F 		cmp	r3, #1342177280
 4564 016a 01D1     		bne	.L367
 4565              	.L366:
2948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 4566              		.loc 1 2948 0 is_stmt 1
 4567 016c DA68     		ldr	r2, [r3, #12]
 4568              	.LVL375:
 4569 016e 02E0     		b	.L368
 4570              	.LVL376:
ARM GAS  /tmp/cckiGtEU.s 			page 223


 4571              	.L367:
2952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 4572              		.loc 1 2952 0
 4573 0170 4FF0A042 		mov	r2, #1342177280
 4574 0174 D268     		ldr	r2, [r2, #12]
 4575              	.LVL377:
 4576              	.L368:
2961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 4577              		.loc 1 2961 0
 4578 0176 12F4001F 		tst	r2, #2097152
 4579 017a 1CD1     		bne	.L365
2965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 4580              		.loc 1 2965 0
 4581 017c 9A68     		ldr	r2, [r3, #8]
 4582              	.LVL378:
 4583 017e 12F0080F 		tst	r2, #8
 4584 0182 10D1     		bne	.L369
2968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 4585              		.loc 1 2968 0
 4586 0184 5A68     		ldr	r2, [r3, #4]
 4587 0186 22F06002 		bic	r2, r2, #96
 4588 018a 5A60     		str	r2, [r3, #4]
2971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 4589              		.loc 1 2971 0
 4590 018c 636C     		ldr	r3, [r4, #68]
 4591 018e 23F48053 		bic	r3, r3, #4096
 4592 0192 6364     		str	r3, [r4, #68]
2973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 4593              		.loc 1 2973 0
 4594 0194 636C     		ldr	r3, [r4, #68]
 4595 0196 13F4807F 		tst	r3, #256
 4596 019a 0CD1     		bne	.L365
2975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 4597              		.loc 1 2975 0
 4598 019c 636C     		ldr	r3, [r4, #68]
 4599 019e 43F00103 		orr	r3, r3, #1
 4600 01a2 6364     		str	r3, [r4, #68]
 4601 01a4 07E0     		b	.L365
 4602              	.L369:
2981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 4603              		.loc 1 2981 0
 4604 01a6 636C     		ldr	r3, [r4, #68]
 4605 01a8 43F01003 		orr	r3, r3, #16
 4606 01ac 6364     		str	r3, [r4, #68]
2984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 4607              		.loc 1 2984 0
 4608 01ae A36C     		ldr	r3, [r4, #72]
 4609 01b0 43F00103 		orr	r3, r3, #1
 4610 01b4 A364     		str	r3, [r4, #72]
 4611              	.L365:
2994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 4612              		.loc 1 2994 0
 4613 01b6 2046     		mov	r0, r4
 4614 01b8 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 4615              	.LVL379:
2997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 4616              		.loc 1 2997 0
ARM GAS  /tmp/cckiGtEU.s 			page 224


 4617 01bc 2368     		ldr	r3, [r4]
 4618 01be 6022     		movs	r2, #96
 4619 01c0 1A60     		str	r2, [r3]
 4620              	.L360:
3001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 4621              		.loc 1 3001 0
 4622 01c2 2368     		ldr	r3, [r4]
 4623 01c4 1A68     		ldr	r2, [r3]
 4624 01c6 12F0800F 		tst	r2, #128
 4625 01ca 0DD0     		beq	.L370
3001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 4626              		.loc 1 3001 0 is_stmt 0 discriminator 1
 4627 01cc 5B68     		ldr	r3, [r3, #4]
 4628 01ce 13F0800F 		tst	r3, #128
 4629 01d2 09D0     		beq	.L370
3004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 4630              		.loc 1 3004 0 is_stmt 1
 4631 01d4 636C     		ldr	r3, [r4, #68]
 4632 01d6 43F48033 		orr	r3, r3, #65536
 4633 01da 6364     		str	r3, [r4, #68]
3007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 4634              		.loc 1 3007 0
 4635 01dc 2046     		mov	r0, r4
 4636 01de FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 4637              	.LVL380:
3009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 4638              		.loc 1 3009 0
 4639 01e2 2368     		ldr	r3, [r4]
 4640 01e4 8022     		movs	r2, #128
 4641 01e6 1A60     		str	r2, [r3]
 4642              	.L370:
3013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 4643              		.loc 1 3013 0
 4644 01e8 2368     		ldr	r3, [r4]
 4645 01ea 1A68     		ldr	r2, [r3]
 4646 01ec 12F4807F 		tst	r2, #256
 4647 01f0 0ED0     		beq	.L371
3013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 4648              		.loc 1 3013 0 is_stmt 0 discriminator 1
 4649 01f2 5B68     		ldr	r3, [r3, #4]
 4650 01f4 13F4807F 		tst	r3, #256
 4651 01f8 0AD0     		beq	.L371
3016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 4652              		.loc 1 3016 0 is_stmt 1
 4653 01fa 636C     		ldr	r3, [r4, #68]
 4654 01fc 43F40033 		orr	r3, r3, #131072
 4655 0200 6364     		str	r3, [r4, #68]
3019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 4656              		.loc 1 3019 0
 4657 0202 2046     		mov	r0, r4
 4658 0204 FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
 4659              	.LVL381:
3021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 4660              		.loc 1 3021 0
 4661 0208 2368     		ldr	r3, [r4]
 4662 020a 4FF48072 		mov	r2, #256
 4663 020e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cckiGtEU.s 			page 225


 4664              	.L371:
3025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 4665              		.loc 1 3025 0
 4666 0210 2368     		ldr	r3, [r4]
 4667 0212 1A68     		ldr	r2, [r3]
 4668 0214 12F4007F 		tst	r2, #512
 4669 0218 0ED0     		beq	.L372
3025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 4670              		.loc 1 3025 0 is_stmt 0 discriminator 1
 4671 021a 5B68     		ldr	r3, [r3, #4]
 4672 021c 13F4007F 		tst	r3, #512
 4673 0220 0AD0     		beq	.L372
3028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 4674              		.loc 1 3028 0 is_stmt 1
 4675 0222 636C     		ldr	r3, [r4, #68]
 4676 0224 43F48023 		orr	r3, r3, #262144
 4677 0228 6364     		str	r3, [r4, #68]
3031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 4678              		.loc 1 3031 0
 4679 022a 2046     		mov	r0, r4
 4680 022c FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
 4681              	.LVL382:
3033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 4682              		.loc 1 3033 0
 4683 0230 2368     		ldr	r3, [r4]
 4684 0232 4FF40072 		mov	r2, #512
 4685 0236 1A60     		str	r2, [r3]
 4686              	.L372:
3037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 4687              		.loc 1 3037 0
 4688 0238 2368     		ldr	r3, [r4]
 4689 023a 1A68     		ldr	r2, [r3]
 4690 023c 12F0100F 		tst	r2, #16
 4691 0240 2CD0     		beq	.L373
3037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 4692              		.loc 1 3037 0 is_stmt 0 discriminator 1
 4693 0242 5A68     		ldr	r2, [r3, #4]
 4694 0244 12F0100F 		tst	r2, #16
 4695 0248 28D0     		beq	.L373
3045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 4696              		.loc 1 3045 0 is_stmt 1
 4697 024a A26B     		ldr	r2, [r4, #56]
 4698 024c 012A     		cmp	r2, #1
 4699 024e 11D0     		beq	.L378
 4700              	.LVL383:
3057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 4701              		.loc 1 3057 0
 4702 0250 1E4A     		ldr	r2, .L381
 4703 0252 9268     		ldr	r2, [r2, #8]
 4704 0254 12F01F0F 		tst	r2, #31
 4705 0258 05D1     		bne	.L375
3059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 4706              		.loc 1 3059 0
 4707 025a DB68     		ldr	r3, [r3, #12]
 4708 025c 13F0010F 		tst	r3, #1
 4709 0260 0AD1     		bne	.L379
2822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error *
ARM GAS  /tmp/cckiGtEU.s 			page 226


 4710              		.loc 1 2822 0
 4711 0262 0023     		movs	r3, #0
 4712 0264 0BE0     		b	.L374
 4713              	.L375:
3067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 4714              		.loc 1 3067 0
 4715 0266 194B     		ldr	r3, .L381
 4716 0268 9B68     		ldr	r3, [r3, #8]
 4717 026a 13F4404F 		tst	r3, #49152
 4718 026e 05D1     		bne	.L380
2822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error *
 4719              		.loc 1 2822 0
 4720 0270 0023     		movs	r3, #0
 4721 0272 04E0     		b	.L374
 4722              	.LVL384:
 4723              	.L378:
3047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       overrun_error = 1U;
 4724              		.loc 1 3047 0
 4725 0274 0123     		movs	r3, #1
 4726 0276 02E0     		b	.L374
 4727              	.LVL385:
 4728              	.L379:
3061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           overrun_error = 1U;  
 4729              		.loc 1 3061 0
 4730 0278 0123     		movs	r3, #1
 4731 027a 00E0     		b	.L374
 4732              	.L380:
3069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           overrun_error = 1U;  
 4733              		.loc 1 3069 0
 4734 027c 0123     		movs	r3, #1
 4735              	.LVL386:
 4736              	.L374:
3074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (overrun_error == 1U)
 4737              		.loc 1 3074 0
 4738 027e 53B1     		cbz	r3, .L376
3077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 4739              		.loc 1 3077 0
 4740 0280 636C     		ldr	r3, [r4, #68]
 4741              	.LVL387:
 4742 0282 43F48063 		orr	r3, r3, #1024
 4743 0286 6364     		str	r3, [r4, #68]
3080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 4744              		.loc 1 3080 0
 4745 0288 A36C     		ldr	r3, [r4, #72]
 4746 028a 43F00203 		orr	r3, r3, #2
 4747 028e A364     		str	r3, [r4, #72]
3083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       HAL_ADC_ErrorCallback(hadc);
 4748              		.loc 1 3083 0
 4749 0290 2046     		mov	r0, r4
 4750 0292 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 4751              	.LVL388:
 4752              	.L376:
3087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 4753              		.loc 1 3087 0
 4754 0296 2368     		ldr	r3, [r4]
 4755 0298 1022     		movs	r2, #16
 4756 029a 1A60     		str	r2, [r3]
ARM GAS  /tmp/cckiGtEU.s 			page 227


 4757              	.L373:
3093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 4758              		.loc 1 3093 0
 4759 029c 2368     		ldr	r3, [r4]
 4760 029e 1A68     		ldr	r2, [r3]
 4761 02a0 12F4806F 		tst	r2, #1024
 4762 02a4 11D0     		beq	.L348
3093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 4763              		.loc 1 3093 0 is_stmt 0 discriminator 1
 4764 02a6 5A68     		ldr	r2, [r3, #4]
 4765 02a8 12F4806F 		tst	r2, #1024
 4766 02ac 0DD0     		beq	.L348
3096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 4767              		.loc 1 3096 0 is_stmt 1
 4768 02ae 626C     		ldr	r2, [r4, #68]
 4769 02b0 42F48042 		orr	r2, r2, #16384
 4770 02b4 6264     		str	r2, [r4, #68]
3099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 4771              		.loc 1 3099 0
 4772 02b6 A26C     		ldr	r2, [r4, #72]
 4773 02b8 42F00802 		orr	r2, r2, #8
 4774 02bc A264     		str	r2, [r4, #72]
3102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 4775              		.loc 1 3102 0
 4776 02be 4FF48062 		mov	r2, #1024
 4777 02c2 1A60     		str	r2, [r3]
3105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 4778              		.loc 1 3105 0
 4779 02c4 2046     		mov	r0, r4
 4780 02c6 FFF7FEFF 		bl	HAL_ADCEx_InjectedQueueOverflowCallback
 4781              	.LVL389:
 4782              	.L348:
 4783 02ca 10BD     		pop	{r4, pc}
 4784              	.LVL390:
 4785              	.L382:
 4786              		.align	2
 4787              	.L381:
 4788 02cc 00030050 		.word	1342178048
 4789              		.cfi_endproc
 4790              	.LFE134:
 4792              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 4793              		.align	2
 4794              		.global	HAL_ADC_ConfigChannel
 4795              		.thumb
 4796              		.thumb_func
 4798              	HAL_ADC_ConfigChannel:
 4799              	.LFB155:
5433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 4800              		.loc 1 5433 0
 4801              		.cfi_startproc
 4802              		@ args = 0, pretend = 0, frame = 88
 4803              		@ frame_needed = 0, uses_anonymous_args = 0
 4804              		@ link register save eliminated.
 4805              	.LVL391:
 4806 0000 30B4     		push	{r4, r5}
 4807              	.LCFI35:
 4808              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cckiGtEU.s 			page 228


 4809              		.cfi_offset 4, -8
 4810              		.cfi_offset 5, -4
 4811 0002 96B0     		sub	sp, sp, #88
 4812              	.LCFI36:
 4813              		.cfi_def_cfa_offset 96
 4814              	.LVL392:
5438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
 4815              		.loc 1 5438 0
 4816 0004 0023     		movs	r3, #0
 4817 0006 0093     		str	r3, [sp]
5462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4818              		.loc 1 5462 0
 4819 0008 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 4820 000c 012B     		cmp	r3, #1
 4821 000e 00F0AC81 		beq	.L420
5462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4822              		.loc 1 5462 0 is_stmt 0 discriminator 2
 4823 0012 0123     		movs	r3, #1
 4824 0014 80F84030 		strb	r3, [r0, #64]
5470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 4825              		.loc 1 5470 0 is_stmt 1 discriminator 2
 4826 0018 0368     		ldr	r3, [r0]
 4827 001a 9A68     		ldr	r2, [r3, #8]
 4828 001c 12F0040F 		tst	r2, #4
 4829 0020 40F09181 		bne	.L385
5474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfig->Rank < 5U)
 4830              		.loc 1 5474 0
 4831 0024 4A68     		ldr	r2, [r1, #4]
 4832 0026 042A     		cmp	r2, #4
 4833 0028 0DD8     		bhi	.L386
5476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR1,
 4834              		.loc 1 5476 0
 4835 002a 1C6B     		ldr	r4, [r3, #48]
 4836 002c 02EB4202 		add	r2, r2, r2, lsl #1
 4837 0030 5200     		lsls	r2, r2, #1
 4838 0032 1F25     		movs	r5, #31
 4839 0034 9540     		lsls	r5, r5, r2
 4840 0036 24EA0505 		bic	r5, r4, r5
 4841 003a 0C68     		ldr	r4, [r1]
 4842 003c 04FA02F2 		lsl	r2, r4, r2
 4843 0040 2A43     		orrs	r2, r2, r5
 4844 0042 1A63     		str	r2, [r3, #48]
 4845 0044 2FE0     		b	.L387
 4846              	.L386:
5481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else if (sConfig->Rank < 10U)
 4847              		.loc 1 5481 0
 4848 0046 092A     		cmp	r2, #9
 4849 0048 0ED8     		bhi	.L388
5483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR2,
 4850              		.loc 1 5483 0
 4851 004a 5C6B     		ldr	r4, [r3, #52]
 4852 004c 02EB4202 		add	r2, r2, r2, lsl #1
 4853 0050 5200     		lsls	r2, r2, #1
 4854 0052 1E3A     		subs	r2, r2, #30
 4855 0054 1F25     		movs	r5, #31
 4856 0056 9540     		lsls	r5, r5, r2
 4857 0058 24EA0505 		bic	r5, r4, r5
ARM GAS  /tmp/cckiGtEU.s 			page 229


 4858 005c 0C68     		ldr	r4, [r1]
 4859 005e 04FA02F2 		lsl	r2, r4, r2
 4860 0062 2A43     		orrs	r2, r2, r5
 4861 0064 5A63     		str	r2, [r3, #52]
 4862 0066 1EE0     		b	.L387
 4863              	.L388:
5488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     else if (sConfig->Rank < 15U)
 4864              		.loc 1 5488 0
 4865 0068 0E2A     		cmp	r2, #14
 4866 006a 0ED8     		bhi	.L389
5490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR3                        ,
 4867              		.loc 1 5490 0
 4868 006c 9C6B     		ldr	r4, [r3, #56]
 4869 006e 02EB4202 		add	r2, r2, r2, lsl #1
 4870 0072 5200     		lsls	r2, r2, #1
 4871 0074 3C3A     		subs	r2, r2, #60
 4872 0076 1F25     		movs	r5, #31
 4873 0078 9540     		lsls	r5, r5, r2
 4874 007a 24EA0505 		bic	r5, r4, r5
 4875 007e 0C68     		ldr	r4, [r1]
 4876 0080 04FA02F2 		lsl	r2, r4, r2
 4877 0084 2A43     		orrs	r2, r2, r5
 4878 0086 9A63     		str	r2, [r3, #56]
 4879 0088 0DE0     		b	.L387
 4880              	.L389:
5497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SQR4                        ,
 4881              		.loc 1 5497 0
 4882 008a DC6B     		ldr	r4, [r3, #60]
 4883 008c 02EB4202 		add	r2, r2, r2, lsl #1
 4884 0090 5200     		lsls	r2, r2, #1
 4885 0092 5A3A     		subs	r2, r2, #90
 4886 0094 1F25     		movs	r5, #31
 4887 0096 9540     		lsls	r5, r5, r2
 4888 0098 24EA0505 		bic	r5, r4, r5
 4889 009c 0C68     		ldr	r4, [r1]
 4890 009e 04FA02F2 		lsl	r2, r4, r2
 4891 00a2 2A43     		orrs	r2, r2, r5
 4892 00a4 DA63     		str	r2, [r3, #60]
 4893              	.L387:
5508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 4894              		.loc 1 5508 0
 4895 00a6 0368     		ldr	r3, [r0]
 4896 00a8 9A68     		ldr	r2, [r3, #8]
 4897 00aa 12F00C0F 		tst	r2, #12
 4898 00ae 40F08880 		bne	.L390
5512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfig->Channel >= ADC_CHANNEL_10)
 4899              		.loc 1 5512 0
 4900 00b2 0A68     		ldr	r2, [r1]
 4901 00b4 092A     		cmp	r2, #9
 4902 00b6 0DD9     		bls	.L391
5514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR2                             ,
 4903              		.loc 1 5514 0
 4904 00b8 9C69     		ldr	r4, [r3, #24]
 4905 00ba 02EB4202 		add	r2, r2, r2, lsl #1
 4906 00be 1E3A     		subs	r2, r2, #30
 4907 00c0 0725     		movs	r5, #7
 4908 00c2 9540     		lsls	r5, r5, r2
ARM GAS  /tmp/cckiGtEU.s 			page 230


 4909 00c4 24EA0505 		bic	r5, r4, r5
 4910 00c8 8C68     		ldr	r4, [r1, #8]
 4911 00ca 04FA02F2 		lsl	r2, r4, r2
 4912 00ce 2A43     		orrs	r2, r2, r5
 4913 00d0 9A61     		str	r2, [r3, #24]
 4914 00d2 0BE0     		b	.L392
 4915              	.L391:
5520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR1                             ,
 4916              		.loc 1 5520 0
 4917 00d4 5C69     		ldr	r4, [r3, #20]
 4918 00d6 02EB4202 		add	r2, r2, r2, lsl #1
 4919 00da 0725     		movs	r5, #7
 4920 00dc 9540     		lsls	r5, r5, r2
 4921 00de 24EA0505 		bic	r5, r4, r5
 4922 00e2 8C68     		ldr	r4, [r1, #8]
 4923 00e4 04FA02F2 		lsl	r2, r4, r2
 4924 00e8 2A43     		orrs	r2, r2, r5
 4925 00ea 5A61     		str	r2, [r3, #20]
 4926              	.L392:
5531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 4927              		.loc 1 5531 0
 4928 00ec 4A69     		ldr	r2, [r1, #20]
 4929 00ee 0368     		ldr	r3, [r0]
 4930 00f0 DC68     		ldr	r4, [r3, #12]
 4931 00f2 C4F3C104 		ubfx	r4, r4, #3, #2
 4932 00f6 6400     		lsls	r4, r4, #1
 4933 00f8 02FA04F4 		lsl	r4, r2, r4
 4934              	.LVL393:
5537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     switch (sConfig->OffsetNumber)
 4935              		.loc 1 5537 0
 4936 00fc 0A69     		ldr	r2, [r1, #16]
 4937 00fe 013A     		subs	r2, r2, #1
 4938 0100 032A     		cmp	r2, #3
 4939 0102 2FD8     		bhi	.L393
 4940 0104 DFE802F0 		tbb	[pc, r2]
 4941              	.L395:
 4942 0108 02       		.byte	(.L394-.L395)/2
 4943 0109 0D       		.byte	(.L396-.L395)/2
 4944 010a 18       		.byte	(.L397-.L395)/2
 4945 010b 23       		.byte	(.L398-.L395)/2
 4946              		.p2align 1
 4947              	.L394:
5541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR1               ,
 4948              		.loc 1 5541 0
 4949 010c 1A6E     		ldr	r2, [r3, #96]
 4950 010e 994D     		ldr	r5, .L431
 4951 0110 1540     		ands	r5, r5, r2
 4952 0112 0A68     		ldr	r2, [r1]
 4953 0114 44EA8262 		orr	r2, r4, r2, lsl #26
 4954 0118 1543     		orrs	r5, r5, r2
 4955 011a 45F00045 		orr	r5, r5, #-2147483648
 4956 011e 1D66     		str	r5, [r3, #96]
5547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 4957              		.loc 1 5547 0
 4958 0120 4FE0     		b	.L390
 4959              	.L396:
5551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR2               ,
ARM GAS  /tmp/cckiGtEU.s 			page 231


 4960              		.loc 1 5551 0
 4961 0122 5A6E     		ldr	r2, [r3, #100]
 4962 0124 934D     		ldr	r5, .L431
 4963 0126 1540     		ands	r5, r5, r2
 4964 0128 0A68     		ldr	r2, [r1]
 4965 012a 44EA8262 		orr	r2, r4, r2, lsl #26
 4966 012e 1543     		orrs	r5, r5, r2
 4967 0130 45F00045 		orr	r5, r5, #-2147483648
 4968 0134 5D66     		str	r5, [r3, #100]
5557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 4969              		.loc 1 5557 0
 4970 0136 44E0     		b	.L390
 4971              	.L397:
5561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR3               ,
 4972              		.loc 1 5561 0
 4973 0138 9A6E     		ldr	r2, [r3, #104]
 4974 013a 8E4D     		ldr	r5, .L431
 4975 013c 1540     		ands	r5, r5, r2
 4976 013e 0A68     		ldr	r2, [r1]
 4977 0140 44EA8262 		orr	r2, r4, r2, lsl #26
 4978 0144 1543     		orrs	r5, r5, r2
 4979 0146 45F00045 		orr	r5, r5, #-2147483648
 4980 014a 9D66     		str	r5, [r3, #104]
5567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 4981              		.loc 1 5567 0
 4982 014c 39E0     		b	.L390
 4983              	.L398:
5571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR4               ,
 4984              		.loc 1 5571 0
 4985 014e DA6E     		ldr	r2, [r3, #108]
 4986 0150 884D     		ldr	r5, .L431
 4987 0152 1540     		ands	r5, r5, r2
 4988 0154 0A68     		ldr	r2, [r1]
 4989 0156 44EA8262 		orr	r2, r4, r2, lsl #26
 4990 015a 1543     		orrs	r5, r5, r2
 4991 015c 45F00045 		orr	r5, r5, #-2147483648
 4992 0160 DD66     		str	r5, [r3, #108]
5577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 4993              		.loc 1 5577 0
 4994 0162 2EE0     		b	.L390
 4995              	.L393:
5583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 4996              		.loc 1 5583 0
 4997 0164 1C6E     		ldr	r4, [r3, #96]
 4998              	.LVL394:
 4999 0166 04F0F844 		and	r4, r4, #2080374784
 5000 016a 0A68     		ldr	r2, [r1]
 5001 016c B4EB826F 		cmp	r4, r2, lsl #26
 5002 0170 03D1     		bne	.L399
5586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 5003              		.loc 1 5586 0
 5004 0172 1A6E     		ldr	r2, [r3, #96]
 5005 0174 22F00042 		bic	r2, r2, #-2147483648
 5006 0178 1A66     		str	r2, [r3, #96]
 5007              	.L399:
5588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 5008              		.loc 1 5588 0
ARM GAS  /tmp/cckiGtEU.s 			page 232


 5009 017a 0368     		ldr	r3, [r0]
 5010 017c 5C6E     		ldr	r4, [r3, #100]
 5011 017e 04F0F844 		and	r4, r4, #2080374784
 5012 0182 0A68     		ldr	r2, [r1]
 5013 0184 B4EB826F 		cmp	r4, r2, lsl #26
 5014 0188 03D1     		bne	.L400
5591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 5015              		.loc 1 5591 0
 5016 018a 5A6E     		ldr	r2, [r3, #100]
 5017 018c 22F00042 		bic	r2, r2, #-2147483648
 5018 0190 5A66     		str	r2, [r3, #100]
 5019              	.L400:
5593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 5020              		.loc 1 5593 0
 5021 0192 0368     		ldr	r3, [r0]
 5022 0194 9C6E     		ldr	r4, [r3, #104]
 5023 0196 04F0F844 		and	r4, r4, #2080374784
 5024 019a 0A68     		ldr	r2, [r1]
 5025 019c B4EB826F 		cmp	r4, r2, lsl #26
 5026 01a0 03D1     		bne	.L401
5596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 5027              		.loc 1 5596 0
 5028 01a2 9A6E     		ldr	r2, [r3, #104]
 5029 01a4 22F00042 		bic	r2, r2, #-2147483648
 5030 01a8 9A66     		str	r2, [r3, #104]
 5031              	.L401:
5598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 5032              		.loc 1 5598 0
 5033 01aa 0368     		ldr	r3, [r0]
 5034 01ac DC6E     		ldr	r4, [r3, #108]
 5035 01ae 04F0F844 		and	r4, r4, #2080374784
 5036 01b2 0A68     		ldr	r2, [r1]
 5037 01b4 B4EB826F 		cmp	r4, r2, lsl #26
 5038 01b8 03D1     		bne	.L390
5601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 5039              		.loc 1 5601 0
 5040 01ba DA6E     		ldr	r2, [r3, #108]
 5041 01bc 22F00042 		bic	r2, r2, #-2147483648
 5042 01c0 DA66     		str	r2, [r3, #108]
 5043              	.L390:
5613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5044              		.loc 1 5613 0
 5045 01c2 0368     		ldr	r3, [r0]
 5046 01c4 9A68     		ldr	r2, [r3, #8]
 5047 01c6 02F00302 		and	r2, r2, #3
 5048 01ca 012A     		cmp	r2, #1
 5049 01cc 05D1     		bne	.L421
5613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5050              		.loc 1 5613 0 is_stmt 0 discriminator 1
 5051 01ce 1A68     		ldr	r2, [r3]
 5052 01d0 12F0010F 		tst	r2, #1
 5053 01d4 03D1     		bne	.L422
5613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5054              		.loc 1 5613 0
 5055 01d6 0022     		movs	r2, #0
 5056 01d8 02E0     		b	.L402
 5057              	.L421:
ARM GAS  /tmp/cckiGtEU.s 			page 233


 5058 01da 0022     		movs	r2, #0
 5059 01dc 00E0     		b	.L402
 5060              	.L422:
 5061 01de 0122     		movs	r2, #1
 5062              	.L402:
5613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5063              		.loc 1 5613 0 discriminator 4
 5064 01e0 002A     		cmp	r2, #0
 5065 01e2 40F0B680 		bne	.L423
5616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 5066              		.loc 1 5616 0 is_stmt 1
 5067 01e6 CA68     		ldr	r2, [r1, #12]
 5068 01e8 012A     		cmp	r2, #1
 5069 01ea 0AD0     		beq	.L404
5619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 5070              		.loc 1 5619 0
 5071 01ec D3F8B040 		ldr	r4, [r3, #176]
 5072 01f0 0A68     		ldr	r2, [r1]
 5073 01f2 0125     		movs	r5, #1
 5074 01f4 05FA02F2 		lsl	r2, r5, r2
 5075 01f8 24EA0202 		bic	r2, r4, r2
 5076 01fc C3F8B020 		str	r2, [r3, #176]
 5077 0200 28E0     		b	.L405
 5078              	.L404:
5624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 5079              		.loc 1 5624 0
 5080 0202 D3F8B040 		ldr	r4, [r3, #176]
 5081 0206 0A68     		ldr	r2, [r1]
 5082 0208 0125     		movs	r5, #1
 5083 020a 05FA02F2 		lsl	r2, r5, r2
 5084 020e 2243     		orrs	r2, r2, r4
 5085 0210 C3F8B020 		str	r2, [r3, #176]
5629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfig->Channel >= ADC_CHANNEL_10)
 5086              		.loc 1 5629 0
 5087 0214 0B68     		ldr	r3, [r1]
 5088 0216 092B     		cmp	r3, #9
 5089 0218 0ED9     		bls	.L406
5631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR2,
 5090              		.loc 1 5631 0
 5091 021a 0268     		ldr	r2, [r0]
 5092 021c 9469     		ldr	r4, [r2, #24]
 5093 021e 03EB4303 		add	r3, r3, r3, lsl #1
 5094 0222 1B3B     		subs	r3, r3, #27
 5095 0224 0725     		movs	r5, #7
 5096 0226 9D40     		lsls	r5, r5, r3
 5097 0228 24EA0505 		bic	r5, r4, r5
 5098 022c 8C68     		ldr	r4, [r1, #8]
 5099 022e 04FA03F3 		lsl	r3, r4, r3
 5100 0232 2B43     		orrs	r3, r3, r5
 5101 0234 9361     		str	r3, [r2, #24]
 5102 0236 0DE0     		b	.L405
 5103              	.L406:
5637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR1,
 5104              		.loc 1 5637 0
 5105 0238 0268     		ldr	r2, [r0]
 5106 023a 5469     		ldr	r4, [r2, #20]
 5107 023c 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cckiGtEU.s 			page 234


 5108 023e 03EB4303 		add	r3, r3, r3, lsl #1
 5109 0242 0725     		movs	r5, #7
 5110 0244 9D40     		lsls	r5, r5, r3
 5111 0246 24EA0505 		bic	r5, r4, r5
 5112 024a 8C68     		ldr	r4, [r1, #8]
 5113 024c 04FA03F3 		lsl	r3, r4, r3
 5114 0250 2B43     		orrs	r3, r3, r5
 5115 0252 5361     		str	r3, [r2, #20]
 5116              	.L405:
 5117              	.LVL395:
5658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 5118              		.loc 1 5658 0
 5119 0254 0B68     		ldr	r3, [r1]
 5120 0256 102B     		cmp	r3, #16
 5121 0258 04D1     		bne	.L407
5659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 5122              		.loc 1 5659 0 discriminator 1
 5123 025a 474A     		ldr	r2, .L431+4
 5124 025c 9268     		ldr	r2, [r2, #8]
5658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 5125              		.loc 1 5658 0 discriminator 1
 5126 025e 12F4000F 		tst	r2, #8388608
 5127 0262 0DD0     		beq	.L408
 5128              	.L407:
5659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 5129              		.loc 1 5659 0
 5130 0264 112B     		cmp	r3, #17
 5131 0266 04D1     		bne	.L409
5661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 5132              		.loc 1 5661 0
 5133 0268 434A     		ldr	r2, .L431+4
 5134 026a 9268     		ldr	r2, [r2, #8]
5660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 5135              		.loc 1 5660 0
 5136 026c 12F0807F 		tst	r2, #16777216
 5137 0270 06D0     		beq	.L408
 5138              	.L409:
5661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 5139              		.loc 1 5661 0
 5140 0272 122B     		cmp	r3, #18
 5141 0274 6FD1     		bne	.L424
5663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 5142              		.loc 1 5663 0
 5143 0276 404A     		ldr	r2, .L431+4
 5144 0278 9268     		ldr	r2, [r2, #8]
5662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 5145              		.loc 1 5662 0
 5146 027a 12F4800F 		tst	r2, #4194304
 5147 027e 6CD1     		bne	.L425
 5148              	.L408:
5668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 5149              		.loc 1 5668 0
 5150 0280 0268     		ldr	r2, [r0]
 5151 0282 B2F1A04F 		cmp	r2, #1342177280
 5152 0286 02D1     		bne	.L410
5668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 5153              		.loc 1 5668 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cckiGtEU.s 			page 235


 5154 0288 3C49     		ldr	r1, .L431+8
 5155              	.LVL396:
 5156 028a 0191     		str	r1, [sp, #4]
 5157 028c 02E0     		b	.L411
 5158              	.LVL397:
 5159              	.L410:
5668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 5160              		.loc 1 5668 0 discriminator 2
 5161 028e 4FF0A041 		mov	r1, #1342177280
 5162              	.LVL398:
 5163 0292 0191     		str	r1, [sp, #4]
 5164              	.L411:
5672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5165              		.loc 1 5672 0 is_stmt 1
 5166 0294 9168     		ldr	r1, [r2, #8]
 5167 0296 01F00301 		and	r1, r1, #3
 5168 029a 0129     		cmp	r1, #1
 5169 029c 05D1     		bne	.L426
5672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5170              		.loc 1 5672 0 is_stmt 0 discriminator 1
 5171 029e 1168     		ldr	r1, [r2]
 5172 02a0 11F0010F 		tst	r1, #1
 5173 02a4 03D1     		bne	.L427
5672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5174              		.loc 1 5672 0
 5175 02a6 0021     		movs	r1, #0
 5176 02a8 02E0     		b	.L412
 5177              	.L426:
 5178 02aa 0021     		movs	r1, #0
 5179 02ac 00E0     		b	.L412
 5180              	.L427:
 5181 02ae 0121     		movs	r1, #1
 5182              	.L412:
5672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5183              		.loc 1 5672 0 discriminator 4
 5184 02b0 0029     		cmp	r1, #0
 5185 02b2 42D1     		bne	.L413
5673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 5186              		.loc 1 5673 0 is_stmt 1 discriminator 1
 5187 02b4 0199     		ldr	r1, [sp, #4]
5672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5188              		.loc 1 5672 0 discriminator 1
 5189 02b6 79B1     		cbz	r1, .L414
5674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 5190              		.loc 1 5674 0
 5191 02b8 8C68     		ldr	r4, [r1, #8]
 5192 02ba 04F00304 		and	r4, r4, #3
 5193 02be 012C     		cmp	r4, #1
 5194 02c0 05D1     		bne	.L428
5674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 5195              		.loc 1 5674 0 is_stmt 0 discriminator 1
 5196 02c2 0968     		ldr	r1, [r1]
 5197 02c4 11F0010F 		tst	r1, #1
 5198 02c8 03D1     		bne	.L429
5674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 5199              		.loc 1 5674 0
 5200 02ca 0021     		movs	r1, #0
ARM GAS  /tmp/cckiGtEU.s 			page 236


 5201 02cc 02E0     		b	.L415
 5202              	.L428:
 5203 02ce 0021     		movs	r1, #0
 5204 02d0 00E0     		b	.L415
 5205              	.L429:
 5206 02d2 0121     		movs	r1, #1
 5207              	.L415:
5673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 5208              		.loc 1 5673 0 is_stmt 1
 5209 02d4 0029     		cmp	r1, #0
 5210 02d6 30D1     		bne	.L413
 5211              	.L414:
5678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 5212              		.loc 1 5678 0
 5213 02d8 102B     		cmp	r3, #16
 5214 02da 19D1     		bne	.L416
5678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 5215              		.loc 1 5678 0 is_stmt 0 discriminator 1
 5216 02dc B2F1A04F 		cmp	r2, #1342177280
 5217 02e0 16D1     		bne	.L416
5680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 5218              		.loc 1 5680 0 is_stmt 1
 5219 02e2 254B     		ldr	r3, .L431+4
 5220 02e4 9A68     		ldr	r2, [r3, #8]
 5221 02e6 42F40002 		orr	r2, r2, #8388608
 5222 02ea 9A60     		str	r2, [r3, #8]
5684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 5223              		.loc 1 5684 0
 5224 02ec 244B     		ldr	r3, .L431+12
 5225 02ee 1A68     		ldr	r2, [r3]
 5226 02f0 244B     		ldr	r3, .L431+16
 5227 02f2 B2FBF3F3 		udiv	r3, r2, r3
 5228 02f6 0A22     		movs	r2, #10
 5229 02f8 02FB03F3 		mul	r3, r2, r3
 5230 02fc 0093     		str	r3, [sp]
5685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 5231              		.loc 1 5685 0
 5232 02fe 02E0     		b	.L417
 5233              	.L418:
5687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             wait_loop_index--;
 5234              		.loc 1 5687 0
 5235 0300 009B     		ldr	r3, [sp]
 5236 0302 013B     		subs	r3, r3, #1
 5237 0304 0093     		str	r3, [sp]
 5238              	.L417:
5685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 5239              		.loc 1 5685 0 discriminator 1
 5240 0306 009B     		ldr	r3, [sp]
 5241 0308 002B     		cmp	r3, #0
 5242 030a F9D1     		bne	.L418
5434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5243              		.loc 1 5434 0
 5244 030c 0022     		movs	r2, #0
 5245 030e 27E0     		b	.L403
 5246              	.L416:
5692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 5247              		.loc 1 5692 0
ARM GAS  /tmp/cckiGtEU.s 			page 237


 5248 0310 112B     		cmp	r3, #17
 5249 0312 09D1     		bne	.L419
5692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 5250              		.loc 1 5692 0 is_stmt 0 discriminator 1
 5251 0314 B2F1A04F 		cmp	r2, #1342177280
 5252 0318 06D1     		bne	.L419
5694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 5253              		.loc 1 5694 0 is_stmt 1
 5254 031a 174B     		ldr	r3, .L431+4
 5255 031c 9A68     		ldr	r2, [r3, #8]
 5256 031e 42F08072 		orr	r2, r2, #16777216
 5257 0322 9A60     		str	r2, [r3, #8]
5434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5258              		.loc 1 5434 0
 5259 0324 0022     		movs	r2, #0
5694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 5260              		.loc 1 5694 0
 5261 0326 1BE0     		b	.L403
 5262              	.L419:
5700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 5263              		.loc 1 5700 0
 5264 0328 122B     		cmp	r3, #18
 5265 032a 18D1     		bne	.L430
5702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 5266              		.loc 1 5702 0
 5267 032c 124B     		ldr	r3, .L431+4
 5268 032e 9A68     		ldr	r2, [r3, #8]
 5269 0330 42F48002 		orr	r2, r2, #4194304
 5270 0334 9A60     		str	r2, [r3, #8]
5434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5271              		.loc 1 5434 0
 5272 0336 0022     		movs	r2, #0
 5273 0338 12E0     		b	.L403
 5274              	.L413:
5711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5275              		.loc 1 5711 0
 5276 033a 436C     		ldr	r3, [r0, #68]
 5277 033c 43F02003 		orr	r3, r3, #32
 5278 0340 4364     		str	r3, [r0, #68]
 5279              	.LVL399:
5713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 5280              		.loc 1 5713 0
 5281 0342 0122     		movs	r2, #1
 5282 0344 0CE0     		b	.L403
 5283              	.LVL400:
 5284              	.L385:
5726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5285              		.loc 1 5726 0
 5286 0346 436C     		ldr	r3, [r0, #68]
 5287 0348 43F02003 		orr	r3, r3, #32
 5288 034c 4364     		str	r3, [r0, #68]
 5289              	.LVL401:
5728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 5290              		.loc 1 5728 0
 5291 034e 0122     		movs	r2, #1
 5292 0350 06E0     		b	.L403
 5293              	.LVL402:
ARM GAS  /tmp/cckiGtEU.s 			page 238


 5294              	.L423:
5434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5295              		.loc 1 5434 0
 5296 0352 0022     		movs	r2, #0
 5297 0354 04E0     		b	.L403
 5298              	.LVL403:
 5299              	.L424:
 5300 0356 0022     		movs	r2, #0
 5301 0358 02E0     		b	.L403
 5302              	.L425:
 5303 035a 0022     		movs	r2, #0
 5304 035c 00E0     		b	.L403
 5305              	.LVL404:
 5306              	.L430:
 5307 035e 0022     		movs	r2, #0
 5308              	.LVL405:
 5309              	.L403:
5732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 5310              		.loc 1 5732 0
 5311 0360 0023     		movs	r3, #0
 5312 0362 80F84030 		strb	r3, [r0, #64]
5735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 5313              		.loc 1 5735 0
 5314 0366 1046     		mov	r0, r2
 5315              	.LVL406:
 5316 0368 00E0     		b	.L384
 5317              	.LVL407:
 5318              	.L420:
5462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5319              		.loc 1 5462 0
 5320 036a 0220     		movs	r0, #2
 5321              	.LVL408:
 5322              	.L384:
5736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 5323              		.loc 1 5736 0
 5324 036c 16B0     		add	sp, sp, #88
 5325              		@ sp needed
 5326 036e 30BC     		pop	{r4, r5}
 5327 0370 7047     		bx	lr
 5328              	.L432:
 5329 0372 00BF     		.align	2
 5330              	.L431:
 5331 0374 00F0FF83 		.word	-2080378880
 5332 0378 00030050 		.word	1342178048
 5333 037c 00010050 		.word	1342177536
 5334 0380 00000000 		.word	SystemCoreClock
 5335 0384 40420F00 		.word	1000000
 5336              		.cfi_endproc
 5337              	.LFE155:
 5339              		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 5340              		.align	2
 5341              		.global	HAL_ADCEx_InjectedConfigChannel
 5342              		.thumb
 5343              		.thumb_func
 5345              	HAL_ADCEx_InjectedConfigChannel:
 5346              	.LFB156:
5899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
ARM GAS  /tmp/cckiGtEU.s 			page 239


 5347              		.loc 1 5899 0
 5348              		.cfi_startproc
 5349              		@ args = 0, pretend = 0, frame = 88
 5350              		@ frame_needed = 0, uses_anonymous_args = 0
 5351              		@ link register save eliminated.
 5352              	.LVL409:
 5353 0000 70B4     		push	{r4, r5, r6}
 5354              	.LCFI37:
 5355              		.cfi_def_cfa_offset 12
 5356              		.cfi_offset 4, -12
 5357              		.cfi_offset 5, -8
 5358              		.cfi_offset 6, -4
 5359 0002 97B0     		sub	sp, sp, #92
 5360              	.LCFI38:
 5361              		.cfi_def_cfa_offset 104
 5362              	.LVL410:
5904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0U;
 5363              		.loc 1 5904 0
 5364 0004 0023     		movs	r3, #0
 5365 0006 0093     		str	r3, [sp]
 5366              	.LVL411:
5941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5367              		.loc 1 5941 0
 5368 0008 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 5369 000c 012B     		cmp	r3, #1
 5370 000e 00F0EB81 		beq	.L477
5941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5371              		.loc 1 5941 0 is_stmt 0 discriminator 2
 5372 0012 0123     		movs	r3, #1
 5373 0014 80F84030 		strb	r3, [r0, #64]
5964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 5374              		.loc 1 5964 0 is_stmt 1 discriminator 2
 5375 0018 0369     		ldr	r3, [r0, #16]
 5376 001a 13B1     		cbz	r3, .L435
5965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 5377              		.loc 1 5965 0 discriminator 1
 5378 001c 8B69     		ldr	r3, [r1, #24]
5964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 5379              		.loc 1 5964 0 discriminator 1
 5380 001e 012B     		cmp	r3, #1
 5381 0020 22D1     		bne	.L436
 5382              	.L435:
5974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 5383              		.loc 1 5974 0
 5384 0022 4B68     		ldr	r3, [r1, #4]
 5385 0024 012B     		cmp	r3, #1
 5386 0026 19D1     		bne	.L437
5981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 5387              		.loc 1 5981 0
 5388 0028 8B6A     		ldr	r3, [r1, #40]
 5389 002a 012B     		cmp	r3, #1
 5390 002c 05D0     		beq	.L438
5983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_
 5391              		.loc 1 5983 0
 5392 002e 0A68     		ldr	r2, [r1]
 5393 0030 43EA0223 		orr	r3, r3, r2, lsl #8
 5394 0034 CA6A     		ldr	r2, [r1, #44]
ARM GAS  /tmp/cckiGtEU.s 			page 240


 5395 0036 1343     		orrs	r3, r3, r2
 5396              	.LVL412:
 5397 0038 01E0     		b	.L439
 5398              	.LVL413:
 5399              	.L438:
5989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_
 5400              		.loc 1 5989 0
 5401 003a 0B68     		ldr	r3, [r1]
 5402 003c 1B02     		lsls	r3, r3, #8
 5403              	.LVL414:
 5404              	.L439:
5993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR           ,
 5405              		.loc 1 5993 0 discriminator 1
 5406 003e 0268     		ldr	r2, [r0]
 5407 0040 D46C     		ldr	r4, [r2, #76]
 5408 0042 24F0FB44 		bic	r4, r4, #2105540608
 5409 0046 24F4EF04 		bic	r4, r4, #7831552
 5410 004a 24F4BF44 		bic	r4, r4, #24448
 5411 004e 24F07F04 		bic	r4, r4, #127
 5412 0052 1C43     		orrs	r4, r4, r3
 5413 0054 D464     		str	r4, [r2, #76]
6004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 5414              		.loc 1 6004 0 discriminator 1
 5415 0056 C364     		str	r3, [r0, #76]
5900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5416              		.loc 1 5900 0 discriminator 1
 5417 0058 0022     		movs	r2, #0
 5418 005a 39E0     		b	.L440
 5419              	.LVL415:
 5420              	.L437:
6011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5421              		.loc 1 6011 0
 5422 005c 436C     		ldr	r3, [r0, #68]
 5423 005e 43F02003 		orr	r3, r3, #32
 5424 0062 4364     		str	r3, [r0, #68]
 5425              	.LVL416:
6013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 5426              		.loc 1 6013 0
 5427 0064 0122     		movs	r2, #1
 5428 0066 33E0     		b	.L440
 5429              	.LVL417:
 5430              	.L436:
6026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
 5431              		.loc 1 6026 0
 5432 0068 026D     		ldr	r2, [r0, #80]
 5433 006a 7AB9     		cbnz	r2, .L441
6030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 5434              		.loc 1 6030 0
 5435 006c 0365     		str	r3, [r0, #80]
6032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0x00000000U;
 5436              		.loc 1 6032 0
 5437 006e 0023     		movs	r3, #0
 5438 0070 C364     		str	r3, [r0, #76]
6044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 5439              		.loc 1 6044 0
 5440 0072 8B6A     		ldr	r3, [r1, #40]
 5441 0074 012B     		cmp	r3, #1
ARM GAS  /tmp/cckiGtEU.s 			page 241


 5442 0076 06D0     		beq	.L442
6046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)
 5443              		.loc 1 6046 0
 5444 0078 8A69     		ldr	r2, [r1, #24]
 5445 007a 013A     		subs	r2, r2, #1
 5446 007c 1343     		orrs	r3, r3, r2
 5447 007e CA6A     		ldr	r2, [r1, #44]
 5448 0080 1A43     		orrs	r2, r2, r3
 5449 0082 C264     		str	r2, [r0, #76]
 5450 0084 02E0     		b	.L441
 5451              	.L442:
6052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)
 5452              		.loc 1 6052 0
 5453 0086 8B69     		ldr	r3, [r1, #24]
 5454 0088 013B     		subs	r3, r3, #1
 5455 008a C364     		str	r3, [r0, #76]
 5456              	.L441:
6061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 5457              		.loc 1 6061 0
 5458 008c C26C     		ldr	r2, [r0, #76]
 5459 008e 4B68     		ldr	r3, [r1, #4]
 5460 0090 03EB4303 		add	r3, r3, r3, lsl #1
 5461 0094 5B00     		lsls	r3, r3, #1
 5462 0096 0233     		adds	r3, r3, #2
 5463 0098 1F24     		movs	r4, #31
 5464 009a 9C40     		lsls	r4, r4, r3
 5465 009c 22EA0404 		bic	r4, r2, r4
 5466 00a0 0A68     		ldr	r2, [r1]
 5467 00a2 02FA03F3 		lsl	r3, r2, r3
 5468 00a6 2343     		orrs	r3, r3, r4
 5469 00a8 C364     		str	r3, [r0, #76]
6066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount --;
 5470              		.loc 1 6066 0
 5471 00aa 026D     		ldr	r2, [r0, #80]
 5472 00ac 013A     		subs	r2, r2, #1
 5473 00ae 0265     		str	r2, [r0, #80]
6070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (hadc->InjectionConfig.ChannelCount == 0U)
 5474              		.loc 1 6070 0
 5475 00b0 6AB9     		cbnz	r2, .L478
6073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->JSQR              ,
 5476              		.loc 1 6073 0
 5477 00b2 0268     		ldr	r2, [r0]
 5478 00b4 D46C     		ldr	r4, [r2, #76]
 5479 00b6 24F0FB44 		bic	r4, r4, #2105540608
 5480 00ba 24F4EF04 		bic	r4, r4, #7831552
 5481 00be 24F4BF44 		bic	r4, r4, #24448
 5482 00c2 24F07F04 		bic	r4, r4, #127
 5483 00c6 2343     		orrs	r3, r3, r4
 5484 00c8 D364     		str	r3, [r2, #76]
5900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5485              		.loc 1 5900 0
 5486 00ca 0022     		movs	r2, #0
 5487 00cc 00E0     		b	.L440
 5488              	.L478:
 5489 00ce 0022     		movs	r2, #0
 5490              	.LVL418:
 5491              	.L440:
ARM GAS  /tmp/cckiGtEU.s 			page 242


6094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 5492              		.loc 1 6094 0
 5493 00d0 0368     		ldr	r3, [r0]
 5494 00d2 9C68     		ldr	r4, [r3, #8]
 5495 00d4 14F0080F 		tst	r4, #8
 5496 00d8 1BD1     		bne	.L443
6097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == DISABLE)
 5497              		.loc 1 6097 0
 5498 00da 0C6A     		ldr	r4, [r1, #32]
 5499 00dc 54B9     		cbnz	r4, .L444
6099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                                                            ,
 5500              		.loc 1 6099 0
 5501 00de DE68     		ldr	r6, [r3, #12]
 5502 00e0 26F44016 		bic	r6, r6, #3145728
 5503 00e4 4C6A     		ldr	r4, [r1, #36]
 5504 00e6 CD69     		ldr	r5, [r1, #28]
 5505 00e8 2D05     		lsls	r5, r5, #20
 5506 00ea 45EA4454 		orr	r4, r5, r4, lsl #21
 5507 00ee 3443     		orrs	r4, r4, r6
 5508 00f0 DC60     		str	r4, [r3, #12]
 5509 00f2 0EE0     		b	.L443
 5510              	.L444:
6109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                                                ,
 5511              		.loc 1 6109 0
 5512 00f4 DD68     		ldr	r5, [r3, #12]
 5513 00f6 25F44015 		bic	r5, r5, #3145728
 5514 00fa 4C6A     		ldr	r4, [r1, #36]
 5515 00fc 45EA4454 		orr	r4, r5, r4, lsl #21
 5516 0100 DC60     		str	r4, [r3, #12]
6116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 5517              		.loc 1 6116 0
 5518 0102 CB69     		ldr	r3, [r1, #28]
 5519 0104 012B     		cmp	r3, #1
 5520 0106 04D1     		bne	.L443
6119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5521              		.loc 1 6119 0
 5522 0108 436C     		ldr	r3, [r0, #68]
 5523 010a 43F02003 		orr	r3, r3, #32
 5524 010e 4364     		str	r3, [r0, #68]
 5525              	.LVL419:
6121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 5526              		.loc 1 6121 0
 5527 0110 0122     		movs	r2, #1
 5528              	.LVL420:
 5529              	.L443:
6135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 5530              		.loc 1 6135 0
 5531 0112 0368     		ldr	r3, [r0]
 5532 0114 9C68     		ldr	r4, [r3, #8]
 5533 0116 14F00C0F 		tst	r4, #12
 5534 011a 40F0A180 		bne	.L445
6139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 5535              		.loc 1 6139 0
 5536 011e 8C6A     		ldr	r4, [r1, #40]
 5537 0120 012C     		cmp	r4, #1
 5538 0122 07D1     		bne	.L446
6141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                                              ,
ARM GAS  /tmp/cckiGtEU.s 			page 243


 5539              		.loc 1 6141 0
 5540 0124 DD68     		ldr	r5, [r3, #12]
 5541 0126 25F00075 		bic	r5, r5, #33554432
 5542 012a 0C6A     		ldr	r4, [r1, #32]
 5543 012c 45EA4464 		orr	r4, r5, r4, lsl #25
 5544 0130 DC60     		str	r4, [r3, #12]
 5545 0132 0BE0     		b	.L447
 5546              	.L446:
6150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 5547              		.loc 1 6150 0
 5548 0134 DC68     		ldr	r4, [r3, #12]
 5549 0136 24F00074 		bic	r4, r4, #33554432
 5550 013a DC60     		str	r4, [r3, #12]
6152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
 5551              		.loc 1 6152 0
 5552 013c 0B6A     		ldr	r3, [r1, #32]
 5553 013e 012B     		cmp	r3, #1
 5554 0140 04D1     		bne	.L447
6155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5555              		.loc 1 6155 0
 5556 0142 436C     		ldr	r3, [r0, #68]
 5557 0144 43F02003 		orr	r3, r3, #32
 5558 0148 4364     		str	r3, [r0, #68]
 5559              	.LVL421:
6157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 5560              		.loc 1 6157 0
 5561 014a 0122     		movs	r2, #1
 5562              	.LVL422:
 5563              	.L447:
6164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 5564              		.loc 1 6164 0
 5565 014c 0B68     		ldr	r3, [r1]
 5566 014e 092B     		cmp	r3, #9
 5567 0150 0ED9     		bls	.L448
6166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR2                                                             
 5568              		.loc 1 6166 0
 5569 0152 0468     		ldr	r4, [r0]
 5570 0154 A569     		ldr	r5, [r4, #24]
 5571 0156 03EB4303 		add	r3, r3, r3, lsl #1
 5572 015a 1E3B     		subs	r3, r3, #30
 5573 015c 0726     		movs	r6, #7
 5574 015e 9E40     		lsls	r6, r6, r3
 5575 0160 25EA0606 		bic	r6, r5, r6
 5576 0164 8D68     		ldr	r5, [r1, #8]
 5577 0166 05FA03F3 		lsl	r3, r5, r3
 5578 016a 3343     		orrs	r3, r3, r6
 5579 016c A361     		str	r3, [r4, #24]
 5580 016e 0CE0     		b	.L449
 5581              	.L448:
6172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->SMPR1                                                             
 5582              		.loc 1 6172 0
 5583 0170 0468     		ldr	r4, [r0]
 5584 0172 6569     		ldr	r5, [r4, #20]
 5585 0174 03EB4303 		add	r3, r3, r3, lsl #1
 5586 0178 0726     		movs	r6, #7
 5587 017a 9E40     		lsls	r6, r6, r3
 5588 017c 25EA0606 		bic	r6, r5, r6
ARM GAS  /tmp/cckiGtEU.s 			page 244


 5589 0180 8D68     		ldr	r5, [r1, #8]
 5590 0182 05FA03F3 		lsl	r3, r5, r3
 5591 0186 3343     		orrs	r3, r3, r6
 5592 0188 6361     		str	r3, [r4, #20]
 5593              	.L449:
6182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 5594              		.loc 1 6182 0
 5595 018a 4C69     		ldr	r4, [r1, #20]
 5596 018c 0368     		ldr	r3, [r0]
 5597 018e DD68     		ldr	r5, [r3, #12]
 5598 0190 C5F3C105 		ubfx	r5, r5, #3, #2
 5599 0194 6D00     		lsls	r5, r5, #1
 5600 0196 04FA05F5 		lsl	r5, r4, r5
 5601              	.LVL423:
6188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     switch (sConfigInjected->InjectedOffsetNumber)
 5602              		.loc 1 6188 0
 5603 019a 0C69     		ldr	r4, [r1, #16]
 5604 019c 013C     		subs	r4, r4, #1
 5605 019e 032C     		cmp	r4, #3
 5606 01a0 2FD8     		bhi	.L450
 5607 01a2 DFE804F0 		tbb	[pc, r4]
 5608              	.L452:
 5609 01a6 02       		.byte	(.L451-.L452)/2
 5610 01a7 0D       		.byte	(.L453-.L452)/2
 5611 01a8 18       		.byte	(.L454-.L452)/2
 5612 01a9 23       		.byte	(.L455-.L452)/2
 5613              		.p2align 1
 5614              	.L451:
6192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR1                               ,
 5615              		.loc 1 6192 0
 5616 01aa 1C6E     		ldr	r4, [r3, #96]
 5617 01ac 904E     		ldr	r6, .L485
 5618 01ae 2640     		ands	r6, r6, r4
 5619 01b0 0C68     		ldr	r4, [r1]
 5620 01b2 45EA8464 		orr	r4, r5, r4, lsl #26
 5621 01b6 2643     		orrs	r6, r6, r4
 5622 01b8 46F00046 		orr	r6, r6, #-2147483648
 5623 01bc 1E66     		str	r6, [r3, #96]
6198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 5624              		.loc 1 6198 0
 5625 01be 4FE0     		b	.L445
 5626              	.L453:
6202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR2                               ,
 5627              		.loc 1 6202 0
 5628 01c0 5C6E     		ldr	r4, [r3, #100]
 5629 01c2 8B4E     		ldr	r6, .L485
 5630 01c4 2640     		ands	r6, r6, r4
 5631 01c6 0C68     		ldr	r4, [r1]
 5632 01c8 45EA8464 		orr	r4, r5, r4, lsl #26
 5633 01cc 2643     		orrs	r6, r6, r4
 5634 01ce 46F00046 		orr	r6, r6, #-2147483648
 5635 01d2 5E66     		str	r6, [r3, #100]
6208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 5636              		.loc 1 6208 0
 5637 01d4 44E0     		b	.L445
 5638              	.L454:
6212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR3                               ,
ARM GAS  /tmp/cckiGtEU.s 			page 245


 5639              		.loc 1 6212 0
 5640 01d6 9C6E     		ldr	r4, [r3, #104]
 5641 01d8 854E     		ldr	r6, .L485
 5642 01da 2640     		ands	r6, r6, r4
 5643 01dc 0C68     		ldr	r4, [r1]
 5644 01de 45EA8464 		orr	r4, r5, r4, lsl #26
 5645 01e2 2643     		orrs	r6, r6, r4
 5646 01e4 46F00046 		orr	r6, r6, #-2147483648
 5647 01e8 9E66     		str	r6, [r3, #104]
6218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 5648              		.loc 1 6218 0
 5649 01ea 39E0     		b	.L445
 5650              	.L455:
6222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->OFR4                               ,
 5651              		.loc 1 6222 0
 5652 01ec DC6E     		ldr	r4, [r3, #108]
 5653 01ee 804E     		ldr	r6, .L485
 5654 01f0 2640     		ands	r6, r6, r4
 5655 01f2 0C68     		ldr	r4, [r1]
 5656 01f4 45EA8464 		orr	r4, r5, r4, lsl #26
 5657 01f8 2643     		orrs	r6, r6, r4
 5658 01fa 46F00046 		orr	r6, r6, #-2147483648
 5659 01fe DE66     		str	r6, [r3, #108]
6228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       break;
 5660              		.loc 1 6228 0
 5661 0200 2EE0     		b	.L445
 5662              	.L450:
6234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
 5663              		.loc 1 6234 0
 5664 0202 1D6E     		ldr	r5, [r3, #96]
 5665              	.LVL424:
 5666 0204 05F0F845 		and	r5, r5, #2080374784
 5667 0208 0C68     		ldr	r4, [r1]
 5668 020a B5EB846F 		cmp	r5, r4, lsl #26
 5669 020e 03D1     		bne	.L456
6237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 5670              		.loc 1 6237 0
 5671 0210 1C6E     		ldr	r4, [r3, #96]
 5672 0212 24F00044 		bic	r4, r4, #-2147483648
 5673 0216 1C66     		str	r4, [r3, #96]
 5674              	.L456:
6239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
 5675              		.loc 1 6239 0
 5676 0218 0368     		ldr	r3, [r0]
 5677 021a 5D6E     		ldr	r5, [r3, #100]
 5678 021c 05F0F845 		and	r5, r5, #2080374784
 5679 0220 0C68     		ldr	r4, [r1]
 5680 0222 B5EB846F 		cmp	r5, r4, lsl #26
 5681 0226 03D1     		bne	.L457
6242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 5682              		.loc 1 6242 0
 5683 0228 5C6E     		ldr	r4, [r3, #100]
 5684 022a 24F00044 		bic	r4, r4, #-2147483648
 5685 022e 5C66     		str	r4, [r3, #100]
 5686              	.L457:
6244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
 5687              		.loc 1 6244 0
ARM GAS  /tmp/cckiGtEU.s 			page 246


 5688 0230 0368     		ldr	r3, [r0]
 5689 0232 9D6E     		ldr	r5, [r3, #104]
 5690 0234 05F0F845 		and	r5, r5, #2080374784
 5691 0238 0C68     		ldr	r4, [r1]
 5692 023a B5EB846F 		cmp	r5, r4, lsl #26
 5693 023e 03D1     		bne	.L458
6247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 5694              		.loc 1 6247 0
 5695 0240 9C6E     		ldr	r4, [r3, #104]
 5696 0242 24F00044 		bic	r4, r4, #-2147483648
 5697 0246 9C66     		str	r4, [r3, #104]
 5698              	.L458:
6249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->Inject
 5699              		.loc 1 6249 0
 5700 0248 0368     		ldr	r3, [r0]
 5701 024a DD6E     		ldr	r5, [r3, #108]
 5702 024c 05F0F845 		and	r5, r5, #2080374784
 5703 0250 0C68     		ldr	r4, [r1]
 5704 0252 B5EB846F 		cmp	r5, r4, lsl #26
 5705 0256 03D1     		bne	.L445
6252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 5706              		.loc 1 6252 0
 5707 0258 DC6E     		ldr	r4, [r3, #108]
 5708 025a 24F00044 		bic	r4, r4, #-2147483648
 5709 025e DC66     		str	r4, [r3, #108]
 5710              	.LVL425:
 5711              	.L445:
6264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5712              		.loc 1 6264 0
 5713 0260 0368     		ldr	r3, [r0]
 5714 0262 9C68     		ldr	r4, [r3, #8]
 5715 0264 04F00304 		and	r4, r4, #3
 5716 0268 012C     		cmp	r4, #1
 5717 026a 05D1     		bne	.L479
6264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5718              		.loc 1 6264 0 is_stmt 0 discriminator 1
 5719 026c 1C68     		ldr	r4, [r3]
 5720 026e 14F0010F 		tst	r4, #1
 5721 0272 03D1     		bne	.L480
6264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5722              		.loc 1 6264 0
 5723 0274 0024     		movs	r4, #0
 5724 0276 02E0     		b	.L459
 5725              	.L479:
 5726 0278 0024     		movs	r4, #0
 5727 027a 00E0     		b	.L459
 5728              	.L480:
 5729 027c 0124     		movs	r4, #1
 5730              	.L459:
6264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 5731              		.loc 1 6264 0 discriminator 4
 5732 027e 002C     		cmp	r4, #0
 5733 0280 40F0AD80 		bne	.L460
6267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 5734              		.loc 1 6267 0 is_stmt 1
 5735 0284 CC68     		ldr	r4, [r1, #12]
 5736 0286 012C     		cmp	r4, #1
ARM GAS  /tmp/cckiGtEU.s 			page 247


 5737 0288 0AD0     		beq	.L461
6270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 5738              		.loc 1 6270 0
 5739 028a D3F8B050 		ldr	r5, [r3, #176]
 5740 028e 0C68     		ldr	r4, [r1]
 5741 0290 0126     		movs	r6, #1
 5742 0292 06FA04F4 		lsl	r4, r6, r4
 5743 0296 25EA0404 		bic	r4, r5, r4
 5744 029a C3F8B040 		str	r4, [r3, #176]
 5745 029e 28E0     		b	.L462
 5746              	.L461:
6275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 5747              		.loc 1 6275 0
 5748 02a0 D3F8B050 		ldr	r5, [r3, #176]
 5749 02a4 0C68     		ldr	r4, [r1]
 5750 02a6 0126     		movs	r6, #1
 5751 02a8 06FA04F4 		lsl	r4, r6, r4
 5752 02ac 2C43     		orrs	r4, r4, r5
 5753 02ae C3F8B040 		str	r4, [r3, #176]
6280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 5754              		.loc 1 6280 0
 5755 02b2 0B68     		ldr	r3, [r1]
 5756 02b4 092B     		cmp	r3, #9
 5757 02b6 0ED9     		bls	.L463
6282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR2,
 5758              		.loc 1 6282 0
 5759 02b8 0468     		ldr	r4, [r0]
 5760 02ba A569     		ldr	r5, [r4, #24]
 5761 02bc 03EB4303 		add	r3, r3, r3, lsl #1
 5762 02c0 1B3B     		subs	r3, r3, #27
 5763 02c2 0726     		movs	r6, #7
 5764 02c4 9E40     		lsls	r6, r6, r3
 5765 02c6 25EA0606 		bic	r6, r5, r6
 5766 02ca 8D68     		ldr	r5, [r1, #8]
 5767 02cc 05FA03F3 		lsl	r3, r5, r3
 5768 02d0 3343     		orrs	r3, r3, r6
 5769 02d2 A361     		str	r3, [r4, #24]
 5770 02d4 0DE0     		b	.L462
 5771              	.L463:
6288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->SMPR1,
 5772              		.loc 1 6288 0
 5773 02d6 0468     		ldr	r4, [r0]
 5774 02d8 6569     		ldr	r5, [r4, #20]
 5775 02da 0133     		adds	r3, r3, #1
 5776 02dc 03EB4303 		add	r3, r3, r3, lsl #1
 5777 02e0 0726     		movs	r6, #7
 5778 02e2 9E40     		lsls	r6, r6, r3
 5779 02e4 25EA0606 		bic	r6, r5, r6
 5780 02e8 8D68     		ldr	r5, [r1, #8]
 5781 02ea 05FA03F3 		lsl	r3, r5, r3
 5782 02ee 3343     		orrs	r3, r3, r6
 5783 02f0 6361     		str	r3, [r4, #20]
 5784              	.L462:
 5785              	.LVL426:
6309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 5786              		.loc 1 6309 0
 5787 02f2 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/cckiGtEU.s 			page 248


 5788 02f4 102B     		cmp	r3, #16
 5789 02f6 04D1     		bne	.L464
6310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 5790              		.loc 1 6310 0 discriminator 1
 5791 02f8 3E49     		ldr	r1, .L485+4
 5792              	.LVL427:
 5793 02fa 8968     		ldr	r1, [r1, #8]
6309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 5794              		.loc 1 6309 0 discriminator 1
 5795 02fc 11F4000F 		tst	r1, #8388608
 5796 0300 0DD0     		beq	.L465
 5797              	.L464:
6310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 5798              		.loc 1 6310 0
 5799 0302 112B     		cmp	r3, #17
 5800 0304 04D1     		bne	.L466
6312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 5801              		.loc 1 6312 0
 5802 0306 3B49     		ldr	r1, .L485+4
 5803 0308 8968     		ldr	r1, [r1, #8]
6311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 5804              		.loc 1 6311 0
 5805 030a 11F0807F 		tst	r1, #16777216
 5806 030e 06D0     		beq	.L465
 5807              	.L466:
6312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 5808              		.loc 1 6312 0
 5809 0310 122B     		cmp	r3, #18
 5810 0312 64D1     		bne	.L460
6314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 5811              		.loc 1 6314 0
 5812 0314 3749     		ldr	r1, .L485+4
 5813 0316 8968     		ldr	r1, [r1, #8]
6313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 5814              		.loc 1 6313 0
 5815 0318 11F4800F 		tst	r1, #4194304
 5816 031c 5FD1     		bne	.L460
 5817              	.L465:
6319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 5818              		.loc 1 6319 0
 5819 031e 0168     		ldr	r1, [r0]
 5820 0320 B1F1A04F 		cmp	r1, #1342177280
 5821 0324 02D1     		bne	.L467
6319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 5822              		.loc 1 6319 0 is_stmt 0 discriminator 1
 5823 0326 344C     		ldr	r4, .L485+8
 5824 0328 0194     		str	r4, [sp, #4]
 5825 032a 02E0     		b	.L468
 5826              	.L467:
6319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 5827              		.loc 1 6319 0 discriminator 2
 5828 032c 4FF0A044 		mov	r4, #1342177280
 5829 0330 0194     		str	r4, [sp, #4]
 5830              	.L468:
6323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5831              		.loc 1 6323 0 is_stmt 1
 5832 0332 8C68     		ldr	r4, [r1, #8]
ARM GAS  /tmp/cckiGtEU.s 			page 249


 5833 0334 04F00304 		and	r4, r4, #3
 5834 0338 012C     		cmp	r4, #1
 5835 033a 05D1     		bne	.L481
6323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5836              		.loc 1 6323 0 is_stmt 0 discriminator 1
 5837 033c 0C68     		ldr	r4, [r1]
 5838 033e 14F0010F 		tst	r4, #1
 5839 0342 03D1     		bne	.L482
6323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5840              		.loc 1 6323 0
 5841 0344 0024     		movs	r4, #0
 5842 0346 02E0     		b	.L469
 5843              	.L481:
 5844 0348 0024     		movs	r4, #0
 5845 034a 00E0     		b	.L469
 5846              	.L482:
 5847 034c 0124     		movs	r4, #1
 5848              	.L469:
6323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5849              		.loc 1 6323 0 discriminator 4
 5850 034e 002C     		cmp	r4, #0
 5851 0350 40D1     		bne	.L470
6324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 5852              		.loc 1 6324 0 is_stmt 1 discriminator 1
 5853 0352 019C     		ldr	r4, [sp, #4]
6323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 5854              		.loc 1 6323 0 discriminator 1
 5855 0354 7CB1     		cbz	r4, .L471
6325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 5856              		.loc 1 6325 0
 5857 0356 A568     		ldr	r5, [r4, #8]
 5858 0358 05F00305 		and	r5, r5, #3
 5859 035c 012D     		cmp	r5, #1
 5860 035e 05D1     		bne	.L483
6325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 5861              		.loc 1 6325 0 is_stmt 0 discriminator 1
 5862 0360 2468     		ldr	r4, [r4]
 5863 0362 14F0010F 		tst	r4, #1
 5864 0366 03D1     		bne	.L484
6325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 5865              		.loc 1 6325 0
 5866 0368 0024     		movs	r4, #0
 5867 036a 02E0     		b	.L472
 5868              	.L483:
 5869 036c 0024     		movs	r4, #0
 5870 036e 00E0     		b	.L472
 5871              	.L484:
 5872 0370 0124     		movs	r4, #1
 5873              	.L472:
6324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 5874              		.loc 1 6324 0 is_stmt 1
 5875 0372 002C     		cmp	r4, #0
 5876 0374 2ED1     		bne	.L470
 5877              	.L471:
6329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1
 5878              		.loc 1 6329 0
 5879 0376 102B     		cmp	r3, #16
ARM GAS  /tmp/cckiGtEU.s 			page 250


 5880 0378 19D1     		bne	.L473
6329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1
 5881              		.loc 1 6329 0 is_stmt 0 discriminator 1
 5882 037a B1F1A04F 		cmp	r1, #1342177280
 5883 037e 16D1     		bne	.L473
6331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 5884              		.loc 1 6331 0 is_stmt 1
 5885 0380 1C4B     		ldr	r3, .L485+4
 5886 0382 9968     		ldr	r1, [r3, #8]
 5887 0384 41F40001 		orr	r1, r1, #8388608
 5888 0388 9960     		str	r1, [r3, #8]
6335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 5889              		.loc 1 6335 0
 5890 038a 1C4B     		ldr	r3, .L485+12
 5891 038c 1968     		ldr	r1, [r3]
 5892 038e 1C4B     		ldr	r3, .L485+16
 5893 0390 A3FB0143 		umull	r4, r3, r3, r1
 5894 0394 9B0C     		lsrs	r3, r3, #18
 5895 0396 03EB8303 		add	r3, r3, r3, lsl #2
 5896 039a 5B00     		lsls	r3, r3, #1
 5897 039c 0093     		str	r3, [sp]
6336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 5898              		.loc 1 6336 0
 5899 039e 02E0     		b	.L474
 5900              	.L475:
6338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****             wait_loop_index--;
 5901              		.loc 1 6338 0
 5902 03a0 009B     		ldr	r3, [sp]
 5903 03a2 013B     		subs	r3, r3, #1
 5904 03a4 0093     		str	r3, [sp]
 5905              	.L474:
6336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           while(wait_loop_index != 0U)
 5906              		.loc 1 6336 0 discriminator 1
 5907 03a6 009B     		ldr	r3, [sp]
 5908 03a8 002B     		cmp	r3, #0
 5909 03aa F9D1     		bne	.L475
 5910 03ac 17E0     		b	.L460
 5911              	.L473:
6343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1)
 5912              		.loc 1 6343 0
 5913 03ae 112B     		cmp	r3, #17
 5914 03b0 08D1     		bne	.L476
6343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1)
 5915              		.loc 1 6343 0 is_stmt 0 discriminator 1
 5916 03b2 B1F1A04F 		cmp	r1, #1342177280
 5917 03b6 05D1     		bne	.L476
6345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 5918              		.loc 1 6345 0 is_stmt 1
 5919 03b8 0E4B     		ldr	r3, .L485+4
 5920 03ba 9968     		ldr	r1, [r3, #8]
 5921 03bc 41F08071 		orr	r1, r1, #16777216
 5922 03c0 9960     		str	r1, [r3, #8]
 5923 03c2 0CE0     		b	.L460
 5924              	.L476:
6351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 5925              		.loc 1 6351 0
 5926 03c4 122B     		cmp	r3, #18
ARM GAS  /tmp/cckiGtEU.s 			page 251


 5927 03c6 0AD1     		bne	.L460
6353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 5928              		.loc 1 6353 0
 5929 03c8 0A4B     		ldr	r3, .L485+4
 5930 03ca 9968     		ldr	r1, [r3, #8]
 5931 03cc 41F48001 		orr	r1, r1, #4194304
 5932 03d0 9960     		str	r1, [r3, #8]
 5933 03d2 04E0     		b	.L460
 5934              	.L470:
6362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5935              		.loc 1 6362 0
 5936 03d4 436C     		ldr	r3, [r0, #68]
 5937 03d6 43F02003 		orr	r3, r3, #32
 5938 03da 4364     		str	r3, [r0, #68]
 5939              	.LVL428:
6364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 5940              		.loc 1 6364 0
 5941 03dc 0122     		movs	r2, #1
 5942              	.LVL429:
 5943              	.L460:
6371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 5944              		.loc 1 6371 0
 5945 03de 0023     		movs	r3, #0
 5946 03e0 80F84030 		strb	r3, [r0, #64]
6374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 5947              		.loc 1 6374 0
 5948 03e4 1046     		mov	r0, r2
 5949              	.LVL430:
 5950 03e6 00E0     		b	.L434
 5951              	.LVL431:
 5952              	.L477:
5941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5953              		.loc 1 5941 0
 5954 03e8 0220     		movs	r0, #2
 5955              	.LVL432:
 5956              	.L434:
6375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 5957              		.loc 1 6375 0
 5958 03ea 17B0     		add	sp, sp, #92
 5959              		@ sp needed
 5960 03ec 70BC     		pop	{r4, r5, r6}
 5961 03ee 7047     		bx	lr
 5962              	.L486:
 5963              		.align	2
 5964              	.L485:
 5965 03f0 00F0FF83 		.word	-2080378880
 5966 03f4 00030050 		.word	1342178048
 5967 03f8 00010050 		.word	1342177536
 5968 03fc 00000000 		.word	SystemCoreClock
 5969 0400 83DE1B43 		.word	1125899907
 5970              		.cfi_endproc
 5971              	.LFE156:
 5973              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 5974              		.align	2
 5975              		.global	HAL_ADC_AnalogWDGConfig
 5976              		.thumb
 5977              		.thumb_func
ARM GAS  /tmp/cckiGtEU.s 			page 252


 5979              	HAL_ADC_AnalogWDGConfig:
 5980              	.LFB157:
6651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 5981              		.loc 1 6651 0
 5982              		.cfi_startproc
 5983              		@ args = 0, pretend = 0, frame = 0
 5984              		@ frame_needed = 0, uses_anonymous_args = 0
 5985              		@ link register save eliminated.
 5986              	.LVL433:
 5987 0000 70B4     		push	{r4, r5, r6}
 5988              	.LCFI39:
 5989              		.cfi_def_cfa_offset 12
 5990              		.cfi_offset 4, -12
 5991              		.cfi_offset 5, -8
 5992              		.cfi_offset 6, -4
 5993              	.LVL434:
6678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5994              		.loc 1 6678 0
 5995 0002 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 5996 0006 012B     		cmp	r3, #1
 5997 0008 00F0C880 		beq	.L502
6678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5998              		.loc 1 6678 0 is_stmt 0 discriminator 2
 5999 000c 0123     		movs	r3, #1
 6000 000e 80F84030 		strb	r3, [r0, #64]
6685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 6001              		.loc 1 6685 0 is_stmt 1 discriminator 2
 6002 0012 0368     		ldr	r3, [r0]
 6003 0014 9A68     		ldr	r2, [r3, #8]
 6004 0016 12F00C0F 		tst	r2, #12
 6005 001a 40F0B580 		bne	.L489
6689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 6006              		.loc 1 6689 0
 6007 001e 0A68     		ldr	r2, [r1]
 6008 0020 012A     		cmp	r2, #1
 6009 0022 34D1     		bne	.L490
6696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR                             ,
 6010              		.loc 1 6696 0
 6011 0024 DA68     		ldr	r2, [r3, #12]
 6012 0026 22F0FB42 		bic	r2, r2, #2105540608
 6013 002a 22F48002 		bic	r2, r2, #4194304
 6014 002e 4C68     		ldr	r4, [r1, #4]
 6015 0030 8D68     		ldr	r5, [r1, #8]
 6016 0032 44EA8564 		orr	r4, r4, r5, lsl #26
 6017 0036 2243     		orrs	r2, r2, r4
 6018 0038 DA60     		str	r2, [r3, #12]
6707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighTh
 6019              		.loc 1 6707 0
 6020 003a 0A69     		ldr	r2, [r1, #16]
 6021 003c 0368     		ldr	r3, [r0]
 6022 003e DE68     		ldr	r6, [r3, #12]
 6023 0040 C6F3C106 		ubfx	r6, r6, #3, #2
 6024 0044 7600     		lsls	r6, r6, #1
 6025 0046 02FA06F6 		lsl	r6, r2, r6
 6026              	.LVL435:
6708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 6027              		.loc 1 6708 0
ARM GAS  /tmp/cckiGtEU.s 			page 253


 6028 004a 4A69     		ldr	r2, [r1, #20]
 6029 004c DD68     		ldr	r5, [r3, #12]
 6030 004e C5F3C105 		ubfx	r5, r5, #3, #2
 6031 0052 6D00     		lsls	r5, r5, #1
 6032 0054 02FA05F5 		lsl	r5, r2, r5
 6033              	.LVL436:
6711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->TR1                                ,
 6034              		.loc 1 6711 0
 6035 0058 1C6A     		ldr	r4, [r3, #32]
 6036 005a 04F0F024 		and	r4, r4, #-268374016
 6037 005e 45EA0642 		orr	r2, r5, r6, lsl #16
 6038 0062 2243     		orrs	r2, r2, r4
 6039 0064 1A62     		str	r2, [r3, #32]
6720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 6040              		.loc 1 6720 0
 6041 0066 0368     		ldr	r3, [r0]
 6042 0068 8022     		movs	r2, #128
 6043 006a 1A60     		str	r2, [r3]
6723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(AnalogWDGConfig->ITMode == ENABLE)
 6044              		.loc 1 6723 0
 6045 006c CB68     		ldr	r3, [r1, #12]
 6046 006e 012B     		cmp	r3, #1
 6047 0070 06D1     		bne	.L491
6726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
 6048              		.loc 1 6726 0
 6049 0072 0368     		ldr	r3, [r0]
 6050 0074 5A68     		ldr	r2, [r3, #4]
 6051 0076 42F08002 		orr	r2, r2, #128
 6052 007a 5A60     		str	r2, [r3, #4]
6652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6053              		.loc 1 6652 0
 6054 007c 0022     		movs	r2, #0
 6055 007e 88E0     		b	.L492
 6056              	.L491:
6731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
 6057              		.loc 1 6731 0
 6058 0080 0368     		ldr	r3, [r0]
 6059 0082 5A68     		ldr	r2, [r3, #4]
 6060 0084 22F08002 		bic	r2, r2, #128
 6061 0088 5A60     		str	r2, [r3, #4]
6652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6062              		.loc 1 6652 0
 6063 008a 0022     		movs	r2, #0
 6064 008c 81E0     		b	.L492
 6065              	.LVL437:
 6066              	.L490:
6740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
 6067              		.loc 1 6740 0
 6068 008e DC68     		ldr	r4, [r3, #12]
 6069 0090 04F01804 		and	r4, r4, #24
 6070 0094 182C     		cmp	r4, #24
 6071 0096 09D0     		beq	.L493
6740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
 6072              		.loc 1 6740 0 is_stmt 0 discriminator 1
 6073 0098 0D69     		ldr	r5, [r1, #16]
 6074 009a DC68     		ldr	r4, [r3, #12]
 6075 009c C4F3C104 		ubfx	r4, r4, #3, #2
ARM GAS  /tmp/cckiGtEU.s 			page 254


 6076 00a0 6400     		lsls	r4, r4, #1
 6077 00a2 6442     		negs	r4, r4
 6078 00a4 0434     		adds	r4, r4, #4
 6079 00a6 25FA04F6 		lsr	r6, r5, r4
 6080 00aa 01E0     		b	.L494
 6081              	.L493:
6740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
 6082              		.loc 1 6740 0 discriminator 2
 6083 00ac 0E69     		ldr	r6, [r1, #16]
 6084 00ae B600     		lsls	r6, r6, #2
 6085              	.L494:
 6086              	.LVL438:
6741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 6087              		.loc 1 6741 0 is_stmt 1 discriminator 3
 6088 00b0 DD68     		ldr	r5, [r3, #12]
 6089 00b2 05F01805 		and	r5, r5, #24
 6090 00b6 182D     		cmp	r5, #24
 6091 00b8 09D0     		beq	.L495
6741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 6092              		.loc 1 6741 0 is_stmt 0 discriminator 1
 6093 00ba 4D69     		ldr	r5, [r1, #20]
 6094 00bc DC68     		ldr	r4, [r3, #12]
 6095 00be C4F3C104 		ubfx	r4, r4, #3, #2
 6096 00c2 6400     		lsls	r4, r4, #1
 6097 00c4 6442     		negs	r4, r4
 6098 00c6 0434     		adds	r4, r4, #4
 6099 00c8 25FA04F4 		lsr	r4, r5, r4
 6100 00cc 01E0     		b	.L496
 6101              	.L495:
6741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 6102              		.loc 1 6741 0 discriminator 2
 6103 00ce 4C69     		ldr	r4, [r1, #20]
 6104 00d0 A400     		lsls	r4, r4, #2
 6105              	.L496:
 6106              	.LVL439:
6743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 6107              		.loc 1 6743 0 is_stmt 1 discriminator 3
 6108 00d2 022A     		cmp	r2, #2
 6109 00d4 23D1     		bne	.L497
6749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 6110              		.loc 1 6749 0
 6111 00d6 4A68     		ldr	r2, [r1, #4]
 6112 00d8 9AB1     		cbz	r2, .L498
6752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           MODIFY_REG(hadc->Instance->TR2                                ,
 6113              		.loc 1 6752 0
 6114 00da 5A6A     		ldr	r2, [r3, #36]
 6115 00dc 02F0FF22 		and	r2, r2, #-16711936
 6116 00e0 44EA0644 		orr	r4, r4, r6, lsl #16
 6117              	.LVL440:
 6118 00e4 1443     		orrs	r4, r4, r2
 6119 00e6 5C62     		str	r4, [r3, #36]
6758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 6120              		.loc 1 6758 0
 6121 00e8 0368     		ldr	r3, [r0]
 6122 00ea D3F8A040 		ldr	r4, [r3, #160]
 6123 00ee 8A68     		ldr	r2, [r1, #8]
 6124 00f0 0125     		movs	r5, #1
ARM GAS  /tmp/cckiGtEU.s 			page 255


 6125 00f2 05FA02F2 		lsl	r2, r5, r2
 6126 00f6 2243     		orrs	r2, r2, r4
 6127 00f8 C3F8A020 		str	r2, [r3, #160]
6768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 6128              		.loc 1 6768 0
 6129 00fc 4FF48073 		mov	r3, #256
 6130 0100 30E0     		b	.L499
 6131              	.LVL441:
 6132              	.L498:
6762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 6133              		.loc 1 6762 0
 6134 0102 5A6A     		ldr	r2, [r3, #36]
 6135 0104 02F0FF22 		and	r2, r2, #-16711936
 6136 0108 5A62     		str	r2, [r3, #36]
6763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 6137              		.loc 1 6763 0
 6138 010a 0268     		ldr	r2, [r0]
 6139 010c D2F8A030 		ldr	r3, [r2, #160]
 6140 0110 DB0C     		lsrs	r3, r3, #19
 6141 0112 DB04     		lsls	r3, r3, #19
 6142 0114 C2F8A030 		str	r3, [r2, #160]
6768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 6143              		.loc 1 6768 0
 6144 0118 4FF48073 		mov	r3, #256
 6145 011c 22E0     		b	.L499
 6146              	.L497:
6778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 6147              		.loc 1 6778 0
 6148 011e 4A68     		ldr	r2, [r1, #4]
 6149 0120 9AB1     		cbz	r2, .L500
6781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           MODIFY_REG(hadc->Instance->TR3                                ,
 6150              		.loc 1 6781 0
 6151 0122 9A6A     		ldr	r2, [r3, #40]
 6152 0124 02F0FF22 		and	r2, r2, #-16711936
 6153 0128 44EA0644 		orr	r4, r4, r6, lsl #16
 6154              	.LVL442:
 6155 012c 1443     		orrs	r4, r4, r2
 6156 012e 9C62     		str	r4, [r3, #40]
6787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 6157              		.loc 1 6787 0
 6158 0130 0368     		ldr	r3, [r0]
 6159 0132 D3F8A440 		ldr	r4, [r3, #164]
 6160 0136 8A68     		ldr	r2, [r1, #8]
 6161 0138 0125     		movs	r5, #1
 6162 013a 05FA02F2 		lsl	r2, r5, r2
 6163 013e 2243     		orrs	r2, r2, r4
 6164 0140 C3F8A420 		str	r2, [r3, #164]
6797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 6165              		.loc 1 6797 0
 6166 0144 4FF40073 		mov	r3, #512
 6167 0148 0CE0     		b	.L499
 6168              	.LVL443:
 6169              	.L500:
6791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 6170              		.loc 1 6791 0
 6171 014a 9A6A     		ldr	r2, [r3, #40]
 6172 014c 02F0FF22 		and	r2, r2, #-16711936
ARM GAS  /tmp/cckiGtEU.s 			page 256


 6173 0150 9A62     		str	r2, [r3, #40]
6792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 6174              		.loc 1 6792 0
 6175 0152 0268     		ldr	r2, [r0]
 6176 0154 D2F8A430 		ldr	r3, [r2, #164]
 6177 0158 DB0C     		lsrs	r3, r3, #19
 6178 015a DB04     		lsls	r3, r3, #19
 6179 015c C2F8A430 		str	r3, [r2, #164]
6797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 6180              		.loc 1 6797 0
 6181 0160 4FF40073 		mov	r3, #512
 6182              	.LVL444:
 6183              	.L499:
6804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
 6184              		.loc 1 6804 0
 6185 0164 0268     		ldr	r2, [r0]
 6186 0166 1360     		str	r3, [r2]
6807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if(AnalogWDGConfig->ITMode == ENABLE)
 6187              		.loc 1 6807 0
 6188 0168 CA68     		ldr	r2, [r1, #12]
 6189 016a 012A     		cmp	r2, #1
 6190 016c 05D1     		bne	.L501
6809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
 6191              		.loc 1 6809 0
 6192 016e 0268     		ldr	r2, [r0]
 6193 0170 5168     		ldr	r1, [r2, #4]
 6194              	.LVL445:
 6195 0172 0B43     		orrs	r3, r3, r1
 6196              	.LVL446:
 6197 0174 5360     		str	r3, [r2, #4]
6652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6198              		.loc 1 6652 0
 6199 0176 0022     		movs	r2, #0
 6200 0178 0BE0     		b	.L492
 6201              	.LVL447:
 6202              	.L501:
6813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
 6203              		.loc 1 6813 0
 6204 017a 0268     		ldr	r2, [r0]
 6205 017c 5168     		ldr	r1, [r2, #4]
 6206              	.LVL448:
 6207 017e 21EA0303 		bic	r3, r1, r3
 6208              	.LVL449:
 6209 0182 5360     		str	r3, [r2, #4]
6652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6210              		.loc 1 6652 0
 6211 0184 0022     		movs	r2, #0
 6212 0186 04E0     		b	.L492
 6213              	.LVL450:
 6214              	.L489:
6823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 6215              		.loc 1 6823 0
 6216 0188 436C     		ldr	r3, [r0, #68]
 6217 018a 43F02003 		orr	r3, r3, #32
 6218 018e 4364     		str	r3, [r0, #68]
 6219              	.LVL451:
6825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
ARM GAS  /tmp/cckiGtEU.s 			page 257


 6220              		.loc 1 6825 0
 6221 0190 0122     		movs	r2, #1
 6222              	.LVL452:
 6223              	.L492:
6830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 6224              		.loc 1 6830 0
 6225 0192 0023     		movs	r3, #0
 6226 0194 80F84030 		strb	r3, [r0, #64]
6833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 6227              		.loc 1 6833 0
 6228 0198 1046     		mov	r0, r2
 6229              	.LVL453:
 6230 019a 00E0     		b	.L488
 6231              	.LVL454:
 6232              	.L502:
6678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 6233              		.loc 1 6678 0
 6234 019c 0220     		movs	r0, #2
 6235              	.LVL455:
 6236              	.L488:
6834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** }
 6237              		.loc 1 6834 0
 6238 019e 70BC     		pop	{r4, r5, r6}
 6239 01a0 7047     		bx	lr
 6240              		.cfi_endproc
 6241              	.LFE157:
 6243 01a2 00BF     		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 6244              		.align	2
 6245              		.global	HAL_ADCEx_MultiModeConfigChannel
 6246              		.thumb
 6247              		.thumb_func
 6249              	HAL_ADCEx_MultiModeConfigChannel:
 6250              	.LFB158:
6936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** {
 6251              		.loc 1 6936 0
 6252              		.cfi_startproc
 6253              		@ args = 0, pretend = 0, frame = 88
 6254              		@ frame_needed = 0, uses_anonymous_args = 0
 6255              		@ link register save eliminated.
 6256              	.LVL456:
 6257 0000 70B4     		push	{r4, r5, r6}
 6258              	.LCFI40:
 6259              		.cfi_def_cfa_offset 12
 6260              		.cfi_offset 4, -12
 6261              		.cfi_offset 5, -8
 6262              		.cfi_offset 6, -4
 6263 0002 97B0     		sub	sp, sp, #92
 6264              	.LCFI41:
 6265              		.cfi_def_cfa_offset 104
 6266              	.LVL457:
6951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 6267              		.loc 1 6951 0
 6268 0004 90F84030 		ldrb	r3, [r0, #64]	@ zero_extendqisi2
 6269 0008 012B     		cmp	r3, #1
 6270 000a 00F09080 		beq	.L514
6951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 6271              		.loc 1 6951 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/cckiGtEU.s 			page 258


 6272 000e 0123     		movs	r3, #1
 6273 0010 80F84030 		strb	r3, [r0, #64]
6955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 6274              		.loc 1 6955 0 is_stmt 1 discriminator 2
 6275 0014 0368     		ldr	r3, [r0]
 6276 0016 B3F1A04F 		cmp	r3, #1342177280
 6277 001a 02D1     		bne	.L505
6955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 6278              		.loc 1 6955 0 is_stmt 0 discriminator 1
 6279 001c 464A     		ldr	r2, .L527
 6280 001e 0192     		str	r2, [sp, #4]
 6281 0020 02E0     		b	.L506
 6282              	.L505:
6955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 6283              		.loc 1 6955 0 discriminator 2
 6284 0022 4FF0A042 		mov	r2, #1342177280
 6285 0026 0192     		str	r2, [sp, #4]
 6286              	.L506:
6962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 6287              		.loc 1 6962 0 is_stmt 1
 6288 0028 9B68     		ldr	r3, [r3, #8]
 6289 002a 13F0040F 		tst	r3, #4
 6290 002e 6CD1     		bne	.L507
6963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 6291              		.loc 1 6963 0
 6292 0030 019B     		ldr	r3, [sp, #4]
 6293 0032 9A68     		ldr	r2, [r3, #8]
 6294 0034 12F0040F 		tst	r2, #4
 6295 0038 67D1     		bne	.L507
 6296              	.LVL458:
6973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     if(multimode->Mode != ADC_MODE_INDEPENDENT)
 6297              		.loc 1 6973 0
 6298 003a 0A68     		ldr	r2, [r1]
 6299 003c 002A     		cmp	r2, #0
 6300 003e 37D0     		beq	.L508
6978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR                                          ,
 6301              		.loc 1 6978 0
 6302 0040 3E4A     		ldr	r2, .L527+4
 6303 0042 9668     		ldr	r6, [r2, #8]
 6304 0044 26F46046 		bic	r6, r6, #57344
 6305 0048 4C68     		ldr	r4, [r1, #4]
 6306 004a 456B     		ldr	r5, [r0, #52]
 6307 004c 44EA4534 		orr	r4, r4, r5, lsl #13
 6308 0050 3443     		orrs	r4, r4, r6
 6309 0052 9460     		str	r4, [r2, #8]
7000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6310              		.loc 1 7000 0
 6311 0054 0268     		ldr	r2, [r0]
 6312 0056 9468     		ldr	r4, [r2, #8]
 6313 0058 04F00304 		and	r4, r4, #3
 6314 005c 012C     		cmp	r4, #1
 6315 005e 05D1     		bne	.L515
7000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6316              		.loc 1 7000 0 is_stmt 0 discriminator 1
 6317 0060 1268     		ldr	r2, [r2]
 6318 0062 12F0010F 		tst	r2, #1
 6319 0066 03D1     		bne	.L516
ARM GAS  /tmp/cckiGtEU.s 			page 259


7000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6320              		.loc 1 7000 0
 6321 0068 0022     		movs	r2, #0
 6322 006a 02E0     		b	.L509
 6323              	.L515:
 6324 006c 0022     		movs	r2, #0
 6325 006e 00E0     		b	.L509
 6326              	.L516:
 6327 0070 0122     		movs	r2, #1
 6328              	.L509:
7000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6329              		.loc 1 7000 0 discriminator 4
 6330 0072 002A     		cmp	r2, #0
 6331 0074 4FD1     		bne	.L517
7001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 6332              		.loc 1 7001 0 is_stmt 1
 6333 0076 9A68     		ldr	r2, [r3, #8]
 6334 0078 02F00302 		and	r2, r2, #3
 6335 007c 012A     		cmp	r2, #1
 6336 007e 05D1     		bne	.L518
7001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 6337              		.loc 1 7001 0 is_stmt 0 discriminator 1
 6338 0080 1B68     		ldr	r3, [r3]
 6339 0082 13F0010F 		tst	r3, #1
 6340 0086 03D1     		bne	.L519
7001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 6341              		.loc 1 7001 0
 6342 0088 0023     		movs	r3, #0
 6343 008a 02E0     		b	.L511
 6344              	.L518:
 6345 008c 0023     		movs	r3, #0
 6346 008e 00E0     		b	.L511
 6347              	.L519:
 6348 0090 0123     		movs	r3, #1
 6349              	.L511:
7000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6350              		.loc 1 7000 0 is_stmt 1
 6351 0092 002B     		cmp	r3, #0
 6352 0094 41D1     		bne	.L520
7003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         MODIFY_REG(tmpADC_Common->CCR                                          ,
 6353              		.loc 1 7003 0
 6354 0096 294A     		ldr	r2, .L527+4
 6355 0098 9368     		ldr	r3, [r2, #8]
 6356 009a 23F47163 		bic	r3, r3, #3856
 6357 009e 23F00F03 		bic	r3, r3, #15
 6358 00a2 0C68     		ldr	r4, [r1]
 6359 00a4 8968     		ldr	r1, [r1, #8]
 6360              	.LVL459:
 6361 00a6 2143     		orrs	r1, r1, r4
 6362 00a8 0B43     		orrs	r3, r3, r1
 6363 00aa 9360     		str	r3, [r2, #8]
6937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6364              		.loc 1 6937 0
 6365 00ac 0022     		movs	r2, #0
 6366 00ae 39E0     		b	.L510
 6367              	.LVL460:
 6368              	.L508:
ARM GAS  /tmp/cckiGtEU.s 			page 260


7012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 6369              		.loc 1 7012 0
 6370 00b0 224A     		ldr	r2, .L527+4
 6371 00b2 9168     		ldr	r1, [r2, #8]
 6372              	.LVL461:
 6373 00b4 21F46041 		bic	r1, r1, #57344
 6374 00b8 9160     		str	r1, [r2, #8]
7017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6375              		.loc 1 7017 0
 6376 00ba 0268     		ldr	r2, [r0]
 6377 00bc 9168     		ldr	r1, [r2, #8]
 6378 00be 01F00301 		and	r1, r1, #3
 6379 00c2 0129     		cmp	r1, #1
 6380 00c4 05D1     		bne	.L521
7017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6381              		.loc 1 7017 0 is_stmt 0 discriminator 1
 6382 00c6 1268     		ldr	r2, [r2]
 6383 00c8 12F0010F 		tst	r2, #1
 6384 00cc 03D1     		bne	.L522
7017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6385              		.loc 1 7017 0
 6386 00ce 0022     		movs	r2, #0
 6387 00d0 02E0     		b	.L512
 6388              	.L521:
 6389 00d2 0022     		movs	r2, #0
 6390 00d4 00E0     		b	.L512
 6391              	.L522:
 6392 00d6 0122     		movs	r2, #1
 6393              	.L512:
7017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6394              		.loc 1 7017 0 discriminator 4
 6395 00d8 0ABB     		cbnz	r2, .L523
7018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 6396              		.loc 1 7018 0 is_stmt 1
 6397 00da 9A68     		ldr	r2, [r3, #8]
 6398 00dc 02F00302 		and	r2, r2, #3
 6399 00e0 012A     		cmp	r2, #1
 6400 00e2 05D1     		bne	.L524
7018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 6401              		.loc 1 7018 0 is_stmt 0 discriminator 1
 6402 00e4 1B68     		ldr	r3, [r3]
 6403 00e6 13F0010F 		tst	r3, #1
 6404 00ea 03D1     		bne	.L525
7018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****           (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 6405              		.loc 1 7018 0
 6406 00ec 0023     		movs	r3, #0
 6407 00ee 02E0     		b	.L513
 6408              	.L524:
 6409 00f0 0023     		movs	r3, #0
 6410 00f2 00E0     		b	.L513
 6411              	.L525:
 6412 00f4 0123     		movs	r3, #1
 6413              	.L513:
7017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****       if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 6414              		.loc 1 7017 0 is_stmt 1
 6415 00f6 A3B9     		cbnz	r3, .L526
7020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****         CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
ARM GAS  /tmp/cckiGtEU.s 			page 261


 6416              		.loc 1 7020 0
 6417 00f8 104A     		ldr	r2, .L527+4
 6418 00fa 9368     		ldr	r3, [r2, #8]
 6419 00fc 23F47163 		bic	r3, r3, #3856
 6420 0100 23F00F03 		bic	r3, r3, #15
 6421 0104 9360     		str	r3, [r2, #8]
6937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6422              		.loc 1 6937 0
 6423 0106 0022     		movs	r2, #0
 6424 0108 0CE0     		b	.L510
 6425              	.LVL462:
 6426              	.L507:
7029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 6427              		.loc 1 7029 0
 6428 010a 436C     		ldr	r3, [r0, #68]
 6429 010c 43F02003 		orr	r3, r3, #32
 6430 0110 4364     		str	r3, [r0, #68]
 6431              	.LVL463:
7031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 6432              		.loc 1 7031 0
 6433 0112 0122     		movs	r2, #1
 6434 0114 06E0     		b	.L510
 6435              	.LVL464:
 6436              	.L517:
6937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6437              		.loc 1 6937 0
 6438 0116 0022     		movs	r2, #0
 6439 0118 04E0     		b	.L510
 6440              	.L520:
 6441 011a 0022     		movs	r2, #0
 6442 011c 02E0     		b	.L510
 6443              	.LVL465:
 6444              	.L523:
 6445 011e 0022     		movs	r2, #0
 6446 0120 00E0     		b	.L510
 6447              	.L526:
 6448 0122 0022     		movs	r2, #0
 6449              	.LVL466:
 6450              	.L510:
7036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 6451              		.loc 1 7036 0
 6452 0124 0023     		movs	r3, #0
 6453 0126 80F84030 		strb	r3, [r0, #64]
7039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   return tmp_hal_status;
 6454              		.loc 1 7039 0
 6455 012a 1046     		mov	r0, r2
 6456              	.LVL467:
 6457 012c 00E0     		b	.L504
 6458              	.LVL468:
 6459              	.L514:
6951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 6460              		.loc 1 6951 0
 6461 012e 0220     		movs	r0, #2
 6462              	.LVL469:
 6463              	.L504:
7040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_adc_ex.c **** } 
 6464              		.loc 1 7040 0
ARM GAS  /tmp/cckiGtEU.s 			page 262


 6465 0130 17B0     		add	sp, sp, #92
 6466              		@ sp needed
 6467 0132 70BC     		pop	{r4, r5, r6}
 6468 0134 7047     		bx	lr
 6469              	.L528:
 6470 0136 00BF     		.align	2
 6471              	.L527:
 6472 0138 00010050 		.word	1342177536
 6473 013c 00030050 		.word	1342178048
 6474              		.cfi_endproc
 6475              	.LFE158:
 6477              		.text
 6478              	.Letext0:
 6479              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 6480              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 6481              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f334x8.h"
 6482              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 6483              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 6484              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 6485              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 6486              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 6487              		.file 10 "Drivers/CMSIS/Include/core_cm4.h"
 6488              		.file 11 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 6489              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/cckiGtEU.s 			page 263


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f3xx_hal_adc_ex.c
     /tmp/cckiGtEU.s:21     .text.ADC_Disable:00000000 $t
     /tmp/cckiGtEU.s:25     .text.ADC_Disable:00000000 ADC_Disable
     /tmp/cckiGtEU.s:136    .text.ADC_ConversionStop:00000000 $t
     /tmp/cckiGtEU.s:140    .text.ADC_ConversionStop:00000000 ADC_ConversionStop
     /tmp/cckiGtEU.s:319    .text.ADC_ConversionStop:000000d8 $d
     /tmp/cckiGtEU.s:324    .text.ADC_Enable:00000000 $t
     /tmp/cckiGtEU.s:328    .text.ADC_Enable:00000000 ADC_Enable
     /tmp/cckiGtEU.s:434    .text.ADC_Enable:00000080 $d
     /tmp/cckiGtEU.s:439    .text.ADC_DMAError:00000000 $t
     /tmp/cckiGtEU.s:443    .text.ADC_DMAError:00000000 ADC_DMAError
     /tmp/cckiGtEU.s:474    .text.ADC_DMAHalfConvCplt:00000000 $t
     /tmp/cckiGtEU.s:478    .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
     /tmp/cckiGtEU.s:501    .text.ADC_DMAConvCplt:00000000 $t
     /tmp/cckiGtEU.s:505    .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
     /tmp/cckiGtEU.s:569    .text.HAL_ADC_Init:00000000 $t
     /tmp/cckiGtEU.s:574    .text.HAL_ADC_Init:00000000 HAL_ADC_Init
     /tmp/cckiGtEU.s:929    .text.HAL_ADC_Init:00000214 $d
     /tmp/cckiGtEU.s:938    .text.HAL_ADC_DeInit:00000000 $t
     /tmp/cckiGtEU.s:943    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
     /tmp/cckiGtEU.s:1218   .text.HAL_ADC_DeInit:000001b0 $d
     /tmp/cckiGtEU.s:1229   .text.HAL_ADC_Start:00000000 $t
     /tmp/cckiGtEU.s:1234   .text.HAL_ADC_Start:00000000 HAL_ADC_Start
     /tmp/cckiGtEU.s:1394   .text.HAL_ADC_Start:00000100 $d
     /tmp/cckiGtEU.s:1400   .text.HAL_ADC_Stop:00000000 $t
     /tmp/cckiGtEU.s:1405   .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
     /tmp/cckiGtEU.s:1466   .text.HAL_ADC_PollForConversion:00000000 $t
     /tmp/cckiGtEU.s:1471   .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
     /tmp/cckiGtEU.s:1667   .text.HAL_ADC_PollForConversion:00000118 $d
     /tmp/cckiGtEU.s:1672   .text.HAL_ADC_PollForEvent:00000000 $t
     /tmp/cckiGtEU.s:1677   .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
     /tmp/cckiGtEU.s:1829   .text.HAL_ADC_Start_IT:00000000 $t
     /tmp/cckiGtEU.s:1834   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
     /tmp/cckiGtEU.s:2027   .text.HAL_ADC_Start_IT:00000138 $d
     /tmp/cckiGtEU.s:2033   .text.HAL_ADC_Stop_IT:00000000 $t
     /tmp/cckiGtEU.s:2038   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
     /tmp/cckiGtEU.s:2104   .text.HAL_ADC_Start_DMA:00000000 $t
     /tmp/cckiGtEU.s:2109   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
     /tmp/cckiGtEU.s:2301   .text.HAL_ADC_Start_DMA:00000128 $d
     /tmp/cckiGtEU.s:2310   .text.HAL_ADC_Stop_DMA:00000000 $t
     /tmp/cckiGtEU.s:2315   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
     /tmp/cckiGtEU.s:2412   .text.HAL_ADC_GetValue:00000000 $t
     /tmp/cckiGtEU.s:2417   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
     /tmp/cckiGtEU.s:2435   .text.HAL_ADCEx_Calibration_Start:00000000 $t
     /tmp/cckiGtEU.s:2440   .text.HAL_ADCEx_Calibration_Start:00000000 HAL_ADCEx_Calibration_Start
     /tmp/cckiGtEU.s:2555   .text.HAL_ADCEx_Calibration_GetValue:00000000 $t
     /tmp/cckiGtEU.s:2560   .text.HAL_ADCEx_Calibration_GetValue:00000000 HAL_ADCEx_Calibration_GetValue
     /tmp/cckiGtEU.s:2590   .text.HAL_ADCEx_Calibration_SetValue:00000000 $t
     /tmp/cckiGtEU.s:2595   .text.HAL_ADCEx_Calibration_SetValue:00000000 HAL_ADCEx_Calibration_SetValue
     /tmp/cckiGtEU.s:2694   .text.HAL_ADCEx_InjectedStart:00000000 $t
     /tmp/cckiGtEU.s:2699   .text.HAL_ADCEx_InjectedStart:00000000 HAL_ADCEx_InjectedStart
     /tmp/cckiGtEU.s:2830   .text.HAL_ADCEx_InjectedStart:000000c0 $d
     /tmp/cckiGtEU.s:2835   .text.HAL_ADCEx_InjectedStop:00000000 $t
     /tmp/cckiGtEU.s:2840   .text.HAL_ADCEx_InjectedStop:00000000 HAL_ADCEx_InjectedStop
     /tmp/cckiGtEU.s:2932   .text.HAL_ADCEx_InjectedPollForConversion:00000000 $t
     /tmp/cckiGtEU.s:2937   .text.HAL_ADCEx_InjectedPollForConversion:00000000 HAL_ADCEx_InjectedPollForConversion
ARM GAS  /tmp/cckiGtEU.s 			page 264


     /tmp/cckiGtEU.s:3078   .text.HAL_ADCEx_InjectedPollForConversion:000000bc $d
     /tmp/cckiGtEU.s:3083   .text.HAL_ADCEx_InjectedStart_IT:00000000 $t
     /tmp/cckiGtEU.s:3088   .text.HAL_ADCEx_InjectedStart_IT:00000000 HAL_ADCEx_InjectedStart_IT
     /tmp/cckiGtEU.s:3252   .text.HAL_ADCEx_InjectedStart_IT:000000f8 $d
     /tmp/cckiGtEU.s:3257   .text.HAL_ADCEx_InjectedStop_IT:00000000 $t
     /tmp/cckiGtEU.s:3262   .text.HAL_ADCEx_InjectedStop_IT:00000000 HAL_ADCEx_InjectedStop_IT
     /tmp/cckiGtEU.s:3359   .text.HAL_ADCEx_MultiModeStart_DMA:00000000 $t
     /tmp/cckiGtEU.s:3364   .text.HAL_ADCEx_MultiModeStart_DMA:00000000 HAL_ADCEx_MultiModeStart_DMA
     /tmp/cckiGtEU.s:3524   .text.HAL_ADCEx_MultiModeStart_DMA:000000d0 $d
     /tmp/cckiGtEU.s:3534   .text.HAL_ADCEx_MultiModeStop_DMA:00000000 $t
     /tmp/cckiGtEU.s:3539   .text.HAL_ADCEx_MultiModeStop_DMA:00000000 HAL_ADCEx_MultiModeStop_DMA
     /tmp/cckiGtEU.s:3712   .text.HAL_ADCEx_MultiModeGetValue:00000000 $t
     /tmp/cckiGtEU.s:3717   .text.HAL_ADCEx_MultiModeGetValue:00000000 HAL_ADCEx_MultiModeGetValue
     /tmp/cckiGtEU.s:3734   .text.HAL_ADCEx_MultiModeGetValue:00000008 $d
     /tmp/cckiGtEU.s:3739   .text.HAL_ADCEx_InjectedGetValue:00000000 $t
     /tmp/cckiGtEU.s:3744   .text.HAL_ADCEx_InjectedGetValue:00000000 HAL_ADCEx_InjectedGetValue
     /tmp/cckiGtEU.s:3795   .text.HAL_ADCEx_RegularStop:00000000 $t
     /tmp/cckiGtEU.s:3800   .text.HAL_ADCEx_RegularStop:00000000 HAL_ADCEx_RegularStop
     /tmp/cckiGtEU.s:3876   .text.HAL_ADCEx_RegularStop_IT:00000000 $t
     /tmp/cckiGtEU.s:3881   .text.HAL_ADCEx_RegularStop_IT:00000000 HAL_ADCEx_RegularStop_IT
     /tmp/cckiGtEU.s:3961   .text.HAL_ADCEx_RegularStop_DMA:00000000 $t
     /tmp/cckiGtEU.s:3966   .text.HAL_ADCEx_RegularStop_DMA:00000000 HAL_ADCEx_RegularStop_DMA
     /tmp/cckiGtEU.s:4078   .text.HAL_ADCEx_RegularMultiModeStop_DMA:00000000 $t
     /tmp/cckiGtEU.s:4083   .text.HAL_ADCEx_RegularMultiModeStop_DMA:00000000 HAL_ADCEx_RegularMultiModeStop_DMA
     /tmp/cckiGtEU.s:4270   .text.HAL_ADCEx_InjectedConvCpltCallback:00000000 $t
     /tmp/cckiGtEU.s:4275   .text.HAL_ADCEx_InjectedConvCpltCallback:00000000 HAL_ADCEx_InjectedConvCpltCallback
     /tmp/cckiGtEU.s:4288   .text.HAL_ADCEx_InjectedQueueOverflowCallback:00000000 $t
     /tmp/cckiGtEU.s:4293   .text.HAL_ADCEx_InjectedQueueOverflowCallback:00000000 HAL_ADCEx_InjectedQueueOverflowCallback
     /tmp/cckiGtEU.s:4306   .text.HAL_ADCEx_LevelOutOfWindow2Callback:00000000 $t
     /tmp/cckiGtEU.s:4311   .text.HAL_ADCEx_LevelOutOfWindow2Callback:00000000 HAL_ADCEx_LevelOutOfWindow2Callback
     /tmp/cckiGtEU.s:4324   .text.HAL_ADCEx_LevelOutOfWindow3Callback:00000000 $t
     /tmp/cckiGtEU.s:4329   .text.HAL_ADCEx_LevelOutOfWindow3Callback:00000000 HAL_ADCEx_LevelOutOfWindow3Callback
     /tmp/cckiGtEU.s:4342   .text.HAL_ADC_IRQHandler:00000000 $t
     /tmp/cckiGtEU.s:4347   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
     /tmp/cckiGtEU.s:4788   .text.HAL_ADC_IRQHandler:000002cc $d
     /tmp/cckiGtEU.s:4793   .text.HAL_ADC_ConfigChannel:00000000 $t
     /tmp/cckiGtEU.s:4798   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
     /tmp/cckiGtEU.s:4942   .text.HAL_ADC_ConfigChannel:00000108 $d
     /tmp/cckiGtEU.s:4946   .text.HAL_ADC_ConfigChannel:0000010c $t
     /tmp/cckiGtEU.s:5331   .text.HAL_ADC_ConfigChannel:00000374 $d
     /tmp/cckiGtEU.s:5340   .text.HAL_ADCEx_InjectedConfigChannel:00000000 $t
     /tmp/cckiGtEU.s:5345   .text.HAL_ADCEx_InjectedConfigChannel:00000000 HAL_ADCEx_InjectedConfigChannel
     /tmp/cckiGtEU.s:5609   .text.HAL_ADCEx_InjectedConfigChannel:000001a6 $d
     /tmp/cckiGtEU.s:5613   .text.HAL_ADCEx_InjectedConfigChannel:000001aa $t
     /tmp/cckiGtEU.s:5965   .text.HAL_ADCEx_InjectedConfigChannel:000003f0 $d
     /tmp/cckiGtEU.s:5974   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
     /tmp/cckiGtEU.s:5979   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
     /tmp/cckiGtEU.s:6244   .text.HAL_ADCEx_MultiModeConfigChannel:00000000 $t
     /tmp/cckiGtEU.s:6249   .text.HAL_ADCEx_MultiModeConfigChannel:00000000 HAL_ADCEx_MultiModeConfigChannel
     /tmp/cckiGtEU.s:6472   .text.HAL_ADCEx_MultiModeConfigChannel:00000138 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_ADC_ErrorCallback
HAL_ADC_ConvHalfCpltCallback
HAL_ADC_ConvCpltCallback
ARM GAS  /tmp/cckiGtEU.s 			page 265


HAL_ADC_MspInit
SystemCoreClock
HAL_ADC_MspDeInit
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADC_LevelOutOfWindowCallback
